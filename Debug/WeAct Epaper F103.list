
WeAct Epaper F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d0  08005c28  08005c28  00006c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f8  080080f8  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080080f8  080080f8  000090f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008100  08008100  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008100  08008100  00009100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008104  08008104  00009104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008108  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001578  200001d8  080082e0  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  080082e0  0000a750  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069d1  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001912  00000000  00000000  00010bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  000124e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f2  00000000  00000000  00012cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001790e  00000000  00000000  000132e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008346  00000000  00000000  0002abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000838c1  00000000  00000000  00032f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b67f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000309c  00000000  00000000  000b683c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000b98d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c10 	.word	0x08005c10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08005c10 	.word	0x08005c10

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <epd_delay>:
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x0, 0x0, 0x0,
};

void epd_delay(uint16_t ms)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(ms);
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 f8e1 	bl	8001c5c <HAL_Delay>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <epd_res_set>:

void epd_res_set()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <epd_res_set+0x14>)
 8000aae:	f001 fb78 	bl	80021a2 <HAL_GPIO_WritePin>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40010800 	.word	0x40010800

08000abc <epd_res_reset>:

void epd_res_reset()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <epd_res_reset+0x14>)
 8000ac6:	f001 fb6c 	bl	80021a2 <HAL_GPIO_WritePin>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40010800 	.word	0x40010800

08000ad4 <epd_dc_set>:

void epd_dc_set()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2104      	movs	r1, #4
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <epd_dc_set+0x14>)
 8000ade:	f001 fb60 	bl	80021a2 <HAL_GPIO_WritePin>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010800 	.word	0x40010800

08000aec <epd_dc_reset>:

void epd_dc_reset()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2104      	movs	r1, #4
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <epd_dc_reset+0x14>)
 8000af6:	f001 fb54 	bl	80021a2 <HAL_GPIO_WritePin>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010800 	.word	0x40010800

08000b04 <epd_cs_set>:

void epd_cs_set()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <epd_cs_set+0x14>)
 8000b0e:	f001 fb48 	bl	80021a2 <HAL_GPIO_WritePin>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40010800 	.word	0x40010800

08000b1c <epd_cs_reset>:

void epd_cs_reset()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <epd_cs_reset+0x14>)
 8000b26:	f001 fb3c 	bl	80021a2 <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40010800 	.word	0x40010800

08000b34 <epd_is_busy>:

uint8_t epd_is_busy()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin) == RESET ? 0 : 1;
 8000b38:	2108      	movs	r1, #8
 8000b3a:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <epd_is_busy+0x14>)
 8000b3c:	f001 fb1a 	bl	8002174 <HAL_GPIO_ReadPin>
}
 8000b40:	bf00      	nop
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010800 	.word	0x40010800

08000b4c <epd_write_reg>:
//
//  spi_enable(SPI1);
//}

void epd_write_reg(uint8_t reg)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  epd_dc_reset();
 8000b56:	f7ff ffc9 	bl	8000aec <epd_dc_reset>
  epd_cs_reset();
 8000b5a:	f7ff ffdf 	bl	8000b1c <epd_cs_reset>
//  while (spi_i2s_flag_get(SPI1, SPI_FLAG_TBE) == RESET)
//    ;
//  while (spi_i2s_flag_get(SPI1, SPI_FLAG_TRANS) != RESET)
//    ;

  HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8000b5e:	1df9      	adds	r1, r7, #7
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	2201      	movs	r2, #1
 8000b64:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <epd_write_reg+0x3c>)
 8000b66:	f001 ff97 	bl	8002a98 <HAL_SPI_Transmit>
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8000b6a:	bf00      	nop
 8000b6c:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <epd_write_reg+0x3c>)
 8000b6e:	f002 f8d7 	bl	8002d20 <HAL_SPI_GetState>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d1f9      	bne.n	8000b6c <epd_write_reg+0x20>
	;

  epd_cs_set();
 8000b78:	f7ff ffc4 	bl	8000b04 <epd_cs_set>
  epd_dc_set();
 8000b7c:	f7ff ffaa 	bl	8000ad4 <epd_dc_set>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000208 	.word	0x20000208

08000b8c <epd_write_data>:

void epd_write_data(uint8_t data)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  epd_cs_reset();
 8000b96:	f7ff ffc1 	bl	8000b1c <epd_cs_reset>

  // Transmit data byte using SPI
  HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000b9a:	1df9      	adds	r1, r7, #7
 8000b9c:	2364      	movs	r3, #100	@ 0x64
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <epd_write_data+0x34>)
 8000ba2:	f001 ff79 	bl	8002a98 <HAL_SPI_Transmit>

  // Wait until transmission is complete
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8000ba6:	bf00      	nop
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <epd_write_data+0x34>)
 8000baa:	f002 f8b9 	bl	8002d20 <HAL_SPI_GetState>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d1f9      	bne.n	8000ba8 <epd_write_data+0x1c>
//  while (spi_i2s_flag_get(SPI1, SPI_FLAG_TBE) == RESET)
//    ;
//  while (spi_i2s_flag_get(SPI1, SPI_FLAG_TRANS) != RESET)
//    ;

  epd_cs_set();
 8000bb4:	f7ff ffa6 	bl	8000b04 <epd_cs_set>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000208 	.word	0x20000208

08000bc4 <_epd_write_data>:

void _epd_write_data(uint8_t data)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	// Wait until transmit buffer is empty
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8000bce:	bf00      	nop
 8000bd0:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <_epd_write_data+0x2c>)
 8000bd2:	f002 f8a5 	bl	8002d20 <HAL_SPI_GetState>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d1f9      	bne.n	8000bd0 <_epd_write_data+0xc>
	  ;

  HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000bdc:	1df9      	adds	r1, r7, #7
 8000bde:	2364      	movs	r3, #100	@ 0x64
 8000be0:	2201      	movs	r2, #1
 8000be2:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <_epd_write_data+0x2c>)
 8000be4:	f001 ff58 	bl	8002a98 <HAL_SPI_Transmit>
//  while (spi_i2s_flag_get(SPI1, SPI_FLAG_TBE) == RESET)
//    ;
//  spi_i2s_data_transmit(SPI1, data);
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000208 	.word	0x20000208

08000bf4 <_epd_write_data_over>:

void _epd_write_data_over()
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
//  while (spi_i2s_flag_get(SPI1, SPI_FLAG_TRANS) != RESET)
//    ;
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8000bf8:	bf00      	nop
 8000bfa:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <_epd_write_data_over+0x18>)
 8000bfc:	f002 f890 	bl	8002d20 <HAL_SPI_GetState>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d1f9      	bne.n	8000bfa <_epd_write_data_over+0x6>
	  ;
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000208 	.word	0x20000208

08000c10 <epd_wait_busy>:

uint8_t epd_wait_busy()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  uint32_t timeout = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  while (epd_is_busy())
 8000c1a:	e00c      	b.n	8000c36 <epd_wait_busy+0x26>
  {
    timeout++;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
    if (timeout > 40000)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d901      	bls.n	8000c30 <epd_wait_busy+0x20>
    {
      return 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e008      	b.n	8000c42 <epd_wait_busy+0x32>
    }
    epd_delay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff ff29 	bl	8000a88 <epd_delay>
  while (epd_is_busy())
 8000c36:	f7ff ff7d 	bl	8000b34 <epd_is_busy>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1ed      	bne.n	8000c1c <epd_wait_busy+0xc>
  }
  return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <epd_reset>:

void epd_reset(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  epd_res_reset();
 8000c50:	f7ff ff34 	bl	8000abc <epd_res_reset>
  epd_delay(50);
 8000c54:	2032      	movs	r0, #50	@ 0x32
 8000c56:	f7ff ff17 	bl	8000a88 <epd_delay>
  epd_res_set();
 8000c5a:	f7ff ff23 	bl	8000aa4 <epd_res_set>
  epd_delay(50);
 8000c5e:	2032      	movs	r0, #50	@ 0x32
 8000c60:	f7ff ff12 	bl	8000a88 <epd_delay>
  _hibernating = 0;
 8000c64:	4b02      	ldr	r3, [pc, #8]	@ (8000c70 <epd_reset+0x24>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000

08000c74 <epd_init>:

uint8_t epd_init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  if (_hibernating)
 8000c78:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <epd_init+0xc0>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <epd_init+0x10>
    epd_reset();
 8000c80:	f7ff ffe4 	bl	8000c4c <epd_reset>

  if (epd_wait_busy())
 8000c84:	f7ff ffc4 	bl	8000c10 <epd_wait_busy>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <epd_init+0x1e>
    return 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e04e      	b.n	8000d30 <epd_init+0xbc>

  epd_write_reg(0x12); // SWRESET
 8000c92:	2012      	movs	r0, #18
 8000c94:	f7ff ff5a 	bl	8000b4c <epd_write_reg>

	epd_delay(10);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f7ff fef5 	bl	8000a88 <epd_delay>

  if (epd_wait_busy())
 8000c9e:	f7ff ffb7 	bl	8000c10 <epd_wait_busy>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <epd_init+0x38>
    return 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e041      	b.n	8000d30 <epd_init+0xbc>

	#if defined(EPD_29) || defined(EPD_213) || defined(EPD_154) 
  epd_write_reg(0x01); // Driver output control
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff ff4d 	bl	8000b4c <epd_write_reg>
#if defined(EPD_29) || defined(EPD_213)
  epd_write_data(0x27);
  epd_write_data(0x01);
  epd_write_data(0x01);
#else
  epd_write_data(0xC7);
 8000cb2:	20c7      	movs	r0, #199	@ 0xc7
 8000cb4:	f7ff ff6a 	bl	8000b8c <epd_write_data>
  epd_write_data(0x00);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff67 	bl	8000b8c <epd_write_data>
  epd_write_data(0x01);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff ff64 	bl	8000b8c <epd_write_data>
	#endif

  epd_write_reg(0x11); // data entry mode
 8000cc4:	2011      	movs	r0, #17
 8000cc6:	f7ff ff41 	bl	8000b4c <epd_write_reg>
  epd_write_data(0x01);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff ff5e 	bl	8000b8c <epd_write_data>

#ifdef EPD_154
	epd_write_reg(0x44); // set Ram-X address start/end position
 8000cd0:	2044      	movs	r0, #68	@ 0x44
 8000cd2:	f7ff ff3b 	bl	8000b4c <epd_write_reg>
  epd_write_data(0x00);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff58 	bl	8000b8c <epd_write_data>
  epd_write_data(0x18);
 8000cdc:	2018      	movs	r0, #24
 8000cde:	f7ff ff55 	bl	8000b8c <epd_write_data>

  epd_write_reg(0x45);  // set Ram-Y address start/end position
 8000ce2:	2045      	movs	r0, #69	@ 0x45
 8000ce4:	f7ff ff32 	bl	8000b4c <epd_write_reg>
  epd_write_data(0xC7);
 8000ce8:	20c7      	movs	r0, #199	@ 0xc7
 8000cea:	f7ff ff4f 	bl	8000b8c <epd_write_data>
  epd_write_data(0x00);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ff4c 	bl	8000b8c <epd_write_data>
  epd_write_data(0x00);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff ff49 	bl	8000b8c <epd_write_data>
  epd_write_data(0x00);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ff46 	bl	8000b8c <epd_write_data>
  epd_write_data(0x01);
  epd_write_data(0x00);
  epd_write_data(0x00);
#endif

  epd_write_reg(0x3C); // BorderWavefrom
 8000d00:	203c      	movs	r0, #60	@ 0x3c
 8000d02:	f7ff ff23 	bl	8000b4c <epd_write_reg>
  epd_write_data(0x05);
 8000d06:	2005      	movs	r0, #5
 8000d08:	f7ff ff40 	bl	8000b8c <epd_write_data>
		epd_write_reg(0x11);	// data  entry  mode
		epd_write_data(0x03);		// X-mode
		epd_address_set(0,0,EPD_W-1,EPD_H-1);
#endif

  epd_write_reg(0x18); // Read built-in temperature sensor
 8000d0c:	2018      	movs	r0, #24
 8000d0e:	f7ff ff1d 	bl	8000b4c <epd_write_reg>
  epd_write_data(0x80);
 8000d12:	2080      	movs	r0, #128	@ 0x80
 8000d14:	f7ff ff3a 	bl	8000b8c <epd_write_data>

  epd_setpos(0,0);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f86e 	bl	8000dfc <epd_setpos>

  if (epd_power_on())
 8000d20:	f000 f82e 	bl	8000d80 <epd_power_on>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <epd_init+0xba>
    return 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <epd_init+0xbc>

  return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000

08000d38 <epd_init_partial>:

uint8_t epd_init_partial(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  if (epd_init())
 8000d3c:	f7ff ff9a 	bl	8000c74 <epd_init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <epd_init_partial+0x12>
    return 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <epd_init_partial+0x14>
	epd_write_reg(0x21); // Display Update Controll
  epd_write_data(0x00);    // RED normal
  epd_write_data(0x00);    // single chip application
#endif

  return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <epd_enter_deepsleepmode>:

void epd_enter_deepsleepmode(uint8_t mode)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
epd_power_off();
 8000d5a:	f000 f821 	bl	8000da0 <epd_power_off>
  epd_write_reg(0x10);
 8000d5e:	2010      	movs	r0, #16
 8000d60:	f7ff fef4 	bl	8000b4c <epd_write_reg>
  epd_write_data(mode);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff10 	bl	8000b8c <epd_write_data>
  _hibernating = 1;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <epd_enter_deepsleepmode+0x2c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000000 	.word	0x20000000

08000d80 <epd_power_on>:

uint8_t epd_power_on(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	#if defined EPD_42
	epd_write_reg(0x22); // Display Update Control
	epd_write_data(0xe0);
	#else
	epd_write_reg(0x22); // Display Update Control
 8000d84:	2022      	movs	r0, #34	@ 0x22
 8000d86:	f7ff fee1 	bl	8000b4c <epd_write_reg>
	epd_write_data(0xf8);
 8000d8a:	20f8      	movs	r0, #248	@ 0xf8
 8000d8c:	f7ff fefe 	bl	8000b8c <epd_write_data>
	#endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 8000d90:	2020      	movs	r0, #32
 8000d92:	f7ff fedb 	bl	8000b4c <epd_write_reg>

  return epd_wait_busy();
 8000d96:	f7ff ff3b 	bl	8000c10 <epd_wait_busy>
 8000d9a:	4603      	mov	r3, r0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <epd_power_off>:

uint8_t epd_power_off(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	epd_write_reg(0x22); // Display Update Control
 8000da4:	2022      	movs	r0, #34	@ 0x22
 8000da6:	f7ff fed1 	bl	8000b4c <epd_write_reg>
	epd_write_data(0x83);
 8000daa:	2083      	movs	r0, #131	@ 0x83
 8000dac:	f7ff feee 	bl	8000b8c <epd_write_data>
  epd_write_reg(0x20); // Activate Display Update Sequence
 8000db0:	2020      	movs	r0, #32
 8000db2:	f7ff fecb 	bl	8000b4c <epd_write_reg>

  return epd_wait_busy();
 8000db6:	f7ff ff2b 	bl	8000c10 <epd_wait_busy>
 8000dba:	4603      	mov	r3, r0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <epd_update>:
  epd_write_data(0x7F);
//  epd_write_data(0xF0);
}

void epd_update(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  
	#ifdef EPD_154
  epd_write_reg(0x22); // Display Update Control
 8000dc4:	2022      	movs	r0, #34	@ 0x22
 8000dc6:	f7ff fec1 	bl	8000b4c <epd_write_reg>
	epd_write_data(0xF4);
 8000dca:	20f4      	movs	r0, #244	@ 0xf4
 8000dcc:	f7ff fede 	bl	8000b8c <epd_write_data>
  epd_write_data(0xF7);
	#else
	epd_write_reg(0x22); // Display Update Control
  epd_write_data(0xF7);
#endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 8000dd0:	2020      	movs	r0, #32
 8000dd2:	f7ff febb 	bl	8000b4c <epd_write_reg>

  epd_wait_busy();
 8000dd6:	f7ff ff1b 	bl	8000c10 <epd_wait_busy>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <epd_update_partial>:

void epd_update_partial(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  #ifdef EPD_154
  epd_write_reg(0x22); // Display Update Control
 8000de2:	2022      	movs	r0, #34	@ 0x22
 8000de4:	f7ff feb2 	bl	8000b4c <epd_write_reg>
	epd_write_data(0xFC);
 8000de8:	20fc      	movs	r0, #252	@ 0xfc
 8000dea:	f7ff fecf 	bl	8000b8c <epd_write_data>
	epd_write_data(0xFF);
	#else
	epd_write_reg(0x22); // Display Update Control
  epd_write_data(0xCC);
#endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 8000dee:	2020      	movs	r0, #32
 8000df0:	f7ff feac 	bl	8000b4c <epd_write_reg>

  epd_wait_busy();
 8000df4:	f7ff ff0c 	bl	8000c10 <epd_wait_busy>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <epd_setpos>:
	epd_write_data(y_end & 0xFF);
	epd_write_data((y_end >> 8) & 0xFF);
}

void epd_setpos(uint16_t x, uint16_t y)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	80fb      	strh	r3, [r7, #6]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	80bb      	strh	r3, [r7, #4]
  uint8_t _x;
  uint16_t _y;

  _x = x / 8;
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	73fb      	strb	r3, [r7, #15]

#ifdef EPD_154
	_y = 199 - y;
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	f1c3 03c7 	rsb	r3, r3, #199	@ 0xc7
 8000e1a:	81bb      	strh	r3, [r7, #12]
    _y = 295 - y;
	#elif defined(EPD_42)
	_y = y;
#endif

  epd_write_reg(0x4E); // set RAM x address count to 0;
 8000e1c:	204e      	movs	r0, #78	@ 0x4e
 8000e1e:	f7ff fe95 	bl	8000b4c <epd_write_reg>
  epd_write_data(_x);
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff feb1 	bl	8000b8c <epd_write_data>
  epd_write_reg(0x4F); // set RAM y address count to 0x127;
 8000e2a:	204f      	movs	r0, #79	@ 0x4f
 8000e2c:	f7ff fe8e 	bl	8000b4c <epd_write_reg>
  epd_write_data(_y & 0xff);
 8000e30:	89bb      	ldrh	r3, [r7, #12]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fea9 	bl	8000b8c <epd_write_data>
  epd_write_data(_y >> 8 & 0x01);
 8000e3a:	89bb      	ldrh	r3, [r7, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe9f 	bl	8000b8c <epd_write_data>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <epd_writedata>:

void epd_writedata(uint8_t *Image1, uint32_t length)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  epd_cs_reset();
 8000e60:	f7ff fe5c 	bl	8000b1c <epd_cs_reset>
  for (uint32_t j = 0; j < length; j++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e009      	b.n	8000e7e <epd_writedata+0x28>
  {
    _epd_write_data(Image1[j]);
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fea6 	bl	8000bc4 <_epd_write_data>
  for (uint32_t j = 0; j < length; j++)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d3f1      	bcc.n	8000e6a <epd_writedata+0x14>
  }
  _epd_write_data_over();
 8000e86:	f7ff feb5 	bl	8000bf4 <_epd_write_data_over>
  epd_cs_set();
 8000e8a:	f7ff fe3b 	bl	8000b04 <epd_cs_set>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <epd_displayBW>:

  epd_update();
}

void epd_displayBW(uint8_t *Image)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  uint32_t Width, Height;
  
  Width = EPD_H;
 8000e9e:	23c8      	movs	r3, #200	@ 0xc8
 8000ea0:	60fb      	str	r3, [r7, #12]
  Height = EPD_W_BUFF_SIZE;
 8000ea2:	2319      	movs	r3, #25
 8000ea4:	60bb      	str	r3, [r7, #8]

  epd_setpos(0, 0);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ffa7 	bl	8000dfc <epd_setpos>
  epd_write_reg(0x26);
 8000eae:	2026      	movs	r0, #38	@ 0x26
 8000eb0:	f7ff fe4c 	bl	8000b4c <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffc9 	bl	8000e56 <epd_writedata>

  epd_setpos(0, 0);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ff98 	bl	8000dfc <epd_setpos>
  epd_write_reg(0x24);
 8000ecc:	2024      	movs	r0, #36	@ 0x24
 8000ece:	f7ff fe3d 	bl	8000b4c <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	4619      	mov	r1, r3
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ffba 	bl	8000e56 <epd_writedata>

  epd_update();
 8000ee2:	f7ff ff6d 	bl	8000dc0 <epd_update>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <epd_displayBW_partial>:

void epd_displayBW_partial(uint8_t *Image)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  uint32_t Width, Height;

  Width = EPD_H;
 8000ef6:	23c8      	movs	r3, #200	@ 0xc8
 8000ef8:	60fb      	str	r3, [r7, #12]
  Height = EPD_W_BUFF_SIZE;
 8000efa:	2319      	movs	r3, #25
 8000efc:	60bb      	str	r3, [r7, #8]

  epd_setpos(0, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff ff7b 	bl	8000dfc <epd_setpos>
  epd_write_reg(0x24);
 8000f06:	2024      	movs	r0, #36	@ 0x24
 8000f08:	f7ff fe20 	bl	8000b4c <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff9d 	bl	8000e56 <epd_writedata>

  epd_update_partial();
 8000f1c:	f7ff ff5f 	bl	8000dde <epd_update_partial>

  epd_setpos(0, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ff6a 	bl	8000dfc <epd_setpos>
  epd_write_reg(0x26);
 8000f28:	2026      	movs	r0, #38	@ 0x26
 8000f2a:	f7ff fe0f 	bl	8000b4c <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff8c 	bl	8000e56 <epd_writedata>
    }
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <epd_paint_newimage>:
	#endif
  epd_update();
}

void epd_paint_newimage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4603      	mov	r3, r0
 8000f58:	817b      	strh	r3, [r7, #10]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	813b      	strh	r3, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	80fb      	strh	r3, [r7, #6]
  EPD_Paint.Image = 0x00;
 8000f62:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
  EPD_Paint.Image = image;
 8000f68:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6013      	str	r3, [r2, #0]

  EPD_Paint.WidthMemory = Width;
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000f70:	897b      	ldrh	r3, [r7, #10]
 8000f72:	8113      	strh	r3, [r2, #8]
  EPD_Paint.HeightMemory = Height;
 8000f74:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000f76:	893b      	ldrh	r3, [r7, #8]
 8000f78:	8153      	strh	r3, [r2, #10]
  EPD_Paint.Color = Color;
 8000f7a:	4a19      	ldr	r2, [pc, #100]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000f7c:	8b3b      	ldrh	r3, [r7, #24]
 8000f7e:	8193      	strh	r3, [r2, #12]
  EPD_Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8000f80:	897b      	ldrh	r3, [r7, #10]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d103      	bne.n	8000f94 <epd_paint_newimage+0x4c>
 8000f8c:	897b      	ldrh	r3, [r7, #10]
 8000f8e:	08db      	lsrs	r3, r3, #3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	e004      	b.n	8000f9e <epd_paint_newimage+0x56>
 8000f94:	897b      	ldrh	r3, [r7, #10]
 8000f96:	08db      	lsrs	r3, r3, #3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000fa0:	8213      	strh	r3, [r2, #16]
  EPD_Paint.HeightByte = Height;
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000fa4:	893b      	ldrh	r3, [r7, #8]
 8000fa6:	8253      	strh	r3, [r2, #18]
  EPD_Paint.Rotate = Rotate;
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	81d3      	strh	r3, [r2, #14]
  if (Rotate == EPD_ROTATE_0 || Rotate == EPD_ROTATE_180)
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <epd_paint_newimage+0x72>
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	2bb4      	cmp	r3, #180	@ 0xb4
 8000fb8:	d106      	bne.n	8000fc8 <epd_paint_newimage+0x80>
  {

    EPD_Paint.Width = Height;
 8000fba:	4a09      	ldr	r2, [pc, #36]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000fbc:	893b      	ldrh	r3, [r7, #8]
 8000fbe:	8093      	strh	r3, [r2, #4]
    EPD_Paint.Height = Width;
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000fc2:	897b      	ldrh	r3, [r7, #10]
 8000fc4:	80d3      	strh	r3, [r2, #6]
 8000fc6:	e006      	b.n	8000fd6 <epd_paint_newimage+0x8e>
  }
  else
  {
    EPD_Paint.Width = Width;
 8000fc8:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000fca:	897b      	ldrh	r3, [r7, #10]
 8000fcc:	8093      	strh	r3, [r2, #4]
    EPD_Paint.Height = Height;
 8000fce:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <epd_paint_newimage+0x98>)
 8000fd0:	893b      	ldrh	r3, [r7, #8]
 8000fd2:	80d3      	strh	r3, [r2, #6]
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	200001f4 	.word	0x200001f4

08000fe4 <epd_paint_setpixel>:

void epd_paint_setpixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	80bb      	strh	r3, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	807b      	strh	r3, [r7, #2]
  uint16_t X, Y;
  uint32_t Addr;
  uint8_t Rdata;
  switch (EPD_Paint.Rotate)
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80010e8 <epd_paint_setpixel+0x104>)
 8000ff8:	89db      	ldrh	r3, [r3, #14]
 8000ffa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000ffe:	d02e      	beq.n	800105e <epd_paint_setpixel+0x7a>
 8001000:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001004:	dc6a      	bgt.n	80010dc <epd_paint_setpixel+0xf8>
 8001006:	2bb4      	cmp	r3, #180	@ 0xb4
 8001008:	d01f      	beq.n	800104a <epd_paint_setpixel+0x66>
 800100a:	2bb4      	cmp	r3, #180	@ 0xb4
 800100c:	dc66      	bgt.n	80010dc <epd_paint_setpixel+0xf8>
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <epd_paint_setpixel+0x34>
 8001012:	2b5a      	cmp	r3, #90	@ 0x5a
 8001014:	d00a      	beq.n	800102c <epd_paint_setpixel+0x48>
  case 270:
    X = Xpoint;
    Y = Ypoint;
    break;
  default:
    return;
 8001016:	e061      	b.n	80010dc <epd_paint_setpixel+0xf8>
    X = EPD_Paint.WidthMemory - Ypoint - 1;
 8001018:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <epd_paint_setpixel+0x104>)
 800101a:	891a      	ldrh	r2, [r3, #8]
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	b29b      	uxth	r3, r3
 8001022:	3b01      	subs	r3, #1
 8001024:	82fb      	strh	r3, [r7, #22]
    Y = Xpoint;
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	82bb      	strh	r3, [r7, #20]
    break;
 800102a:	e01d      	b.n	8001068 <epd_paint_setpixel+0x84>
    X = EPD_Paint.WidthMemory - Xpoint - 1;
 800102c:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <epd_paint_setpixel+0x104>)
 800102e:	891a      	ldrh	r2, [r3, #8]
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	b29b      	uxth	r3, r3
 8001036:	3b01      	subs	r3, #1
 8001038:	82fb      	strh	r3, [r7, #22]
    Y = EPD_Paint.HeightMemory - Ypoint - 1;
 800103a:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <epd_paint_setpixel+0x104>)
 800103c:	895a      	ldrh	r2, [r3, #10]
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	3b01      	subs	r3, #1
 8001046:	82bb      	strh	r3, [r7, #20]
    break;
 8001048:	e00e      	b.n	8001068 <epd_paint_setpixel+0x84>
    X = Ypoint;
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	82fb      	strh	r3, [r7, #22]
    Y = EPD_Paint.HeightMemory - Xpoint - 1;
 800104e:	4b26      	ldr	r3, [pc, #152]	@ (80010e8 <epd_paint_setpixel+0x104>)
 8001050:	895a      	ldrh	r2, [r3, #10]
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	3b01      	subs	r3, #1
 800105a:	82bb      	strh	r3, [r7, #20]
    break;
 800105c:	e004      	b.n	8001068 <epd_paint_setpixel+0x84>
    X = Xpoint;
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	82fb      	strh	r3, [r7, #22]
    Y = Ypoint;
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	82bb      	strh	r3, [r7, #20]
    break;
 8001066:	bf00      	nop
  }
  Addr = X / 8 + Y * EPD_Paint.WidthByte;
 8001068:	8afb      	ldrh	r3, [r7, #22]
 800106a:	08db      	lsrs	r3, r3, #3
 800106c:	b29b      	uxth	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	8abb      	ldrh	r3, [r7, #20]
 8001072:	4a1d      	ldr	r2, [pc, #116]	@ (80010e8 <epd_paint_setpixel+0x104>)
 8001074:	8a12      	ldrh	r2, [r2, #16]
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	440b      	add	r3, r1
 800107c:	613b      	str	r3, [r7, #16]
  Rdata = EPD_Paint.Image[Addr];
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <epd_paint_setpixel+0x104>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	73fb      	strb	r3, [r7, #15]
  if (Color == EPD_COLOR_BLACK)
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d113      	bne.n	80010b8 <epd_paint_setpixel+0xd4>
  {
    EPD_Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	fa42 f303 	asr.w	r3, r2, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4013      	ands	r3, r2
 80010a8:	b259      	sxtb	r1, r3
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <epd_paint_setpixel+0x104>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4413      	add	r3, r2
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e012      	b.n	80010de <epd_paint_setpixel+0xfa>
  }
  else
    EPD_Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80010b8:	8afb      	ldrh	r3, [r7, #22]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	2280      	movs	r2, #128	@ 0x80
 80010c0:	fa42 f303 	asr.w	r3, r2, r3
 80010c4:	b25a      	sxtb	r2, r3
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b259      	sxtb	r1, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <epd_paint_setpixel+0x104>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4413      	add	r3, r2
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e000      	b.n	80010de <epd_paint_setpixel+0xfa>
    return;
 80010dc:	bf00      	nop
}
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200001f4 	.word	0x200001f4

080010ec <epd_paint_clear>:

void epd_paint_clear(uint16_t color)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  uint16_t X, Y;
  uint32_t Addr;

  for (Y = 0; Y < EPD_Paint.HeightByte; Y++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	81bb      	strh	r3, [r7, #12]
 80010fa:	e01c      	b.n	8001136 <epd_paint_clear+0x4a>
  {
    for (X = 0; X < EPD_Paint.WidthByte; X++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	81fb      	strh	r3, [r7, #14]
 8001100:	e011      	b.n	8001126 <epd_paint_clear+0x3a>
    { // 8 pixel =  1 byte
      Addr = X + Y * EPD_Paint.WidthByte;
 8001102:	89fa      	ldrh	r2, [r7, #14]
 8001104:	89bb      	ldrh	r3, [r7, #12]
 8001106:	4911      	ldr	r1, [pc, #68]	@ (800114c <epd_paint_clear+0x60>)
 8001108:	8a09      	ldrh	r1, [r1, #16]
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4413      	add	r3, r2
 8001110:	60bb      	str	r3, [r7, #8]
      EPD_Paint.Image[Addr] = color;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <epd_paint_clear+0x60>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4413      	add	r3, r2
 800111a:	88fa      	ldrh	r2, [r7, #6]
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	701a      	strb	r2, [r3, #0]
    for (X = 0; X < EPD_Paint.WidthByte; X++)
 8001120:	89fb      	ldrh	r3, [r7, #14]
 8001122:	3301      	adds	r3, #1
 8001124:	81fb      	strh	r3, [r7, #14]
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <epd_paint_clear+0x60>)
 8001128:	8a1b      	ldrh	r3, [r3, #16]
 800112a:	89fa      	ldrh	r2, [r7, #14]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3e8      	bcc.n	8001102 <epd_paint_clear+0x16>
  for (Y = 0; Y < EPD_Paint.HeightByte; Y++)
 8001130:	89bb      	ldrh	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	81bb      	strh	r3, [r7, #12]
 8001136:	4b05      	ldr	r3, [pc, #20]	@ (800114c <epd_paint_clear+0x60>)
 8001138:	8a5b      	ldrh	r3, [r3, #18]
 800113a:	89ba      	ldrh	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3dd      	bcc.n	80010fc <epd_paint_clear+0x10>
    }
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	200001f4 	.word	0x200001f4

08001150 <epd_paint_selectimage>:

void epd_paint_selectimage(uint8_t *image)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  EPD_Paint.Image = image;
 8001158:	4a03      	ldr	r2, [pc, #12]	@ (8001168 <epd_paint_selectimage+0x18>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	200001f4 	.word	0x200001f4

0800116c <epd_paint_drawPoint>:

void epd_paint_drawPoint(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
 8001176:	460b      	mov	r3, r1
 8001178:	80bb      	strh	r3, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	807b      	strh	r3, [r7, #2]
  epd_paint_setpixel(Xpoint - 1, Ypoint - 1, Color);
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	3b01      	subs	r3, #1
 8001182:	b298      	uxth	r0, r3
 8001184:	88bb      	ldrh	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	b29b      	uxth	r3, r3
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff ff29 	bl	8000fe4 <epd_paint_setpixel>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <epd_paint_showChar>:
    }
  }
}

void epd_paint_showChar(uint16_t x, uint16_t y, uint16_t chr, uint16_t size1, uint16_t color)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4604      	mov	r4, r0
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4623      	mov	r3, r4
 80011ac:	80fb      	strh	r3, [r7, #6]
 80011ae:	4603      	mov	r3, r0
 80011b0:	80bb      	strh	r3, [r7, #4]
 80011b2:	460b      	mov	r3, r1
 80011b4:	807b      	strh	r3, [r7, #2]
 80011b6:	4613      	mov	r3, r2
 80011b8:	803b      	strh	r3, [r7, #0]
  uint16_t i, m, temp, size2, chr1;
  uint16_t x0, y0;
  x += 1, y += 1, x0 = x, y0 = y;
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	3301      	adds	r3, #1
 80011be:	80fb      	strh	r3, [r7, #6]
 80011c0:	88bb      	ldrh	r3, [r7, #4]
 80011c2:	3301      	adds	r3, #1
 80011c4:	80bb      	strh	r3, [r7, #4]
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	81bb      	strh	r3, [r7, #12]
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	81fb      	strh	r3, [r7, #14]
  if (x - size1 > EPD_H)
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	883b      	ldrh	r3, [r7, #0]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80011d6:	f300 809d 	bgt.w	8001314 <epd_paint_showChar+0x178>
    return;
  if (size1 == 8)
 80011da:	883b      	ldrh	r3, [r7, #0]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d102      	bne.n	80011e6 <epd_paint_showChar+0x4a>
    size2 = 6;
 80011e0:	2306      	movs	r3, #6
 80011e2:	823b      	strh	r3, [r7, #16]
 80011e4:	e014      	b.n	8001210 <epd_paint_showChar+0x74>
  else
    size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2);
 80011e6:	883b      	ldrh	r3, [r7, #0]
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	883b      	ldrh	r3, [r7, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bf14      	ite	ne
 80011fa:	2301      	movne	r3, #1
 80011fc:	2300      	moveq	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4413      	add	r3, r2
 8001202:	b29b      	uxth	r3, r3
 8001204:	883a      	ldrh	r2, [r7, #0]
 8001206:	0852      	lsrs	r2, r2, #1
 8001208:	b292      	uxth	r2, r2
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	823b      	strh	r3, [r7, #16]
  chr1 = chr - ' ';
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	3b20      	subs	r3, #32
 8001214:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < size2; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	82fb      	strh	r3, [r7, #22]
 800121a:	e076      	b.n	800130a <epd_paint_showChar+0x16e>
  {
    if (size1 == 8)
 800121c:	883b      	ldrh	r3, [r7, #0]
 800121e:	2b08      	cmp	r3, #8
 8001220:	d10b      	bne.n	800123a <epd_paint_showChar+0x9e>
    {
      temp = asc2_0806[chr1][i];
 8001222:	897a      	ldrh	r2, [r7, #10]
 8001224:	8af9      	ldrh	r1, [r7, #22]
 8001226:	483e      	ldr	r0, [pc, #248]	@ (8001320 <epd_paint_showChar+0x184>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4403      	add	r3, r0
 8001232:	440b      	add	r3, r1
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	827b      	strh	r3, [r7, #18]
 8001238:	e028      	b.n	800128c <epd_paint_showChar+0xf0>
    } // 0806
    else if (size1 == 12)
 800123a:	883b      	ldrh	r3, [r7, #0]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d10b      	bne.n	8001258 <epd_paint_showChar+0xbc>
    {
      temp = asc2_1206[chr1][i];
 8001240:	897a      	ldrh	r2, [r7, #10]
 8001242:	8af9      	ldrh	r1, [r7, #22]
 8001244:	4837      	ldr	r0, [pc, #220]	@ (8001324 <epd_paint_showChar+0x188>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4403      	add	r3, r0
 8001250:	440b      	add	r3, r1
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	827b      	strh	r3, [r7, #18]
 8001256:	e019      	b.n	800128c <epd_paint_showChar+0xf0>
    } // 1206
    else if (size1 == 16)
 8001258:	883b      	ldrh	r3, [r7, #0]
 800125a:	2b10      	cmp	r3, #16
 800125c:	d108      	bne.n	8001270 <epd_paint_showChar+0xd4>
    {
      temp = asc2_1608[chr1][i];
 800125e:	897a      	ldrh	r2, [r7, #10]
 8001260:	8afb      	ldrh	r3, [r7, #22]
 8001262:	4931      	ldr	r1, [pc, #196]	@ (8001328 <epd_paint_showChar+0x18c>)
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	440a      	add	r2, r1
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	827b      	strh	r3, [r7, #18]
 800126e:	e00d      	b.n	800128c <epd_paint_showChar+0xf0>
    } // 1608
    else if (size1 == 24)
 8001270:	883b      	ldrh	r3, [r7, #0]
 8001272:	2b18      	cmp	r3, #24
 8001274:	d150      	bne.n	8001318 <epd_paint_showChar+0x17c>
    {
      temp = asc2_2412[chr1][i];
 8001276:	897a      	ldrh	r2, [r7, #10]
 8001278:	8af9      	ldrh	r1, [r7, #22]
 800127a:	482c      	ldr	r0, [pc, #176]	@ (800132c <epd_paint_showChar+0x190>)
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4403      	add	r3, r0
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	827b      	strh	r3, [r7, #18]
    } // 2412
    else
      return;
    for (m = 0; m < 8; m++)
 800128c:	2300      	movs	r3, #0
 800128e:	82bb      	strh	r3, [r7, #20]
 8001290:	e020      	b.n	80012d4 <epd_paint_showChar+0x138>
    {
      if (temp & 0x01)
 8001292:	8a7b      	ldrh	r3, [r7, #18]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <epd_paint_showChar+0x10e>
        epd_paint_drawPoint(x, y, color);
 800129c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800129e:	88b9      	ldrh	r1, [r7, #4]
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff62 	bl	800116c <epd_paint_drawPoint>
 80012a8:	e00b      	b.n	80012c2 <epd_paint_showChar+0x126>
      else
        epd_paint_drawPoint(x, y, !color);
 80012aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf0c      	ite	eq
 80012b0:	2301      	moveq	r3, #1
 80012b2:	2300      	movne	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	88b9      	ldrh	r1, [r7, #4]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff55 	bl	800116c <epd_paint_drawPoint>
      temp >>= 1;
 80012c2:	8a7b      	ldrh	r3, [r7, #18]
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	827b      	strh	r3, [r7, #18]
      y++;
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	3301      	adds	r3, #1
 80012cc:	80bb      	strh	r3, [r7, #4]
    for (m = 0; m < 8; m++)
 80012ce:	8abb      	ldrh	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	82bb      	strh	r3, [r7, #20]
 80012d4:	8abb      	ldrh	r3, [r7, #20]
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	d9db      	bls.n	8001292 <epd_paint_showChar+0xf6>
    }
    x++;
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	3301      	adds	r3, #1
 80012de:	80fb      	strh	r3, [r7, #6]
    if ((size1 != 8) && ((x - x0) == size1 / 2))
 80012e0:	883b      	ldrh	r3, [r7, #0]
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d00c      	beq.n	8001300 <epd_paint_showChar+0x164>
 80012e6:	88fa      	ldrh	r2, [r7, #6]
 80012e8:	89bb      	ldrh	r3, [r7, #12]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	883a      	ldrh	r2, [r7, #0]
 80012ee:	0852      	lsrs	r2, r2, #1
 80012f0:	b292      	uxth	r2, r2
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d104      	bne.n	8001300 <epd_paint_showChar+0x164>
    {
      x = x0;
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	80fb      	strh	r3, [r7, #6]
      y0 = y0 + 8;
 80012fa:	89fb      	ldrh	r3, [r7, #14]
 80012fc:	3308      	adds	r3, #8
 80012fe:	81fb      	strh	r3, [r7, #14]
    }
    y = y0;
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < size2; i++)
 8001304:	8afb      	ldrh	r3, [r7, #22]
 8001306:	3301      	adds	r3, #1
 8001308:	82fb      	strh	r3, [r7, #22]
 800130a:	8afa      	ldrh	r2, [r7, #22]
 800130c:	8a3b      	ldrh	r3, [r7, #16]
 800130e:	429a      	cmp	r2, r3
 8001310:	d384      	bcc.n	800121c <epd_paint_showChar+0x80>
 8001312:	e002      	b.n	800131a <epd_paint_showChar+0x17e>
    return;
 8001314:	bf00      	nop
 8001316:	e000      	b.n	800131a <epd_paint_showChar+0x17e>
      return;
 8001318:	bf00      	nop
  }
}
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	08005d3c 	.word	0x08005d3c
 8001324:	08005f64 	.word	0x08005f64
 8001328:	080063d8 	.word	0x080063d8
 800132c:	080069c8 	.word	0x080069c8

08001330 <epd_paint_showString>:

void epd_paint_showString(uint16_t x, uint16_t y, uint8_t *chr, uint16_t size1, uint16_t color)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b087      	sub	sp, #28
 8001334:	af02      	add	r7, sp, #8
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	461a      	mov	r2, r3
 800133a:	4603      	mov	r3, r0
 800133c:	81fb      	strh	r3, [r7, #14]
 800133e:	460b      	mov	r3, r1
 8001340:	81bb      	strh	r3, [r7, #12]
 8001342:	4613      	mov	r3, r2
 8001344:	80fb      	strh	r3, [r7, #6]
  while (*chr != '\0')
 8001346:	e026      	b.n	8001396 <epd_paint_showString+0x66>
  {
    epd_paint_showChar(x, y, *chr, size1, color);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461c      	mov	r4, r3
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	89b9      	ldrh	r1, [r7, #12]
 8001352:	89f8      	ldrh	r0, [r7, #14]
 8001354:	8c3b      	ldrh	r3, [r7, #32]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	4622      	mov	r2, r4
 800135c:	f7ff ff1e 	bl	800119c <epd_paint_showChar>
    chr++;
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3301      	adds	r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
    if (size1 == 8)
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	2b08      	cmp	r3, #8
 800136a:	d106      	bne.n	800137a <epd_paint_showString+0x4a>
    {
      x += 6;
 800136c:	89fb      	ldrh	r3, [r7, #14]
 800136e:	3306      	adds	r3, #6
 8001370:	81fb      	strh	r3, [r7, #14]
      if(x > EPD_H-6)
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	2bc2      	cmp	r3, #194	@ 0xc2
 8001376:	d90e      	bls.n	8001396 <epd_paint_showString+0x66>
				break;
 8001378:	e013      	b.n	80013a2 <epd_paint_showString+0x72>
    }
    else
    {
      x += size1 / 2;
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	b29a      	uxth	r2, r3
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	4413      	add	r3, r2
 8001384:	81fb      	strh	r3, [r7, #14]
      if(x > EPD_H-size1 / 2)
 8001386:	89fa      	ldrh	r2, [r7, #14]
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	b29b      	uxth	r3, r3
 800138e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001392:	429a      	cmp	r2, r3
 8001394:	dc04      	bgt.n	80013a0 <epd_paint_showString+0x70>
  while (*chr != '\0')
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1d4      	bne.n	8001348 <epd_paint_showString+0x18>
				break;
    }
  }
}
 800139e:	e000      	b.n	80013a2 <epd_paint_showString+0x72>
				break;
 80013a0:	bf00      	nop
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}

080013aa <epd_paint_showPicture>:
    y = y0;
  }
}

void epd_paint_showPicture(uint16_t x, uint16_t y, uint16_t sizex, uint16_t sizey, const uint8_t BMP[], uint16_t Color)
{
 80013aa:	b590      	push	{r4, r7, lr}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4604      	mov	r4, r0
 80013b2:	4608      	mov	r0, r1
 80013b4:	4611      	mov	r1, r2
 80013b6:	461a      	mov	r2, r3
 80013b8:	4623      	mov	r3, r4
 80013ba:	80fb      	strh	r3, [r7, #6]
 80013bc:	4603      	mov	r3, r0
 80013be:	80bb      	strh	r3, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	803b      	strh	r3, [r7, #0]
  uint16_t j = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	82fb      	strh	r3, [r7, #22]
  uint16_t i, n = 0, temp = 0, m = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	827b      	strh	r3, [r7, #18]
 80013d0:	2300      	movs	r3, #0
 80013d2:	823b      	strh	r3, [r7, #16]
 80013d4:	2300      	movs	r3, #0
 80013d6:	81fb      	strh	r3, [r7, #14]
  uint16_t x0 = 0, y0 = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	817b      	strh	r3, [r7, #10]
 80013dc:	2300      	movs	r3, #0
 80013de:	81bb      	strh	r3, [r7, #12]
  x += 1, y += 1, x0 = x, y0 = y;
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	3301      	adds	r3, #1
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	80bb      	strh	r3, [r7, #4]
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	817b      	strh	r3, [r7, #10]
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	81bb      	strh	r3, [r7, #12]
  sizey = sizey / 8 + ((sizey % 8) ? 1 : 0);
 80013f4:	883b      	ldrh	r3, [r7, #0]
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	883a      	ldrh	r2, [r7, #0]
 80013fc:	f002 0207 	and.w	r2, r2, #7
 8001400:	b292      	uxth	r2, r2
 8001402:	2a00      	cmp	r2, #0
 8001404:	bf14      	ite	ne
 8001406:	2201      	movne	r2, #1
 8001408:	2200      	moveq	r2, #0
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	4413      	add	r3, r2
 800140e:	803b      	strh	r3, [r7, #0]
  for (n = 0; n < sizey; n++)
 8001410:	2300      	movs	r3, #0
 8001412:	827b      	strh	r3, [r7, #18]
 8001414:	e04b      	b.n	80014ae <epd_paint_showPicture+0x104>
  {
    for (i = 0; i < sizex; i++)
 8001416:	2300      	movs	r3, #0
 8001418:	82bb      	strh	r3, [r7, #20]
 800141a:	e041      	b.n	80014a0 <epd_paint_showPicture+0xf6>
    {
      temp = BMP[j];
 800141c:	8afb      	ldrh	r3, [r7, #22]
 800141e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	823b      	strh	r3, [r7, #16]
      j++;
 8001426:	8afb      	ldrh	r3, [r7, #22]
 8001428:	3301      	adds	r3, #1
 800142a:	82fb      	strh	r3, [r7, #22]
      for (m = 0; m < 8; m++)
 800142c:	2300      	movs	r3, #0
 800142e:	81fb      	strh	r3, [r7, #14]
 8001430:	e020      	b.n	8001474 <epd_paint_showPicture+0xca>
      {
        if (temp & 0x01)
 8001432:	8a3b      	ldrh	r3, [r7, #16]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <epd_paint_showPicture+0xac>
          epd_paint_drawPoint(x, y, !Color);
 800143c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf0c      	ite	eq
 8001442:	2301      	moveq	r3, #1
 8001444:	2300      	movne	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	88b9      	ldrh	r1, [r7, #4]
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fe8c 	bl	800116c <epd_paint_drawPoint>
 8001454:	e005      	b.n	8001462 <epd_paint_showPicture+0xb8>
        else
          epd_paint_drawPoint(x, y, Color);
 8001456:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001458:	88b9      	ldrh	r1, [r7, #4]
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe85 	bl	800116c <epd_paint_drawPoint>
        temp >>= 1;
 8001462:	8a3b      	ldrh	r3, [r7, #16]
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	823b      	strh	r3, [r7, #16]
        y++;
 8001468:	88bb      	ldrh	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	80bb      	strh	r3, [r7, #4]
      for (m = 0; m < 8; m++)
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	3301      	adds	r3, #1
 8001472:	81fb      	strh	r3, [r7, #14]
 8001474:	89fb      	ldrh	r3, [r7, #14]
 8001476:	2b07      	cmp	r3, #7
 8001478:	d9db      	bls.n	8001432 <epd_paint_showPicture+0x88>
      }
      x++;
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	3301      	adds	r3, #1
 800147e:	80fb      	strh	r3, [r7, #6]
      if ((x - x0) == sizex)
 8001480:	88fa      	ldrh	r2, [r7, #6]
 8001482:	897b      	ldrh	r3, [r7, #10]
 8001484:	1ad2      	subs	r2, r2, r3
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	429a      	cmp	r2, r3
 800148a:	d104      	bne.n	8001496 <epd_paint_showPicture+0xec>
      {
        x = x0;
 800148c:	897b      	ldrh	r3, [r7, #10]
 800148e:	80fb      	strh	r3, [r7, #6]
        y0 = y0 + 8;
 8001490:	89bb      	ldrh	r3, [r7, #12]
 8001492:	3308      	adds	r3, #8
 8001494:	81bb      	strh	r3, [r7, #12]
      }
      y = y0;
 8001496:	89bb      	ldrh	r3, [r7, #12]
 8001498:	80bb      	strh	r3, [r7, #4]
    for (i = 0; i < sizex; i++)
 800149a:	8abb      	ldrh	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	82bb      	strh	r3, [r7, #20]
 80014a0:	8aba      	ldrh	r2, [r7, #20]
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3b9      	bcc.n	800141c <epd_paint_showPicture+0x72>
  for (n = 0; n < sizey; n++)
 80014a8:	8a7b      	ldrh	r3, [r7, #18]
 80014aa:	3301      	adds	r3, #1
 80014ac:	827b      	strh	r3, [r7, #18]
 80014ae:	8a7a      	ldrh	r2, [r7, #18]
 80014b0:	883b      	ldrh	r3, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3af      	bcc.n	8001416 <epd_paint_showPicture+0x6c>
    }
  }
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}

080014c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80014e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00b      	beq.n	8001500 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014e8:	e000      	b.n	80014ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80014ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f9      	beq.n	80014ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e009      	b.n	8001532 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ffca 	bl	80014c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf1      	blt.n	800151e <_write+0x12>
  }
  return len;
 800153a:	687b      	ldr	r3, [r7, #4]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154a:	f000 fb25 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154e:	f000 f8db 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001552:	f000 f957 	bl	8001804 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001556:	f000 f91d 	bl	8001794 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nWeAct Studio Core Board\r\n");
 800155a:	485b      	ldr	r0, [pc, #364]	@ (80016c8 <main+0x184>)
 800155c:	f002 fa3c 	bl	80039d8 <puts>
      printf("weactstudio.taobao.com\r\n");
 8001560:	485a      	ldr	r0, [pc, #360]	@ (80016cc <main+0x188>)
 8001562:	f002 fa39 	bl	80039d8 <puts>
      printf("weactstudio.aliexpress.com\r\n");
 8001566:	485a      	ldr	r0, [pc, #360]	@ (80016d0 <main+0x18c>)
 8001568:	f002 fa36 	bl	80039d8 <puts>
      printf("wwww.weact-tc.cn\r\n\r\n");
 800156c:	4859      	ldr	r0, [pc, #356]	@ (80016d4 <main+0x190>)
 800156e:	f002 fa33 	bl	80039d8 <puts>

      printf("Epaper Module Test\r\n");
 8001572:	4859      	ldr	r0, [pc, #356]	@ (80016d8 <main+0x194>)
 8001574:	f002 fa30 	bl	80039d8 <puts>

  epd_init();
 8001578:	f7ff fb7c 	bl	8000c74 <epd_init>

  #else
  	#ifdef EPD_42
    epd_paint_newimage(image_bw, EPD_W, EPD_H, EPD_ROTATE_270, EPD_COLOR_WHITE);
  #else
      epd_paint_newimage(image_bw, EPD_W, EPD_H, EPD_ROTATE_180, EPD_COLOR_WHITE);
 800157c:	23ff      	movs	r3, #255	@ 0xff
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	23b4      	movs	r3, #180	@ 0xb4
 8001582:	22c8      	movs	r2, #200	@ 0xc8
 8001584:	21c8      	movs	r1, #200	@ 0xc8
 8001586:	4855      	ldr	r0, [pc, #340]	@ (80016dc <main+0x198>)
 8001588:	f7ff fcde 	bl	8000f48 <epd_paint_newimage>
  	#endif

      epd_paint_selectimage(image_bw);
 800158c:	4853      	ldr	r0, [pc, #332]	@ (80016dc <main+0x198>)
 800158e:	f7ff fddf 	bl	8001150 <epd_paint_selectimage>

  	#ifdef EPD_154
    epd_paint_clear(EPD_COLOR_WHITE);
 8001592:	20ff      	movs	r0, #255	@ 0xff
 8001594:	f7ff fdaa 	bl	80010ec <epd_paint_clear>
  	epd_paint_showPicture((EPD_H - 200) / 2,(EPD_W - 64) / 2,200,64,gImage_5,EPD_COLOR_WHITE);
 8001598:	23ff      	movs	r3, #255	@ 0xff
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	4b50      	ldr	r3, [pc, #320]	@ (80016e0 <main+0x19c>)
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2340      	movs	r3, #64	@ 0x40
 80015a2:	22c8      	movs	r2, #200	@ 0xc8
 80015a4:	2144      	movs	r1, #68	@ 0x44
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff feff 	bl	80013aa <epd_paint_showPicture>
  		#else
      epd_paint_showPicture((EPD_H - 250) / 2, (EPD_W - 122) / 2, 250, 122, gImage_4, EPD_COLOR_WHITE);
  #endif
  	#endif

      epd_displayBW(image_bw);
 80015ac:	484b      	ldr	r0, [pc, #300]	@ (80016dc <main+0x198>)
 80015ae:	f7ff fc72 	bl	8000e96 <epd_displayBW>
  	epd_enter_deepsleepmode(EPD_DEEPSLEEP_MODE1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fbcc 	bl	8000d50 <epd_enter_deepsleepmode>

      HAL_Delay(5000);
 80015b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80015bc:	f000 fb4e 	bl	8001c5c <HAL_Delay>

  	epd_init_partial();
 80015c0:	f7ff fbba 	bl	8000d38 <epd_init_partial>

      epd_paint_selectimage(image_bw);
 80015c4:	4845      	ldr	r0, [pc, #276]	@ (80016dc <main+0x198>)
 80015c6:	f7ff fdc3 	bl	8001150 <epd_paint_selectimage>
      epd_paint_clear(EPD_COLOR_WHITE);
 80015ca:	20ff      	movs	r0, #255	@ 0xff
 80015cc:	f7ff fd8e 	bl	80010ec <epd_paint_clear>
  #ifdef EPD_154
    epd_paint_showString(10, 0, (uint8_t *)&"1.54 Inch", EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2318      	movs	r3, #24
 80015d6:	4a43      	ldr	r2, [pc, #268]	@ (80016e4 <main+0x1a0>)
 80015d8:	2100      	movs	r1, #0
 80015da:	200a      	movs	r0, #10
 80015dc:	f7ff fea8 	bl	8001330 <epd_paint_showString>
  	epd_paint_showString(10, 23, (uint8_t *)&"Epaper Module", EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 80015e0:	2300      	movs	r3, #0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2318      	movs	r3, #24
 80015e6:	4a40      	ldr	r2, [pc, #256]	@ (80016e8 <main+0x1a4>)
 80015e8:	2117      	movs	r1, #23
 80015ea:	200a      	movs	r0, #10
 80015ec:	f7ff fea0 	bl	8001330 <epd_paint_showString>
  	epd_paint_showString(10, 48, (uint8_t *)&"Designed By WeAct Studio", EPD_FONT_SIZE12x6, EPD_COLOR_BLACK);
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	230c      	movs	r3, #12
 80015f6:	4a3d      	ldr	r2, [pc, #244]	@ (80016ec <main+0x1a8>)
 80015f8:	2130      	movs	r1, #48	@ 0x30
 80015fa:	200a      	movs	r0, #10
 80015fc:	f7ff fe98 	bl	8001330 <epd_paint_showString>
  	epd_paint_showString(10, 60, (uint8_t *)&"with 200 x 200 resolution", EPD_FONT_SIZE12x6, EPD_COLOR_BLACK);
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	230c      	movs	r3, #12
 8001606:	4a3a      	ldr	r2, [pc, #232]	@ (80016f0 <main+0x1ac>)
 8001608:	213c      	movs	r1, #60	@ 0x3c
 800160a:	200a      	movs	r0, #10
 800160c:	f7ff fe90 	bl	8001330 <epd_paint_showString>
  	epd_paint_showPicture((EPD_H - 200) / 2,130,200,64,gImage_5,EPD_COLOR_WHITE);
 8001610:	23ff      	movs	r3, #255	@ 0xff
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <main+0x19c>)
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2340      	movs	r3, #64	@ 0x40
 800161a:	22c8      	movs	r2, #200	@ 0xc8
 800161c:	2182      	movs	r1, #130	@ 0x82
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fec3 	bl	80013aa <epd_paint_showPicture>
  	epd_paint_showString(10, 0, (uint8_t *)&"4.2 Inch Epaper Module", EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
  	epd_paint_showString(10, 50, (uint8_t *)&"with 400 x 300 resolution", EPD_FONT_SIZE16x8, EPD_COLOR_BLACK);
  	epd_paint_showString(10, 29, (uint8_t *)&"Designed By WeAct Studio", EPD_FONT_SIZE16x8, EPD_COLOR_BLACK);
  #endif
  #if 1
      epd_paint_showString(10,100,(uint8_t *)&"GD32F103CBT6 Example",EPD_FONT_SIZE16x8,EPD_COLOR_BLACK);
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2310      	movs	r3, #16
 800162a:	4a32      	ldr	r2, [pc, #200]	@ (80016f4 <main+0x1b0>)
 800162c:	2164      	movs	r1, #100	@ 0x64
 800162e:	200a      	movs	r0, #10
 8001630:	f7ff fe7e 	bl	8001330 <epd_paint_showString>
  #else
  	epd_paint_drawRectangle(10, EPD_W-20, EPD_H - 10, EPD_W-6, EPD_COLOR_BLACK, 1);
  #endif

  	sprintf((char *)&text, ">> Partial Mode");
 8001634:	4930      	ldr	r1, [pc, #192]	@ (80016f8 <main+0x1b4>)
 8001636:	4831      	ldr	r0, [pc, #196]	@ (80016fc <main+0x1b8>)
 8001638:	f002 f896 	bl	8003768 <siprintf>
  	epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 800163c:	2300      	movs	r3, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2318      	movs	r3, #24
 8001642:	4a2e      	ldr	r2, [pc, #184]	@ (80016fc <main+0x1b8>)
 8001644:	2147      	movs	r1, #71	@ 0x47
 8001646:	200a      	movs	r0, #10
 8001648:	f7ff fe72 	bl	8001330 <epd_paint_showString>

  	epd_displayBW_partial(image_bw);
 800164c:	4823      	ldr	r0, [pc, #140]	@ (80016dc <main+0x198>)
 800164e:	f7ff fc4e 	bl	8000eee <epd_displayBW_partial>

  	HAL_Delay(1000);
 8001652:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001656:	f000 fb01 	bl	8001c5c <HAL_Delay>

  	for (uint32_t i = 123; i < 8 * 123; i += 123)
 800165a:	237b      	movs	r3, #123	@ 0x7b
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	e015      	b.n	800168c <main+0x148>
  	{
  		sprintf((char *)&text, ">> Num=%d     ", i);
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4927      	ldr	r1, [pc, #156]	@ (8001700 <main+0x1bc>)
 8001664:	4825      	ldr	r0, [pc, #148]	@ (80016fc <main+0x1b8>)
 8001666:	f002 f87f 	bl	8003768 <siprintf>
  		epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 800166a:	2300      	movs	r3, #0
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2318      	movs	r3, #24
 8001670:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <main+0x1b8>)
 8001672:	2147      	movs	r1, #71	@ 0x47
 8001674:	200a      	movs	r0, #10
 8001676:	f7ff fe5b 	bl	8001330 <epd_paint_showString>

  		epd_displayBW_partial(image_bw);
 800167a:	4818      	ldr	r0, [pc, #96]	@ (80016dc <main+0x198>)
 800167c:	f7ff fc37 	bl	8000eee <epd_displayBW_partial>

  		HAL_Delay(100);
 8001680:	2064      	movs	r0, #100	@ 0x64
 8001682:	f000 faeb 	bl	8001c5c <HAL_Delay>
  	for (uint32_t i = 123; i < 8 * 123; i += 123)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	337b      	adds	r3, #123	@ 0x7b
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f5b3 7f76 	cmp.w	r3, #984	@ 0x3d8
 8001692:	d3e5      	bcc.n	8001660 <main+0x11c>
  	}

  	sprintf((char *)&text, ">> Hello World.");
 8001694:	491b      	ldr	r1, [pc, #108]	@ (8001704 <main+0x1c0>)
 8001696:	4819      	ldr	r0, [pc, #100]	@ (80016fc <main+0x1b8>)
 8001698:	f002 f866 	bl	8003768 <siprintf>
  	epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 800169c:	2300      	movs	r3, #0
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2318      	movs	r3, #24
 80016a2:	4a16      	ldr	r2, [pc, #88]	@ (80016fc <main+0x1b8>)
 80016a4:	2147      	movs	r1, #71	@ 0x47
 80016a6:	200a      	movs	r0, #10
 80016a8:	f7ff fe42 	bl	8001330 <epd_paint_showString>
  	epd_displayBW_partial(image_bw);
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <main+0x198>)
 80016ae:	f7ff fc1e 	bl	8000eee <epd_displayBW_partial>

  	HAL_Delay(1000);
 80016b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016b6:	f000 fad1 	bl	8001c5c <HAL_Delay>

  	epd_update();
 80016ba:	f7ff fb81 	bl	8000dc0 <epd_update>
  #endif

      epd_enter_deepsleepmode(EPD_DEEPSLEEP_MODE1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff fb46 	bl	8000d50 <epd_enter_deepsleepmode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <main+0x180>
 80016c8:	08005c28 	.word	0x08005c28
 80016cc:	08005c44 	.word	0x08005c44
 80016d0:	08005c5c 	.word	0x08005c5c
 80016d4:	08005c78 	.word	0x08005c78
 80016d8:	08005c8c 	.word	0x08005c8c
 80016dc:	20000260 	.word	0x20000260
 80016e0:	08007724 	.word	0x08007724
 80016e4:	08005ca0 	.word	0x08005ca0
 80016e8:	08005cac 	.word	0x08005cac
 80016ec:	08005cbc 	.word	0x08005cbc
 80016f0:	08005cd8 	.word	0x08005cd8
 80016f4:	08005cf4 	.word	0x08005cf4
 80016f8:	08005d0c 	.word	0x08005d0c
 80016fc:	200015e8 	.word	0x200015e8
 8001700:	08005d1c 	.word	0x08005d1c
 8001704:	08005d2c 	.word	0x08005d2c

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b090      	sub	sp, #64	@ 0x40
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	2228      	movs	r2, #40	@ 0x28
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f002 f966 	bl	80039e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001746:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fd3f 	bl	80021d4 <HAL_RCC_OscConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800175c:	f000 f8a8 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001760:	230f      	movs	r3, #15
 8001762:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001764:	2302      	movs	r3, #2
 8001766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2102      	movs	r1, #2
 800177a:	4618      	mov	r0, r3
 800177c:	f000 ffac 	bl	80026d8 <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001786:	f000 f893 	bl	80018b0 <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3740      	adds	r7, #64	@ 0x40
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_SPI1_Init+0x68>)
 800179a:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <MX_SPI1_Init+0x6c>)
 800179c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017ca:	2228      	movs	r2, #40	@ 0x28
 80017cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017dc:	2200      	movs	r2, #0
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017e2:	220a      	movs	r2, #10
 80017e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_SPI1_Init+0x68>)
 80017e8:	f001 f8d2 	bl	8002990 <HAL_SPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80017f2:	f000 f85d 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000208 	.word	0x20000208
 8001800:	40013000 	.word	0x40013000

08001804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001818:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a22      	ldr	r2, [pc, #136]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a16      	ldr	r2, [pc, #88]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <MX_GPIO_Init+0xa4>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2116      	movs	r1, #22
 8001864:	4811      	ldr	r0, [pc, #68]	@ (80018ac <MX_GPIO_Init+0xa8>)
 8001866:	f000 fc9c 	bl	80021a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 800186a:	2316      	movs	r3, #22
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2302      	movs	r3, #2
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	480a      	ldr	r0, [pc, #40]	@ (80018ac <MX_GPIO_Init+0xa8>)
 8001882:	f000 faf3 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8001886:	2308      	movs	r3, #8
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	4619      	mov	r1, r3
 8001898:	4804      	ldr	r0, [pc, #16]	@ (80018ac <MX_GPIO_Init+0xa8>)
 800189a:	f000 fae7 	bl	8001e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189e:	bf00      	nop
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010800 	.word	0x40010800

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <Error_Handler+0x8>

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_MspInit+0x5c>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <HAL_MspInit+0x5c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_MspInit+0x5c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <HAL_MspInit+0x5c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_MspInit+0x60>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_MspInit+0x60>)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000

08001920 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_SPI_MspInit+0x70>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d123      	bne.n	8001988 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_SPI_MspInit+0x74>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a13      	ldr	r2, [pc, #76]	@ (8001994 <HAL_SPI_MspInit+0x74>)
 8001946:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_SPI_MspInit+0x74>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_SPI_MspInit+0x74>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_SPI_MspInit+0x74>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_SPI_MspInit+0x74>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001970:	23a0      	movs	r3, #160	@ 0xa0
 8001972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <HAL_SPI_MspInit+0x78>)
 8001984:	f000 fa72 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40013000 	.word	0x40013000
 8001994:	40021000 	.word	0x40021000
 8001998:	40010800 	.word	0x40010800

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f91a 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <_kill>:

int _kill(int pid, int sig)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0c:	f001 fff8 	bl	8003a00 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2216      	movs	r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
  return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_exit>:

void _exit (int status)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffe7 	bl	8001a02 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <_exit+0x12>

08001a38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e00a      	b.n	8001a60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a4a:	f3af 8000 	nop.w
 8001a4e:	4601      	mov	r1, r0
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	60ba      	str	r2, [r7, #8]
 8001a56:	b2ca      	uxtb	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf0      	blt.n	8001a4a <_read+0x12>
  }

  return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f001 ff7c 	bl	8003a00 <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20005000 	.word	0x20005000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	200015fc 	.word	0x200015fc
 8001b3c:	20001750 	.word	0x20001750

08001b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b4c:	f7ff fff8 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480b      	ldr	r0, [pc, #44]	@ (8001b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b52:	490c      	ldr	r1, [pc, #48]	@ (8001b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b54:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a09      	ldr	r2, [pc, #36]	@ (8001b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b68:	4c09      	ldr	r4, [pc, #36]	@ (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f001 ff49 	bl	8003a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7a:	f7ff fce3 	bl	8001544 <main>
  bx lr
 8001b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b88:	08008108 	.word	0x08008108
  ldr r2, =_sbss
 8001b8c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b90:	20001750 	.word	0x20001750

08001b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC1_2_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <HAL_Init+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <HAL_Init+0x28>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f92b 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fe82 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f935 	bl	8001e52 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c00:	f000 f90b 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	20000008 	.word	0x20000008

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_IncTick+0x1c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_IncTick+0x20>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a03      	ldr	r2, [pc, #12]	@ (8001c44 <HAL_IncTick+0x20>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20001600 	.word	0x20001600

08001c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	@ (8001c58 <HAL_GetTick+0x10>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20001600 	.word	0x20001600

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffe0 	bl	8001c48 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <__NVIC_SetPriorityGrouping>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_SetPriority>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	@ 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Config>:
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de4:	f7ff ff90 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff49 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff5e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff90 	bl	8001d5c <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5f 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffb0 	bl	8001dc0 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b08b      	sub	sp, #44	@ 0x2c
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7e:	e169      	b.n	8002154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e80:	2201      	movs	r2, #1
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 8158 	bne.w	800214e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4a9a      	ldr	r2, [pc, #616]	@ (800210c <HAL_GPIO_Init+0x2a0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d05e      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a98      	ldr	r2, [pc, #608]	@ (800210c <HAL_GPIO_Init+0x2a0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d875      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001eae:	4a98      	ldr	r2, [pc, #608]	@ (8002110 <HAL_GPIO_Init+0x2a4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d058      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a96      	ldr	r2, [pc, #600]	@ (8002110 <HAL_GPIO_Init+0x2a4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d86f      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001eba:	4a96      	ldr	r2, [pc, #600]	@ (8002114 <HAL_GPIO_Init+0x2a8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d052      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ec0:	4a94      	ldr	r2, [pc, #592]	@ (8002114 <HAL_GPIO_Init+0x2a8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d869      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ec6:	4a94      	ldr	r2, [pc, #592]	@ (8002118 <HAL_GPIO_Init+0x2ac>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d04c      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ecc:	4a92      	ldr	r2, [pc, #584]	@ (8002118 <HAL_GPIO_Init+0x2ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d863      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ed2:	4a92      	ldr	r2, [pc, #584]	@ (800211c <HAL_GPIO_Init+0x2b0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d046      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ed8:	4a90      	ldr	r2, [pc, #576]	@ (800211c <HAL_GPIO_Init+0x2b0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d85d      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ede:	2b12      	cmp	r3, #18
 8001ee0:	d82a      	bhi.n	8001f38 <HAL_GPIO_Init+0xcc>
 8001ee2:	2b12      	cmp	r3, #18
 8001ee4:	d859      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <HAL_GPIO_Init+0x80>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f67 	.word	0x08001f67
 8001ef0:	08001f41 	.word	0x08001f41
 8001ef4:	08001f53 	.word	0x08001f53
 8001ef8:	08001f95 	.word	0x08001f95
 8001efc:	08001f9b 	.word	0x08001f9b
 8001f00:	08001f9b 	.word	0x08001f9b
 8001f04:	08001f9b 	.word	0x08001f9b
 8001f08:	08001f9b 	.word	0x08001f9b
 8001f0c:	08001f9b 	.word	0x08001f9b
 8001f10:	08001f9b 	.word	0x08001f9b
 8001f14:	08001f9b 	.word	0x08001f9b
 8001f18:	08001f9b 	.word	0x08001f9b
 8001f1c:	08001f9b 	.word	0x08001f9b
 8001f20:	08001f9b 	.word	0x08001f9b
 8001f24:	08001f9b 	.word	0x08001f9b
 8001f28:	08001f9b 	.word	0x08001f9b
 8001f2c:	08001f9b 	.word	0x08001f9b
 8001f30:	08001f49 	.word	0x08001f49
 8001f34:	08001f5d 	.word	0x08001f5d
 8001f38:	4a79      	ldr	r2, [pc, #484]	@ (8002120 <HAL_GPIO_Init+0x2b4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3e:	e02c      	b.n	8001f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	623b      	str	r3, [r7, #32]
          break;
 8001f46:	e029      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	623b      	str	r3, [r7, #32]
          break;
 8001f50:	e024      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	3308      	adds	r3, #8
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e01f      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	330c      	adds	r3, #12
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e01a      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e013      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	611a      	str	r2, [r3, #16]
          break;
 8001f86:	e009      	b.n	8001f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f88:	2308      	movs	r3, #8
 8001f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	615a      	str	r2, [r3, #20]
          break;
 8001f92:	e003      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e000      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          break;
 8001f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2bff      	cmp	r3, #255	@ 0xff
 8001fa0:	d801      	bhi.n	8001fa6 <HAL_GPIO_Init+0x13a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	e001      	b.n	8001faa <HAL_GPIO_Init+0x13e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	@ 0xff
 8001fb0:	d802      	bhi.n	8001fb8 <HAL_GPIO_Init+0x14c>
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0x152>
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fba:	3b08      	subs	r3, #8
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	210f      	movs	r1, #15
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	401a      	ands	r2, r3
 8001fd0:	6a39      	ldr	r1, [r7, #32]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80b1 	beq.w	800214e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fec:	4b4d      	ldr	r3, [pc, #308]	@ (8002124 <HAL_GPIO_Init+0x2b8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a4c      	ldr	r2, [pc, #304]	@ (8002124 <HAL_GPIO_Init+0x2b8>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8002124 <HAL_GPIO_Init+0x2b8>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002004:	4a48      	ldr	r2, [pc, #288]	@ (8002128 <HAL_GPIO_Init+0x2bc>)
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a40      	ldr	r2, [pc, #256]	@ (800212c <HAL_GPIO_Init+0x2c0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_GPIO_Init+0x1ec>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3f      	ldr	r2, [pc, #252]	@ (8002130 <HAL_GPIO_Init+0x2c4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_Init+0x1e8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3e      	ldr	r2, [pc, #248]	@ (8002134 <HAL_GPIO_Init+0x2c8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_Init+0x1e4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3d      	ldr	r2, [pc, #244]	@ (8002138 <HAL_GPIO_Init+0x2cc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_Init+0x1e0>
 8002048:	2303      	movs	r3, #3
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 800204c:	2304      	movs	r3, #4
 800204e:	e004      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002050:	2302      	movs	r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002058:	2300      	movs	r3, #0
 800205a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206a:	492f      	ldr	r1, [pc, #188]	@ (8002128 <HAL_GPIO_Init+0x2bc>)
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002084:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	492c      	ldr	r1, [pc, #176]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002092:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	4928      	ldr	r1, [pc, #160]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 800209c:	4013      	ands	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ac:	4b23      	ldr	r3, [pc, #140]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	4922      	ldr	r1, [pc, #136]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ba:	4b20      	ldr	r3, [pc, #128]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	491e      	ldr	r1, [pc, #120]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d4:	4b19      	ldr	r3, [pc, #100]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4918      	ldr	r1, [pc, #96]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020e2:	4b16      	ldr	r3, [pc, #88]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4914      	ldr	r1, [pc, #80]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d021      	beq.n	8002140 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	490e      	ldr	r1, [pc, #56]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]
 8002108:	e021      	b.n	800214e <HAL_GPIO_Init+0x2e2>
 800210a:	bf00      	nop
 800210c:	10320000 	.word	0x10320000
 8002110:	10310000 	.word	0x10310000
 8002114:	10220000 	.word	0x10220000
 8002118:	10210000 	.word	0x10210000
 800211c:	10120000 	.word	0x10120000
 8002120:	10110000 	.word	0x10110000
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	40010800 	.word	0x40010800
 8002130:	40010c00 	.word	0x40010c00
 8002134:	40011000 	.word	0x40011000
 8002138:	40011400 	.word	0x40011400
 800213c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4909      	ldr	r1, [pc, #36]	@ (8002170 <HAL_GPIO_Init+0x304>)
 800214a:	4013      	ands	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f ae8e 	bne.w	8001e80 <HAL_GPIO_Init+0x14>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	372c      	adds	r7, #44	@ 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	807b      	strh	r3, [r7, #2]
 80021ae:	4613      	mov	r3, r2
 80021b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b2:	787b      	ldrb	r3, [r7, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021be:	e003      	b.n	80021c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	611a      	str	r2, [r3, #16]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e272      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8087 	beq.w	8002302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f4:	4b92      	ldr	r3, [pc, #584]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d00c      	beq.n	800221a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002200:	4b8f      	ldr	r3, [pc, #572]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d112      	bne.n	8002232 <HAL_RCC_OscConfig+0x5e>
 800220c:	4b8c      	ldr	r3, [pc, #560]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002218:	d10b      	bne.n	8002232 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221a:	4b89      	ldr	r3, [pc, #548]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d06c      	beq.n	8002300 <HAL_RCC_OscConfig+0x12c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d168      	bne.n	8002300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e24c      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x76>
 800223c:	4b80      	ldr	r3, [pc, #512]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a7f      	ldr	r2, [pc, #508]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e02e      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x98>
 8002252:	4b7b      	ldr	r3, [pc, #492]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7a      	ldr	r2, [pc, #488]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b78      	ldr	r3, [pc, #480]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a77      	ldr	r2, [pc, #476]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e01d      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0xbc>
 8002276:	4b72      	ldr	r3, [pc, #456]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a71      	ldr	r2, [pc, #452]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6e      	ldr	r2, [pc, #440]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 8002290:	4b6b      	ldr	r3, [pc, #428]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6a      	ldr	r2, [pc, #424]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b68      	ldr	r3, [pc, #416]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a67      	ldr	r2, [pc, #412]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fcca 	bl	8001c48 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff fcc6 	bl	8001c48 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	@ 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e200      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe4>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fcb6 	bl	8001c48 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff fcb2 	bl	8001c48 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	@ 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1ec      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	4b53      	ldr	r3, [pc, #332]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x10c>
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d063      	beq.n	80023d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230e:	4b4c      	ldr	r3, [pc, #304]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231a:	4b49      	ldr	r3, [pc, #292]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d11c      	bne.n	8002360 <HAL_RCC_OscConfig+0x18c>
 8002326:	4b46      	ldr	r3, [pc, #280]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d116      	bne.n	8002360 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	4b43      	ldr	r3, [pc, #268]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1c0      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234a:	4b3d      	ldr	r3, [pc, #244]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4939      	ldr	r1, [pc, #228]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	e03a      	b.n	80023d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff fc6b 	bl	8001c48 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7ff fc67 	bl	8001c48 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e1a1      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002388:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4927      	ldr	r1, [pc, #156]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
 80023a8:	e015      	b.n	80023d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023aa:	4b26      	ldr	r3, [pc, #152]	@ (8002444 <HAL_RCC_OscConfig+0x270>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fc4a 	bl	8001c48 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7ff fc46 	bl	8001c48 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e180      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03a      	beq.n	8002458 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d019      	beq.n	800241e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ea:	4b17      	ldr	r3, [pc, #92]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7ff fc2a 	bl	8001c48 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7ff fc26 	bl	8001c48 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e160      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <HAL_RCC_OscConfig+0x26c>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f000 fa9c 	bl	8002954 <RCC_Delay>
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7ff fc10 	bl	8001c48 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff fc0c 	bl	8001c48 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d908      	bls.n	800244c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e146      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	42420000 	.word	0x42420000
 8002448:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b92      	ldr	r3, [pc, #584]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e9      	bne.n	800242c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a6 	beq.w	80025b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b8b      	ldr	r3, [pc, #556]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b88      	ldr	r3, [pc, #544]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a87      	ldr	r2, [pc, #540]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]
 8002482:	4b85      	ldr	r3, [pc, #532]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b82      	ldr	r3, [pc, #520]	@ (800269c <HAL_RCC_OscConfig+0x4c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b7f      	ldr	r3, [pc, #508]	@ (800269c <HAL_RCC_OscConfig+0x4c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7e      	ldr	r2, [pc, #504]	@ (800269c <HAL_RCC_OscConfig+0x4c8>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7ff fbcd 	bl	8001c48 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7ff fbc9 	bl	8001c48 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	@ 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e103      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b75      	ldr	r3, [pc, #468]	@ (800269c <HAL_RCC_OscConfig+0x4c8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x312>
 80024d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e02d      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x334>
 80024ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a69      	ldr	r2, [pc, #420]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6213      	str	r3, [r2, #32]
 80024fa:	4b67      	ldr	r3, [pc, #412]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a66      	ldr	r2, [pc, #408]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	e01c      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x356>
 8002510:	4b61      	ldr	r3, [pc, #388]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a60      	ldr	r2, [pc, #384]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	4b5e      	ldr	r3, [pc, #376]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a5d      	ldr	r2, [pc, #372]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 800252a:	4b5b      	ldr	r3, [pc, #364]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a5a      	ldr	r2, [pc, #360]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	4b58      	ldr	r3, [pc, #352]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a57      	ldr	r2, [pc, #348]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d015      	beq.n	8002576 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7ff fb7d 	bl	8001c48 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7ff fb79 	bl	8001c48 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0b1      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	4b4b      	ldr	r3, [pc, #300]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ee      	beq.n	8002552 <HAL_RCC_OscConfig+0x37e>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff fb67 	bl	8001c48 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff fb63 	bl	8001c48 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e09b      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	4b40      	ldr	r3, [pc, #256]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8087 	beq.w	80026ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025bc:	4b36      	ldr	r3, [pc, #216]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d061      	beq.n	800268c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d146      	bne.n	800265e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b33      	ldr	r3, [pc, #204]	@ (80026a0 <HAL_RCC_OscConfig+0x4cc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff fb37 	bl	8001c48 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7ff fb33 	bl	8001c48 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e06d      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f0:	4b29      	ldr	r3, [pc, #164]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002604:	d108      	bne.n	8002618 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002606:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4921      	ldr	r1, [pc, #132]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002618:	4b1f      	ldr	r3, [pc, #124]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a19      	ldr	r1, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	430b      	orrs	r3, r1
 800262a:	491b      	ldr	r1, [pc, #108]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fb07 	bl	8001c48 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff fb03 	bl	8001c48 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e03d      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002650:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x46a>
 800265c:	e035      	b.n	80026ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <HAL_RCC_OscConfig+0x4cc>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff faf0 	bl	8001c48 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7ff faec 	bl	8001c48 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e026      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x498>
 800268a:	e01e      	b.n	80026ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e019      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
 80026a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_RCC_OscConfig+0x500>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d0      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b67      	ldr	r3, [pc, #412]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4965      	ldr	r1, [pc, #404]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a58      	ldr	r2, [pc, #352]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800273e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a52      	ldr	r2, [pc, #328]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002756:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d040      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e073      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3d      	ldr	r3, [pc, #244]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06b      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b39      	ldr	r3, [pc, #228]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4936      	ldr	r1, [pc, #216]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c8:	f7ff fa3e 	bl	8001c48 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7ff fa3a 	bl	8001c48 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e053      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2d      	ldr	r3, [pc, #180]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b27      	ldr	r3, [pc, #156]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d210      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4922      	ldr	r1, [pc, #136]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f99c 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
 80028a0:	08007d64 	.word	0x08007d64
 80028a4:	20000004 	.word	0x20000004
 80028a8:	20000008 	.word	0x20000008

080028ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x94>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x30>
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x36>
 80028da:	e027      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	613b      	str	r3, [r7, #16]
      break;
 80028e0:	e027      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0c9b      	lsrs	r3, r3, #18
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d010      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028fa:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x94>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0c5b      	lsrs	r3, r3, #17
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	4a11      	ldr	r2, [pc, #68]	@ (800294c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x98>)
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	613b      	str	r3, [r7, #16]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x98>)
 800292e:	613b      	str	r3, [r7, #16]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	693b      	ldr	r3, [r7, #16]
}
 8002934:	4618      	mov	r0, r3
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	007a1200 	.word	0x007a1200
 8002948:	08007d74 	.word	0x08007d74
 800294c:	08007d84 	.word	0x08007d84
 8002950:	003d0900 	.word	0x003d0900

08002954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800295c:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <RCC_Delay+0x34>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <RCC_Delay+0x38>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a5b      	lsrs	r3, r3, #9
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002970:	bf00      	nop
  }
  while (Delay --);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f9      	bne.n	8002970 <RCC_Delay+0x1c>
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	20000004 	.word	0x20000004
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e076      	b.n	8002a90 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029b2:	d009      	beq.n	80029c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
 80029ba:	e005      	b.n	80029c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe ff9c 	bl	8001920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4c:	ea42 0103 	orr.w	r1, r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	0c1a      	lsrs	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f002 0204 	and.w	r2, r2, #4
 8002a6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aa8:	f7ff f8ce 	bl	8001c48 <HAL_GetTick>
 8002aac:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e12a      	b.n	8002d18 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_Transmit+0x36>
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e122      	b.n	8002d18 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_SPI_Transmit+0x48>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e11b      	b.n	8002d18 <HAL_SPI_Transmit+0x280>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2203      	movs	r2, #3
 8002aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b2e:	d10f      	bne.n	8002b50 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5a:	2b40      	cmp	r3, #64	@ 0x40
 8002b5c:	d007      	beq.n	8002b6e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b76:	d152      	bne.n	8002c1e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_SPI_Transmit+0xee>
 8002b80:	8b7b      	ldrh	r3, [r7, #26]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d145      	bne.n	8002c12 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002baa:	e032      	b.n	8002c12 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d112      	bne.n	8002be0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	1c9a      	adds	r2, r3, #2
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002bde:	e018      	b.n	8002c12 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be0:	f7ff f832 	bl	8001c48 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d803      	bhi.n	8002bf8 <HAL_SPI_Transmit+0x160>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf6:	d102      	bne.n	8002bfe <HAL_SPI_Transmit+0x166>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e082      	b.n	8002d18 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1c7      	bne.n	8002bac <HAL_SPI_Transmit+0x114>
 8002c1c:	e053      	b.n	8002cc6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_Transmit+0x194>
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d147      	bne.n	8002cbc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	7812      	ldrb	r2, [r2, #0]
 8002c38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c52:	e033      	b.n	8002cbc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d113      	bne.n	8002c8a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c88:	e018      	b.n	8002cbc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c8a:	f7fe ffdd 	bl	8001c48 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d803      	bhi.n	8002ca2 <HAL_SPI_Transmit+0x20a>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ca0:	d102      	bne.n	8002ca8 <HAL_SPI_Transmit+0x210>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e02d      	b.n	8002d18 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1c6      	bne.n	8002c54 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f8be 	bl	8002e4c <SPI_EndRxTxTransaction>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d2e:	b2db      	uxtb	r3, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
	...

08002d3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d4c:	f7fe ff7c 	bl	8001c48 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d5c:	f7fe ff74 	bl	8001c48 <HAL_GetTick>
 8002d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d62:	4b39      	ldr	r3, [pc, #228]	@ (8002e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	015b      	lsls	r3, r3, #5
 8002d68:	0d1b      	lsrs	r3, r3, #20
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d72:	e054      	b.n	8002e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d7a:	d050      	beq.n	8002e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d7c:	f7fe ff64 	bl	8001c48 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d902      	bls.n	8002d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d13d      	bne.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002daa:	d111      	bne.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002db4:	d004      	beq.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dbe:	d107      	bne.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dd8:	d10f      	bne.n	8002dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e017      	b.n	8002e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d19b      	bne.n	8002d74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000004 	.word	0x20000004

08002e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	2102      	movs	r1, #2
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff ff6a 	bl	8002d3c <SPI_WaitFlagStateUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e013      	b.n	8002ea6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2180      	movs	r1, #128	@ 0x80
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff ff57 	bl	8002d3c <SPI_WaitFlagStateUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e98:	f043 0220 	orr.w	r2, r3, #32
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <__cvt>:
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb4:	461d      	mov	r5, r3
 8002eb6:	bfbb      	ittet	lt
 8002eb8:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002ebc:	461d      	movlt	r5, r3
 8002ebe:	2300      	movge	r3, #0
 8002ec0:	232d      	movlt	r3, #45	@ 0x2d
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	bfb8      	it	lt
 8002ec8:	4614      	movlt	r4, r2
 8002eca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002ecc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002ece:	7013      	strb	r3, [r2, #0]
 8002ed0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002ed2:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002ed6:	f023 0820 	bic.w	r8, r3, #32
 8002eda:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ede:	d005      	beq.n	8002eec <__cvt+0x3e>
 8002ee0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002ee4:	d100      	bne.n	8002ee8 <__cvt+0x3a>
 8002ee6:	3601      	adds	r6, #1
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e000      	b.n	8002eee <__cvt+0x40>
 8002eec:	2303      	movs	r3, #3
 8002eee:	aa07      	add	r2, sp, #28
 8002ef0:	9204      	str	r2, [sp, #16]
 8002ef2:	aa06      	add	r2, sp, #24
 8002ef4:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002ef8:	e9cd 3600 	strd	r3, r6, [sp]
 8002efc:	4622      	mov	r2, r4
 8002efe:	462b      	mov	r3, r5
 8002f00:	f000 fe42 	bl	8003b88 <_dtoa_r>
 8002f04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002f08:	4607      	mov	r7, r0
 8002f0a:	d119      	bne.n	8002f40 <__cvt+0x92>
 8002f0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002f0e:	07db      	lsls	r3, r3, #31
 8002f10:	d50e      	bpl.n	8002f30 <__cvt+0x82>
 8002f12:	eb00 0906 	add.w	r9, r0, r6
 8002f16:	2200      	movs	r2, #0
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	f7fd fd43 	bl	80009a8 <__aeabi_dcmpeq>
 8002f22:	b108      	cbz	r0, 8002f28 <__cvt+0x7a>
 8002f24:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f28:	2230      	movs	r2, #48	@ 0x30
 8002f2a:	9b07      	ldr	r3, [sp, #28]
 8002f2c:	454b      	cmp	r3, r9
 8002f2e:	d31e      	bcc.n	8002f6e <__cvt+0xc0>
 8002f30:	4638      	mov	r0, r7
 8002f32:	9b07      	ldr	r3, [sp, #28]
 8002f34:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002f36:	1bdb      	subs	r3, r3, r7
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	b008      	add	sp, #32
 8002f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002f44:	eb00 0906 	add.w	r9, r0, r6
 8002f48:	d1e5      	bne.n	8002f16 <__cvt+0x68>
 8002f4a:	7803      	ldrb	r3, [r0, #0]
 8002f4c:	2b30      	cmp	r3, #48	@ 0x30
 8002f4e:	d10a      	bne.n	8002f66 <__cvt+0xb8>
 8002f50:	2200      	movs	r2, #0
 8002f52:	2300      	movs	r3, #0
 8002f54:	4620      	mov	r0, r4
 8002f56:	4629      	mov	r1, r5
 8002f58:	f7fd fd26 	bl	80009a8 <__aeabi_dcmpeq>
 8002f5c:	b918      	cbnz	r0, 8002f66 <__cvt+0xb8>
 8002f5e:	f1c6 0601 	rsb	r6, r6, #1
 8002f62:	f8ca 6000 	str.w	r6, [sl]
 8002f66:	f8da 3000 	ldr.w	r3, [sl]
 8002f6a:	4499      	add	r9, r3
 8002f6c:	e7d3      	b.n	8002f16 <__cvt+0x68>
 8002f6e:	1c59      	adds	r1, r3, #1
 8002f70:	9107      	str	r1, [sp, #28]
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e7d9      	b.n	8002f2a <__cvt+0x7c>

08002f76 <__exponent>:
 8002f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f78:	2900      	cmp	r1, #0
 8002f7a:	bfb6      	itet	lt
 8002f7c:	232d      	movlt	r3, #45	@ 0x2d
 8002f7e:	232b      	movge	r3, #43	@ 0x2b
 8002f80:	4249      	neglt	r1, r1
 8002f82:	2909      	cmp	r1, #9
 8002f84:	7002      	strb	r2, [r0, #0]
 8002f86:	7043      	strb	r3, [r0, #1]
 8002f88:	dd29      	ble.n	8002fde <__exponent+0x68>
 8002f8a:	f10d 0307 	add.w	r3, sp, #7
 8002f8e:	461d      	mov	r5, r3
 8002f90:	270a      	movs	r7, #10
 8002f92:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f96:	461a      	mov	r2, r3
 8002f98:	fb07 1416 	mls	r4, r7, r6, r1
 8002f9c:	3430      	adds	r4, #48	@ 0x30
 8002f9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	2c63      	cmp	r4, #99	@ 0x63
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002fac:	dcf1      	bgt.n	8002f92 <__exponent+0x1c>
 8002fae:	3130      	adds	r1, #48	@ 0x30
 8002fb0:	1e94      	subs	r4, r2, #2
 8002fb2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	1c41      	adds	r1, r0, #1
 8002fba:	42ab      	cmp	r3, r5
 8002fbc:	d30a      	bcc.n	8002fd4 <__exponent+0x5e>
 8002fbe:	f10d 0309 	add.w	r3, sp, #9
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	42ac      	cmp	r4, r5
 8002fc6:	bf88      	it	hi
 8002fc8:	2300      	movhi	r3, #0
 8002fca:	3302      	adds	r3, #2
 8002fcc:	4403      	add	r3, r0
 8002fce:	1a18      	subs	r0, r3, r0
 8002fd0:	b003      	add	sp, #12
 8002fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002fd8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002fdc:	e7ed      	b.n	8002fba <__exponent+0x44>
 8002fde:	2330      	movs	r3, #48	@ 0x30
 8002fe0:	3130      	adds	r1, #48	@ 0x30
 8002fe2:	7083      	strb	r3, [r0, #2]
 8002fe4:	70c1      	strb	r1, [r0, #3]
 8002fe6:	1d03      	adds	r3, r0, #4
 8002fe8:	e7f1      	b.n	8002fce <__exponent+0x58>
	...

08002fec <_printf_float>:
 8002fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff0:	b091      	sub	sp, #68	@ 0x44
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002ff8:	4616      	mov	r6, r2
 8002ffa:	461f      	mov	r7, r3
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	f000 fcfb 	bl	80039f8 <_localeconv_r>
 8003002:	6803      	ldr	r3, [r0, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	9308      	str	r3, [sp, #32]
 8003008:	f7fd f8a2 	bl	8000150 <strlen>
 800300c:	2300      	movs	r3, #0
 800300e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003010:	f8d8 3000 	ldr.w	r3, [r8]
 8003014:	9009      	str	r0, [sp, #36]	@ 0x24
 8003016:	3307      	adds	r3, #7
 8003018:	f023 0307 	bic.w	r3, r3, #7
 800301c:	f103 0208 	add.w	r2, r3, #8
 8003020:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003024:	f8d4 b000 	ldr.w	fp, [r4]
 8003028:	f8c8 2000 	str.w	r2, [r8]
 800302c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003030:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003034:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003036:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800303a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800303e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003042:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003046:	4b9c      	ldr	r3, [pc, #624]	@ (80032b8 <_printf_float+0x2cc>)
 8003048:	f7fd fce0 	bl	8000a0c <__aeabi_dcmpun>
 800304c:	bb70      	cbnz	r0, 80030ac <_printf_float+0xc0>
 800304e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003056:	4b98      	ldr	r3, [pc, #608]	@ (80032b8 <_printf_float+0x2cc>)
 8003058:	f7fd fcba 	bl	80009d0 <__aeabi_dcmple>
 800305c:	bb30      	cbnz	r0, 80030ac <_printf_float+0xc0>
 800305e:	2200      	movs	r2, #0
 8003060:	2300      	movs	r3, #0
 8003062:	4640      	mov	r0, r8
 8003064:	4649      	mov	r1, r9
 8003066:	f7fd fca9 	bl	80009bc <__aeabi_dcmplt>
 800306a:	b110      	cbz	r0, 8003072 <_printf_float+0x86>
 800306c:	232d      	movs	r3, #45	@ 0x2d
 800306e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003072:	4a92      	ldr	r2, [pc, #584]	@ (80032bc <_printf_float+0x2d0>)
 8003074:	4b92      	ldr	r3, [pc, #584]	@ (80032c0 <_printf_float+0x2d4>)
 8003076:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800307a:	bf94      	ite	ls
 800307c:	4690      	movls	r8, r2
 800307e:	4698      	movhi	r8, r3
 8003080:	2303      	movs	r3, #3
 8003082:	f04f 0900 	mov.w	r9, #0
 8003086:	6123      	str	r3, [r4, #16]
 8003088:	f02b 0304 	bic.w	r3, fp, #4
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	4633      	mov	r3, r6
 8003090:	4621      	mov	r1, r4
 8003092:	4628      	mov	r0, r5
 8003094:	9700      	str	r7, [sp, #0]
 8003096:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003098:	f000 f9d4 	bl	8003444 <_printf_common>
 800309c:	3001      	adds	r0, #1
 800309e:	f040 8090 	bne.w	80031c2 <_printf_float+0x1d6>
 80030a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030a6:	b011      	add	sp, #68	@ 0x44
 80030a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	4640      	mov	r0, r8
 80030b2:	4649      	mov	r1, r9
 80030b4:	f7fd fcaa 	bl	8000a0c <__aeabi_dcmpun>
 80030b8:	b148      	cbz	r0, 80030ce <_printf_float+0xe2>
 80030ba:	464b      	mov	r3, r9
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bfb8      	it	lt
 80030c0:	232d      	movlt	r3, #45	@ 0x2d
 80030c2:	4a80      	ldr	r2, [pc, #512]	@ (80032c4 <_printf_float+0x2d8>)
 80030c4:	bfb8      	it	lt
 80030c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80030ca:	4b7f      	ldr	r3, [pc, #508]	@ (80032c8 <_printf_float+0x2dc>)
 80030cc:	e7d3      	b.n	8003076 <_printf_float+0x8a>
 80030ce:	6863      	ldr	r3, [r4, #4]
 80030d0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	d13f      	bne.n	8003158 <_printf_float+0x16c>
 80030d8:	2306      	movs	r3, #6
 80030da:	6063      	str	r3, [r4, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80030e2:	6023      	str	r3, [r4, #0]
 80030e4:	9206      	str	r2, [sp, #24]
 80030e6:	aa0e      	add	r2, sp, #56	@ 0x38
 80030e8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80030ec:	aa0d      	add	r2, sp, #52	@ 0x34
 80030ee:	9203      	str	r2, [sp, #12]
 80030f0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80030f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80030f8:	6863      	ldr	r3, [r4, #4]
 80030fa:	4642      	mov	r2, r8
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	4628      	mov	r0, r5
 8003100:	464b      	mov	r3, r9
 8003102:	910a      	str	r1, [sp, #40]	@ 0x28
 8003104:	f7ff fed3 	bl	8002eae <__cvt>
 8003108:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800310a:	4680      	mov	r8, r0
 800310c:	2947      	cmp	r1, #71	@ 0x47
 800310e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003110:	d128      	bne.n	8003164 <_printf_float+0x178>
 8003112:	1cc8      	adds	r0, r1, #3
 8003114:	db02      	blt.n	800311c <_printf_float+0x130>
 8003116:	6863      	ldr	r3, [r4, #4]
 8003118:	4299      	cmp	r1, r3
 800311a:	dd40      	ble.n	800319e <_printf_float+0x1b2>
 800311c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003120:	fa5f fa8a 	uxtb.w	sl, sl
 8003124:	4652      	mov	r2, sl
 8003126:	3901      	subs	r1, #1
 8003128:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800312c:	910d      	str	r1, [sp, #52]	@ 0x34
 800312e:	f7ff ff22 	bl	8002f76 <__exponent>
 8003132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003134:	4681      	mov	r9, r0
 8003136:	1813      	adds	r3, r2, r0
 8003138:	2a01      	cmp	r2, #1
 800313a:	6123      	str	r3, [r4, #16]
 800313c:	dc02      	bgt.n	8003144 <_printf_float+0x158>
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	07d2      	lsls	r2, r2, #31
 8003142:	d501      	bpl.n	8003148 <_printf_float+0x15c>
 8003144:	3301      	adds	r3, #1
 8003146:	6123      	str	r3, [r4, #16]
 8003148:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800314c:	2b00      	cmp	r3, #0
 800314e:	d09e      	beq.n	800308e <_printf_float+0xa2>
 8003150:	232d      	movs	r3, #45	@ 0x2d
 8003152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003156:	e79a      	b.n	800308e <_printf_float+0xa2>
 8003158:	2947      	cmp	r1, #71	@ 0x47
 800315a:	d1bf      	bne.n	80030dc <_printf_float+0xf0>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1bd      	bne.n	80030dc <_printf_float+0xf0>
 8003160:	2301      	movs	r3, #1
 8003162:	e7ba      	b.n	80030da <_printf_float+0xee>
 8003164:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003168:	d9dc      	bls.n	8003124 <_printf_float+0x138>
 800316a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800316e:	d118      	bne.n	80031a2 <_printf_float+0x1b6>
 8003170:	2900      	cmp	r1, #0
 8003172:	6863      	ldr	r3, [r4, #4]
 8003174:	dd0b      	ble.n	800318e <_printf_float+0x1a2>
 8003176:	6121      	str	r1, [r4, #16]
 8003178:	b913      	cbnz	r3, 8003180 <_printf_float+0x194>
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	07d0      	lsls	r0, r2, #31
 800317e:	d502      	bpl.n	8003186 <_printf_float+0x19a>
 8003180:	3301      	adds	r3, #1
 8003182:	440b      	add	r3, r1
 8003184:	6123      	str	r3, [r4, #16]
 8003186:	f04f 0900 	mov.w	r9, #0
 800318a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800318c:	e7dc      	b.n	8003148 <_printf_float+0x15c>
 800318e:	b913      	cbnz	r3, 8003196 <_printf_float+0x1aa>
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	07d2      	lsls	r2, r2, #31
 8003194:	d501      	bpl.n	800319a <_printf_float+0x1ae>
 8003196:	3302      	adds	r3, #2
 8003198:	e7f4      	b.n	8003184 <_printf_float+0x198>
 800319a:	2301      	movs	r3, #1
 800319c:	e7f2      	b.n	8003184 <_printf_float+0x198>
 800319e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80031a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80031a4:	4299      	cmp	r1, r3
 80031a6:	db05      	blt.n	80031b4 <_printf_float+0x1c8>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	6121      	str	r1, [r4, #16]
 80031ac:	07d8      	lsls	r0, r3, #31
 80031ae:	d5ea      	bpl.n	8003186 <_printf_float+0x19a>
 80031b0:	1c4b      	adds	r3, r1, #1
 80031b2:	e7e7      	b.n	8003184 <_printf_float+0x198>
 80031b4:	2900      	cmp	r1, #0
 80031b6:	bfcc      	ite	gt
 80031b8:	2201      	movgt	r2, #1
 80031ba:	f1c1 0202 	rsble	r2, r1, #2
 80031be:	4413      	add	r3, r2
 80031c0:	e7e0      	b.n	8003184 <_printf_float+0x198>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	055a      	lsls	r2, r3, #21
 80031c6:	d407      	bmi.n	80031d8 <_printf_float+0x1ec>
 80031c8:	6923      	ldr	r3, [r4, #16]
 80031ca:	4642      	mov	r2, r8
 80031cc:	4631      	mov	r1, r6
 80031ce:	4628      	mov	r0, r5
 80031d0:	47b8      	blx	r7
 80031d2:	3001      	adds	r0, #1
 80031d4:	d12b      	bne.n	800322e <_printf_float+0x242>
 80031d6:	e764      	b.n	80030a2 <_printf_float+0xb6>
 80031d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80031dc:	f240 80dc 	bls.w	8003398 <_printf_float+0x3ac>
 80031e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80031e4:	2200      	movs	r2, #0
 80031e6:	2300      	movs	r3, #0
 80031e8:	f7fd fbde 	bl	80009a8 <__aeabi_dcmpeq>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d033      	beq.n	8003258 <_printf_float+0x26c>
 80031f0:	2301      	movs	r3, #1
 80031f2:	4631      	mov	r1, r6
 80031f4:	4628      	mov	r0, r5
 80031f6:	4a35      	ldr	r2, [pc, #212]	@ (80032cc <_printf_float+0x2e0>)
 80031f8:	47b8      	blx	r7
 80031fa:	3001      	adds	r0, #1
 80031fc:	f43f af51 	beq.w	80030a2 <_printf_float+0xb6>
 8003200:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003204:	4543      	cmp	r3, r8
 8003206:	db02      	blt.n	800320e <_printf_float+0x222>
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	07d8      	lsls	r0, r3, #31
 800320c:	d50f      	bpl.n	800322e <_printf_float+0x242>
 800320e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003212:	4631      	mov	r1, r6
 8003214:	4628      	mov	r0, r5
 8003216:	47b8      	blx	r7
 8003218:	3001      	adds	r0, #1
 800321a:	f43f af42 	beq.w	80030a2 <_printf_float+0xb6>
 800321e:	f04f 0900 	mov.w	r9, #0
 8003222:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003226:	f104 0a1a 	add.w	sl, r4, #26
 800322a:	45c8      	cmp	r8, r9
 800322c:	dc09      	bgt.n	8003242 <_printf_float+0x256>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	079b      	lsls	r3, r3, #30
 8003232:	f100 8102 	bmi.w	800343a <_printf_float+0x44e>
 8003236:	68e0      	ldr	r0, [r4, #12]
 8003238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800323a:	4298      	cmp	r0, r3
 800323c:	bfb8      	it	lt
 800323e:	4618      	movlt	r0, r3
 8003240:	e731      	b.n	80030a6 <_printf_float+0xba>
 8003242:	2301      	movs	r3, #1
 8003244:	4652      	mov	r2, sl
 8003246:	4631      	mov	r1, r6
 8003248:	4628      	mov	r0, r5
 800324a:	47b8      	blx	r7
 800324c:	3001      	adds	r0, #1
 800324e:	f43f af28 	beq.w	80030a2 <_printf_float+0xb6>
 8003252:	f109 0901 	add.w	r9, r9, #1
 8003256:	e7e8      	b.n	800322a <_printf_float+0x23e>
 8003258:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800325a:	2b00      	cmp	r3, #0
 800325c:	dc38      	bgt.n	80032d0 <_printf_float+0x2e4>
 800325e:	2301      	movs	r3, #1
 8003260:	4631      	mov	r1, r6
 8003262:	4628      	mov	r0, r5
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <_printf_float+0x2e0>)
 8003266:	47b8      	blx	r7
 8003268:	3001      	adds	r0, #1
 800326a:	f43f af1a 	beq.w	80030a2 <_printf_float+0xb6>
 800326e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003272:	ea59 0303 	orrs.w	r3, r9, r3
 8003276:	d102      	bne.n	800327e <_printf_float+0x292>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	07d9      	lsls	r1, r3, #31
 800327c:	d5d7      	bpl.n	800322e <_printf_float+0x242>
 800327e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003282:	4631      	mov	r1, r6
 8003284:	4628      	mov	r0, r5
 8003286:	47b8      	blx	r7
 8003288:	3001      	adds	r0, #1
 800328a:	f43f af0a 	beq.w	80030a2 <_printf_float+0xb6>
 800328e:	f04f 0a00 	mov.w	sl, #0
 8003292:	f104 0b1a 	add.w	fp, r4, #26
 8003296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003298:	425b      	negs	r3, r3
 800329a:	4553      	cmp	r3, sl
 800329c:	dc01      	bgt.n	80032a2 <_printf_float+0x2b6>
 800329e:	464b      	mov	r3, r9
 80032a0:	e793      	b.n	80031ca <_printf_float+0x1de>
 80032a2:	2301      	movs	r3, #1
 80032a4:	465a      	mov	r2, fp
 80032a6:	4631      	mov	r1, r6
 80032a8:	4628      	mov	r0, r5
 80032aa:	47b8      	blx	r7
 80032ac:	3001      	adds	r0, #1
 80032ae:	f43f aef8 	beq.w	80030a2 <_printf_float+0xb6>
 80032b2:	f10a 0a01 	add.w	sl, sl, #1
 80032b6:	e7ee      	b.n	8003296 <_printf_float+0x2aa>
 80032b8:	7fefffff 	.word	0x7fefffff
 80032bc:	08007d86 	.word	0x08007d86
 80032c0:	08007d8a 	.word	0x08007d8a
 80032c4:	08007d8e 	.word	0x08007d8e
 80032c8:	08007d92 	.word	0x08007d92
 80032cc:	08007d96 	.word	0x08007d96
 80032d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032d2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80032d6:	4553      	cmp	r3, sl
 80032d8:	bfa8      	it	ge
 80032da:	4653      	movge	r3, sl
 80032dc:	2b00      	cmp	r3, #0
 80032de:	4699      	mov	r9, r3
 80032e0:	dc36      	bgt.n	8003350 <_printf_float+0x364>
 80032e2:	f04f 0b00 	mov.w	fp, #0
 80032e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032ea:	f104 021a 	add.w	r2, r4, #26
 80032ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80032f2:	eba3 0309 	sub.w	r3, r3, r9
 80032f6:	455b      	cmp	r3, fp
 80032f8:	dc31      	bgt.n	800335e <_printf_float+0x372>
 80032fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032fc:	459a      	cmp	sl, r3
 80032fe:	dc3a      	bgt.n	8003376 <_printf_float+0x38a>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	07da      	lsls	r2, r3, #31
 8003304:	d437      	bmi.n	8003376 <_printf_float+0x38a>
 8003306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003308:	ebaa 0903 	sub.w	r9, sl, r3
 800330c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800330e:	ebaa 0303 	sub.w	r3, sl, r3
 8003312:	4599      	cmp	r9, r3
 8003314:	bfa8      	it	ge
 8003316:	4699      	movge	r9, r3
 8003318:	f1b9 0f00 	cmp.w	r9, #0
 800331c:	dc33      	bgt.n	8003386 <_printf_float+0x39a>
 800331e:	f04f 0800 	mov.w	r8, #0
 8003322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003326:	f104 0b1a 	add.w	fp, r4, #26
 800332a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800332c:	ebaa 0303 	sub.w	r3, sl, r3
 8003330:	eba3 0309 	sub.w	r3, r3, r9
 8003334:	4543      	cmp	r3, r8
 8003336:	f77f af7a 	ble.w	800322e <_printf_float+0x242>
 800333a:	2301      	movs	r3, #1
 800333c:	465a      	mov	r2, fp
 800333e:	4631      	mov	r1, r6
 8003340:	4628      	mov	r0, r5
 8003342:	47b8      	blx	r7
 8003344:	3001      	adds	r0, #1
 8003346:	f43f aeac 	beq.w	80030a2 <_printf_float+0xb6>
 800334a:	f108 0801 	add.w	r8, r8, #1
 800334e:	e7ec      	b.n	800332a <_printf_float+0x33e>
 8003350:	4642      	mov	r2, r8
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	47b8      	blx	r7
 8003358:	3001      	adds	r0, #1
 800335a:	d1c2      	bne.n	80032e2 <_printf_float+0x2f6>
 800335c:	e6a1      	b.n	80030a2 <_printf_float+0xb6>
 800335e:	2301      	movs	r3, #1
 8003360:	4631      	mov	r1, r6
 8003362:	4628      	mov	r0, r5
 8003364:	920a      	str	r2, [sp, #40]	@ 0x28
 8003366:	47b8      	blx	r7
 8003368:	3001      	adds	r0, #1
 800336a:	f43f ae9a 	beq.w	80030a2 <_printf_float+0xb6>
 800336e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003370:	f10b 0b01 	add.w	fp, fp, #1
 8003374:	e7bb      	b.n	80032ee <_printf_float+0x302>
 8003376:	4631      	mov	r1, r6
 8003378:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800337c:	4628      	mov	r0, r5
 800337e:	47b8      	blx	r7
 8003380:	3001      	adds	r0, #1
 8003382:	d1c0      	bne.n	8003306 <_printf_float+0x31a>
 8003384:	e68d      	b.n	80030a2 <_printf_float+0xb6>
 8003386:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003388:	464b      	mov	r3, r9
 800338a:	4631      	mov	r1, r6
 800338c:	4628      	mov	r0, r5
 800338e:	4442      	add	r2, r8
 8003390:	47b8      	blx	r7
 8003392:	3001      	adds	r0, #1
 8003394:	d1c3      	bne.n	800331e <_printf_float+0x332>
 8003396:	e684      	b.n	80030a2 <_printf_float+0xb6>
 8003398:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800339c:	f1ba 0f01 	cmp.w	sl, #1
 80033a0:	dc01      	bgt.n	80033a6 <_printf_float+0x3ba>
 80033a2:	07db      	lsls	r3, r3, #31
 80033a4:	d536      	bpl.n	8003414 <_printf_float+0x428>
 80033a6:	2301      	movs	r3, #1
 80033a8:	4642      	mov	r2, r8
 80033aa:	4631      	mov	r1, r6
 80033ac:	4628      	mov	r0, r5
 80033ae:	47b8      	blx	r7
 80033b0:	3001      	adds	r0, #1
 80033b2:	f43f ae76 	beq.w	80030a2 <_printf_float+0xb6>
 80033b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033ba:	4631      	mov	r1, r6
 80033bc:	4628      	mov	r0, r5
 80033be:	47b8      	blx	r7
 80033c0:	3001      	adds	r0, #1
 80033c2:	f43f ae6e 	beq.w	80030a2 <_printf_float+0xb6>
 80033c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80033ca:	2200      	movs	r2, #0
 80033cc:	2300      	movs	r3, #0
 80033ce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80033d2:	f7fd fae9 	bl	80009a8 <__aeabi_dcmpeq>
 80033d6:	b9c0      	cbnz	r0, 800340a <_printf_float+0x41e>
 80033d8:	4653      	mov	r3, sl
 80033da:	f108 0201 	add.w	r2, r8, #1
 80033de:	4631      	mov	r1, r6
 80033e0:	4628      	mov	r0, r5
 80033e2:	47b8      	blx	r7
 80033e4:	3001      	adds	r0, #1
 80033e6:	d10c      	bne.n	8003402 <_printf_float+0x416>
 80033e8:	e65b      	b.n	80030a2 <_printf_float+0xb6>
 80033ea:	2301      	movs	r3, #1
 80033ec:	465a      	mov	r2, fp
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	47b8      	blx	r7
 80033f4:	3001      	adds	r0, #1
 80033f6:	f43f ae54 	beq.w	80030a2 <_printf_float+0xb6>
 80033fa:	f108 0801 	add.w	r8, r8, #1
 80033fe:	45d0      	cmp	r8, sl
 8003400:	dbf3      	blt.n	80033ea <_printf_float+0x3fe>
 8003402:	464b      	mov	r3, r9
 8003404:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003408:	e6e0      	b.n	80031cc <_printf_float+0x1e0>
 800340a:	f04f 0800 	mov.w	r8, #0
 800340e:	f104 0b1a 	add.w	fp, r4, #26
 8003412:	e7f4      	b.n	80033fe <_printf_float+0x412>
 8003414:	2301      	movs	r3, #1
 8003416:	4642      	mov	r2, r8
 8003418:	e7e1      	b.n	80033de <_printf_float+0x3f2>
 800341a:	2301      	movs	r3, #1
 800341c:	464a      	mov	r2, r9
 800341e:	4631      	mov	r1, r6
 8003420:	4628      	mov	r0, r5
 8003422:	47b8      	blx	r7
 8003424:	3001      	adds	r0, #1
 8003426:	f43f ae3c 	beq.w	80030a2 <_printf_float+0xb6>
 800342a:	f108 0801 	add.w	r8, r8, #1
 800342e:	68e3      	ldr	r3, [r4, #12]
 8003430:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003432:	1a5b      	subs	r3, r3, r1
 8003434:	4543      	cmp	r3, r8
 8003436:	dcf0      	bgt.n	800341a <_printf_float+0x42e>
 8003438:	e6fd      	b.n	8003236 <_printf_float+0x24a>
 800343a:	f04f 0800 	mov.w	r8, #0
 800343e:	f104 0919 	add.w	r9, r4, #25
 8003442:	e7f4      	b.n	800342e <_printf_float+0x442>

08003444 <_printf_common>:
 8003444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003448:	4616      	mov	r6, r2
 800344a:	4698      	mov	r8, r3
 800344c:	688a      	ldr	r2, [r1, #8]
 800344e:	690b      	ldr	r3, [r1, #16]
 8003450:	4607      	mov	r7, r0
 8003452:	4293      	cmp	r3, r2
 8003454:	bfb8      	it	lt
 8003456:	4613      	movlt	r3, r2
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800345e:	460c      	mov	r4, r1
 8003460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003464:	b10a      	cbz	r2, 800346a <_printf_common+0x26>
 8003466:	3301      	adds	r3, #1
 8003468:	6033      	str	r3, [r6, #0]
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	0699      	lsls	r1, r3, #26
 800346e:	bf42      	ittt	mi
 8003470:	6833      	ldrmi	r3, [r6, #0]
 8003472:	3302      	addmi	r3, #2
 8003474:	6033      	strmi	r3, [r6, #0]
 8003476:	6825      	ldr	r5, [r4, #0]
 8003478:	f015 0506 	ands.w	r5, r5, #6
 800347c:	d106      	bne.n	800348c <_printf_common+0x48>
 800347e:	f104 0a19 	add.w	sl, r4, #25
 8003482:	68e3      	ldr	r3, [r4, #12]
 8003484:	6832      	ldr	r2, [r6, #0]
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	42ab      	cmp	r3, r5
 800348a:	dc2b      	bgt.n	80034e4 <_printf_common+0xa0>
 800348c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003490:	6822      	ldr	r2, [r4, #0]
 8003492:	3b00      	subs	r3, #0
 8003494:	bf18      	it	ne
 8003496:	2301      	movne	r3, #1
 8003498:	0692      	lsls	r2, r2, #26
 800349a:	d430      	bmi.n	80034fe <_printf_common+0xba>
 800349c:	4641      	mov	r1, r8
 800349e:	4638      	mov	r0, r7
 80034a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034a4:	47c8      	blx	r9
 80034a6:	3001      	adds	r0, #1
 80034a8:	d023      	beq.n	80034f2 <_printf_common+0xae>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	6922      	ldr	r2, [r4, #16]
 80034ae:	f003 0306 	and.w	r3, r3, #6
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	bf14      	ite	ne
 80034b6:	2500      	movne	r5, #0
 80034b8:	6833      	ldreq	r3, [r6, #0]
 80034ba:	f04f 0600 	mov.w	r6, #0
 80034be:	bf08      	it	eq
 80034c0:	68e5      	ldreq	r5, [r4, #12]
 80034c2:	f104 041a 	add.w	r4, r4, #26
 80034c6:	bf08      	it	eq
 80034c8:	1aed      	subeq	r5, r5, r3
 80034ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034ce:	bf08      	it	eq
 80034d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034d4:	4293      	cmp	r3, r2
 80034d6:	bfc4      	itt	gt
 80034d8:	1a9b      	subgt	r3, r3, r2
 80034da:	18ed      	addgt	r5, r5, r3
 80034dc:	42b5      	cmp	r5, r6
 80034de:	d11a      	bne.n	8003516 <_printf_common+0xd2>
 80034e0:	2000      	movs	r0, #0
 80034e2:	e008      	b.n	80034f6 <_printf_common+0xb2>
 80034e4:	2301      	movs	r3, #1
 80034e6:	4652      	mov	r2, sl
 80034e8:	4641      	mov	r1, r8
 80034ea:	4638      	mov	r0, r7
 80034ec:	47c8      	blx	r9
 80034ee:	3001      	adds	r0, #1
 80034f0:	d103      	bne.n	80034fa <_printf_common+0xb6>
 80034f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fa:	3501      	adds	r5, #1
 80034fc:	e7c1      	b.n	8003482 <_printf_common+0x3e>
 80034fe:	2030      	movs	r0, #48	@ 0x30
 8003500:	18e1      	adds	r1, r4, r3
 8003502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800350c:	4422      	add	r2, r4
 800350e:	3302      	adds	r3, #2
 8003510:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003514:	e7c2      	b.n	800349c <_printf_common+0x58>
 8003516:	2301      	movs	r3, #1
 8003518:	4622      	mov	r2, r4
 800351a:	4641      	mov	r1, r8
 800351c:	4638      	mov	r0, r7
 800351e:	47c8      	blx	r9
 8003520:	3001      	adds	r0, #1
 8003522:	d0e6      	beq.n	80034f2 <_printf_common+0xae>
 8003524:	3601      	adds	r6, #1
 8003526:	e7d9      	b.n	80034dc <_printf_common+0x98>

08003528 <_printf_i>:
 8003528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800352c:	7e0f      	ldrb	r7, [r1, #24]
 800352e:	4691      	mov	r9, r2
 8003530:	2f78      	cmp	r7, #120	@ 0x78
 8003532:	4680      	mov	r8, r0
 8003534:	460c      	mov	r4, r1
 8003536:	469a      	mov	sl, r3
 8003538:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800353a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800353e:	d807      	bhi.n	8003550 <_printf_i+0x28>
 8003540:	2f62      	cmp	r7, #98	@ 0x62
 8003542:	d80a      	bhi.n	800355a <_printf_i+0x32>
 8003544:	2f00      	cmp	r7, #0
 8003546:	f000 80d3 	beq.w	80036f0 <_printf_i+0x1c8>
 800354a:	2f58      	cmp	r7, #88	@ 0x58
 800354c:	f000 80ba 	beq.w	80036c4 <_printf_i+0x19c>
 8003550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003558:	e03a      	b.n	80035d0 <_printf_i+0xa8>
 800355a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800355e:	2b15      	cmp	r3, #21
 8003560:	d8f6      	bhi.n	8003550 <_printf_i+0x28>
 8003562:	a101      	add	r1, pc, #4	@ (adr r1, 8003568 <_printf_i+0x40>)
 8003564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003568:	080035c1 	.word	0x080035c1
 800356c:	080035d5 	.word	0x080035d5
 8003570:	08003551 	.word	0x08003551
 8003574:	08003551 	.word	0x08003551
 8003578:	08003551 	.word	0x08003551
 800357c:	08003551 	.word	0x08003551
 8003580:	080035d5 	.word	0x080035d5
 8003584:	08003551 	.word	0x08003551
 8003588:	08003551 	.word	0x08003551
 800358c:	08003551 	.word	0x08003551
 8003590:	08003551 	.word	0x08003551
 8003594:	080036d7 	.word	0x080036d7
 8003598:	080035ff 	.word	0x080035ff
 800359c:	08003691 	.word	0x08003691
 80035a0:	08003551 	.word	0x08003551
 80035a4:	08003551 	.word	0x08003551
 80035a8:	080036f9 	.word	0x080036f9
 80035ac:	08003551 	.word	0x08003551
 80035b0:	080035ff 	.word	0x080035ff
 80035b4:	08003551 	.word	0x08003551
 80035b8:	08003551 	.word	0x08003551
 80035bc:	08003699 	.word	0x08003699
 80035c0:	6833      	ldr	r3, [r6, #0]
 80035c2:	1d1a      	adds	r2, r3, #4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6032      	str	r2, [r6, #0]
 80035c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035d0:	2301      	movs	r3, #1
 80035d2:	e09e      	b.n	8003712 <_printf_i+0x1ea>
 80035d4:	6833      	ldr	r3, [r6, #0]
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	1d19      	adds	r1, r3, #4
 80035da:	6031      	str	r1, [r6, #0]
 80035dc:	0606      	lsls	r6, r0, #24
 80035de:	d501      	bpl.n	80035e4 <_printf_i+0xbc>
 80035e0:	681d      	ldr	r5, [r3, #0]
 80035e2:	e003      	b.n	80035ec <_printf_i+0xc4>
 80035e4:	0645      	lsls	r5, r0, #25
 80035e6:	d5fb      	bpl.n	80035e0 <_printf_i+0xb8>
 80035e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035ec:	2d00      	cmp	r5, #0
 80035ee:	da03      	bge.n	80035f8 <_printf_i+0xd0>
 80035f0:	232d      	movs	r3, #45	@ 0x2d
 80035f2:	426d      	negs	r5, r5
 80035f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035f8:	230a      	movs	r3, #10
 80035fa:	4859      	ldr	r0, [pc, #356]	@ (8003760 <_printf_i+0x238>)
 80035fc:	e011      	b.n	8003622 <_printf_i+0xfa>
 80035fe:	6821      	ldr	r1, [r4, #0]
 8003600:	6833      	ldr	r3, [r6, #0]
 8003602:	0608      	lsls	r0, r1, #24
 8003604:	f853 5b04 	ldr.w	r5, [r3], #4
 8003608:	d402      	bmi.n	8003610 <_printf_i+0xe8>
 800360a:	0649      	lsls	r1, r1, #25
 800360c:	bf48      	it	mi
 800360e:	b2ad      	uxthmi	r5, r5
 8003610:	2f6f      	cmp	r7, #111	@ 0x6f
 8003612:	6033      	str	r3, [r6, #0]
 8003614:	bf14      	ite	ne
 8003616:	230a      	movne	r3, #10
 8003618:	2308      	moveq	r3, #8
 800361a:	4851      	ldr	r0, [pc, #324]	@ (8003760 <_printf_i+0x238>)
 800361c:	2100      	movs	r1, #0
 800361e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003622:	6866      	ldr	r6, [r4, #4]
 8003624:	2e00      	cmp	r6, #0
 8003626:	bfa8      	it	ge
 8003628:	6821      	ldrge	r1, [r4, #0]
 800362a:	60a6      	str	r6, [r4, #8]
 800362c:	bfa4      	itt	ge
 800362e:	f021 0104 	bicge.w	r1, r1, #4
 8003632:	6021      	strge	r1, [r4, #0]
 8003634:	b90d      	cbnz	r5, 800363a <_printf_i+0x112>
 8003636:	2e00      	cmp	r6, #0
 8003638:	d04b      	beq.n	80036d2 <_printf_i+0x1aa>
 800363a:	4616      	mov	r6, r2
 800363c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003640:	fb03 5711 	mls	r7, r3, r1, r5
 8003644:	5dc7      	ldrb	r7, [r0, r7]
 8003646:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800364a:	462f      	mov	r7, r5
 800364c:	42bb      	cmp	r3, r7
 800364e:	460d      	mov	r5, r1
 8003650:	d9f4      	bls.n	800363c <_printf_i+0x114>
 8003652:	2b08      	cmp	r3, #8
 8003654:	d10b      	bne.n	800366e <_printf_i+0x146>
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	07df      	lsls	r7, r3, #31
 800365a:	d508      	bpl.n	800366e <_printf_i+0x146>
 800365c:	6923      	ldr	r3, [r4, #16]
 800365e:	6861      	ldr	r1, [r4, #4]
 8003660:	4299      	cmp	r1, r3
 8003662:	bfde      	ittt	le
 8003664:	2330      	movle	r3, #48	@ 0x30
 8003666:	f806 3c01 	strble.w	r3, [r6, #-1]
 800366a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800366e:	1b92      	subs	r2, r2, r6
 8003670:	6122      	str	r2, [r4, #16]
 8003672:	464b      	mov	r3, r9
 8003674:	4621      	mov	r1, r4
 8003676:	4640      	mov	r0, r8
 8003678:	f8cd a000 	str.w	sl, [sp]
 800367c:	aa03      	add	r2, sp, #12
 800367e:	f7ff fee1 	bl	8003444 <_printf_common>
 8003682:	3001      	adds	r0, #1
 8003684:	d14a      	bne.n	800371c <_printf_i+0x1f4>
 8003686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800368a:	b004      	add	sp, #16
 800368c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	f043 0320 	orr.w	r3, r3, #32
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	2778      	movs	r7, #120	@ 0x78
 800369a:	4832      	ldr	r0, [pc, #200]	@ (8003764 <_printf_i+0x23c>)
 800369c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	6831      	ldr	r1, [r6, #0]
 80036a4:	061f      	lsls	r7, r3, #24
 80036a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80036aa:	d402      	bmi.n	80036b2 <_printf_i+0x18a>
 80036ac:	065f      	lsls	r7, r3, #25
 80036ae:	bf48      	it	mi
 80036b0:	b2ad      	uxthmi	r5, r5
 80036b2:	6031      	str	r1, [r6, #0]
 80036b4:	07d9      	lsls	r1, r3, #31
 80036b6:	bf44      	itt	mi
 80036b8:	f043 0320 	orrmi.w	r3, r3, #32
 80036bc:	6023      	strmi	r3, [r4, #0]
 80036be:	b11d      	cbz	r5, 80036c8 <_printf_i+0x1a0>
 80036c0:	2310      	movs	r3, #16
 80036c2:	e7ab      	b.n	800361c <_printf_i+0xf4>
 80036c4:	4826      	ldr	r0, [pc, #152]	@ (8003760 <_printf_i+0x238>)
 80036c6:	e7e9      	b.n	800369c <_printf_i+0x174>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	f023 0320 	bic.w	r3, r3, #32
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	e7f6      	b.n	80036c0 <_printf_i+0x198>
 80036d2:	4616      	mov	r6, r2
 80036d4:	e7bd      	b.n	8003652 <_printf_i+0x12a>
 80036d6:	6833      	ldr	r3, [r6, #0]
 80036d8:	6825      	ldr	r5, [r4, #0]
 80036da:	1d18      	adds	r0, r3, #4
 80036dc:	6961      	ldr	r1, [r4, #20]
 80036de:	6030      	str	r0, [r6, #0]
 80036e0:	062e      	lsls	r6, r5, #24
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	d501      	bpl.n	80036ea <_printf_i+0x1c2>
 80036e6:	6019      	str	r1, [r3, #0]
 80036e8:	e002      	b.n	80036f0 <_printf_i+0x1c8>
 80036ea:	0668      	lsls	r0, r5, #25
 80036ec:	d5fb      	bpl.n	80036e6 <_printf_i+0x1be>
 80036ee:	8019      	strh	r1, [r3, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	4616      	mov	r6, r2
 80036f4:	6123      	str	r3, [r4, #16]
 80036f6:	e7bc      	b.n	8003672 <_printf_i+0x14a>
 80036f8:	6833      	ldr	r3, [r6, #0]
 80036fa:	2100      	movs	r1, #0
 80036fc:	1d1a      	adds	r2, r3, #4
 80036fe:	6032      	str	r2, [r6, #0]
 8003700:	681e      	ldr	r6, [r3, #0]
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	4630      	mov	r0, r6
 8003706:	f000 f9a8 	bl	8003a5a <memchr>
 800370a:	b108      	cbz	r0, 8003710 <_printf_i+0x1e8>
 800370c:	1b80      	subs	r0, r0, r6
 800370e:	6060      	str	r0, [r4, #4]
 8003710:	6863      	ldr	r3, [r4, #4]
 8003712:	6123      	str	r3, [r4, #16]
 8003714:	2300      	movs	r3, #0
 8003716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800371a:	e7aa      	b.n	8003672 <_printf_i+0x14a>
 800371c:	4632      	mov	r2, r6
 800371e:	4649      	mov	r1, r9
 8003720:	4640      	mov	r0, r8
 8003722:	6923      	ldr	r3, [r4, #16]
 8003724:	47d0      	blx	sl
 8003726:	3001      	adds	r0, #1
 8003728:	d0ad      	beq.n	8003686 <_printf_i+0x15e>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	079b      	lsls	r3, r3, #30
 800372e:	d413      	bmi.n	8003758 <_printf_i+0x230>
 8003730:	68e0      	ldr	r0, [r4, #12]
 8003732:	9b03      	ldr	r3, [sp, #12]
 8003734:	4298      	cmp	r0, r3
 8003736:	bfb8      	it	lt
 8003738:	4618      	movlt	r0, r3
 800373a:	e7a6      	b.n	800368a <_printf_i+0x162>
 800373c:	2301      	movs	r3, #1
 800373e:	4632      	mov	r2, r6
 8003740:	4649      	mov	r1, r9
 8003742:	4640      	mov	r0, r8
 8003744:	47d0      	blx	sl
 8003746:	3001      	adds	r0, #1
 8003748:	d09d      	beq.n	8003686 <_printf_i+0x15e>
 800374a:	3501      	adds	r5, #1
 800374c:	68e3      	ldr	r3, [r4, #12]
 800374e:	9903      	ldr	r1, [sp, #12]
 8003750:	1a5b      	subs	r3, r3, r1
 8003752:	42ab      	cmp	r3, r5
 8003754:	dcf2      	bgt.n	800373c <_printf_i+0x214>
 8003756:	e7eb      	b.n	8003730 <_printf_i+0x208>
 8003758:	2500      	movs	r5, #0
 800375a:	f104 0619 	add.w	r6, r4, #25
 800375e:	e7f5      	b.n	800374c <_printf_i+0x224>
 8003760:	08007d98 	.word	0x08007d98
 8003764:	08007da9 	.word	0x08007da9

08003768 <siprintf>:
 8003768:	b40e      	push	{r1, r2, r3}
 800376a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800376e:	b500      	push	{lr}
 8003770:	b09c      	sub	sp, #112	@ 0x70
 8003772:	ab1d      	add	r3, sp, #116	@ 0x74
 8003774:	9002      	str	r0, [sp, #8]
 8003776:	9006      	str	r0, [sp, #24]
 8003778:	9107      	str	r1, [sp, #28]
 800377a:	9104      	str	r1, [sp, #16]
 800377c:	4808      	ldr	r0, [pc, #32]	@ (80037a0 <siprintf+0x38>)
 800377e:	4909      	ldr	r1, [pc, #36]	@ (80037a4 <siprintf+0x3c>)
 8003780:	f853 2b04 	ldr.w	r2, [r3], #4
 8003784:	9105      	str	r1, [sp, #20]
 8003786:	6800      	ldr	r0, [r0, #0]
 8003788:	a902      	add	r1, sp, #8
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	f001 f820 	bl	80047d0 <_svfiprintf_r>
 8003790:	2200      	movs	r2, #0
 8003792:	9b02      	ldr	r3, [sp, #8]
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	b01c      	add	sp, #112	@ 0x70
 8003798:	f85d eb04 	ldr.w	lr, [sp], #4
 800379c:	b003      	add	sp, #12
 800379e:	4770      	bx	lr
 80037a0:	2000001c 	.word	0x2000001c
 80037a4:	ffff0208 	.word	0xffff0208

080037a8 <std>:
 80037a8:	2300      	movs	r3, #0
 80037aa:	b510      	push	{r4, lr}
 80037ac:	4604      	mov	r4, r0
 80037ae:	e9c0 3300 	strd	r3, r3, [r0]
 80037b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037b6:	6083      	str	r3, [r0, #8]
 80037b8:	8181      	strh	r1, [r0, #12]
 80037ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80037bc:	81c2      	strh	r2, [r0, #14]
 80037be:	6183      	str	r3, [r0, #24]
 80037c0:	4619      	mov	r1, r3
 80037c2:	2208      	movs	r2, #8
 80037c4:	305c      	adds	r0, #92	@ 0x5c
 80037c6:	f000 f90f 	bl	80039e8 <memset>
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <std+0x58>)
 80037cc:	6224      	str	r4, [r4, #32]
 80037ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80037d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <std+0x5c>)
 80037d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <std+0x60>)
 80037d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037d8:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <std+0x64>)
 80037da:	6323      	str	r3, [r4, #48]	@ 0x30
 80037dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <std+0x68>)
 80037de:	429c      	cmp	r4, r3
 80037e0:	d006      	beq.n	80037f0 <std+0x48>
 80037e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037e6:	4294      	cmp	r4, r2
 80037e8:	d002      	beq.n	80037f0 <std+0x48>
 80037ea:	33d0      	adds	r3, #208	@ 0xd0
 80037ec:	429c      	cmp	r4, r3
 80037ee:	d105      	bne.n	80037fc <std+0x54>
 80037f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f8:	f000 b92c 	b.w	8003a54 <__retarget_lock_init_recursive>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	bf00      	nop
 8003800:	08005385 	.word	0x08005385
 8003804:	080053a7 	.word	0x080053a7
 8003808:	080053df 	.word	0x080053df
 800380c:	08005403 	.word	0x08005403
 8003810:	20001604 	.word	0x20001604

08003814 <stdio_exit_handler>:
 8003814:	4a02      	ldr	r2, [pc, #8]	@ (8003820 <stdio_exit_handler+0xc>)
 8003816:	4903      	ldr	r1, [pc, #12]	@ (8003824 <stdio_exit_handler+0x10>)
 8003818:	4803      	ldr	r0, [pc, #12]	@ (8003828 <stdio_exit_handler+0x14>)
 800381a:	f000 b869 	b.w	80038f0 <_fwalk_sglue>
 800381e:	bf00      	nop
 8003820:	20000010 	.word	0x20000010
 8003824:	08004c1d 	.word	0x08004c1d
 8003828:	20000020 	.word	0x20000020

0800382c <cleanup_stdio>:
 800382c:	6841      	ldr	r1, [r0, #4]
 800382e:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <cleanup_stdio+0x34>)
 8003830:	b510      	push	{r4, lr}
 8003832:	4299      	cmp	r1, r3
 8003834:	4604      	mov	r4, r0
 8003836:	d001      	beq.n	800383c <cleanup_stdio+0x10>
 8003838:	f001 f9f0 	bl	8004c1c <_fflush_r>
 800383c:	68a1      	ldr	r1, [r4, #8]
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <cleanup_stdio+0x38>)
 8003840:	4299      	cmp	r1, r3
 8003842:	d002      	beq.n	800384a <cleanup_stdio+0x1e>
 8003844:	4620      	mov	r0, r4
 8003846:	f001 f9e9 	bl	8004c1c <_fflush_r>
 800384a:	68e1      	ldr	r1, [r4, #12]
 800384c:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <cleanup_stdio+0x3c>)
 800384e:	4299      	cmp	r1, r3
 8003850:	d004      	beq.n	800385c <cleanup_stdio+0x30>
 8003852:	4620      	mov	r0, r4
 8003854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003858:	f001 b9e0 	b.w	8004c1c <_fflush_r>
 800385c:	bd10      	pop	{r4, pc}
 800385e:	bf00      	nop
 8003860:	20001604 	.word	0x20001604
 8003864:	2000166c 	.word	0x2000166c
 8003868:	200016d4 	.word	0x200016d4

0800386c <global_stdio_init.part.0>:
 800386c:	b510      	push	{r4, lr}
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <global_stdio_init.part.0+0x30>)
 8003870:	4c0b      	ldr	r4, [pc, #44]	@ (80038a0 <global_stdio_init.part.0+0x34>)
 8003872:	4a0c      	ldr	r2, [pc, #48]	@ (80038a4 <global_stdio_init.part.0+0x38>)
 8003874:	4620      	mov	r0, r4
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	2104      	movs	r1, #4
 800387a:	2200      	movs	r2, #0
 800387c:	f7ff ff94 	bl	80037a8 <std>
 8003880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003884:	2201      	movs	r2, #1
 8003886:	2109      	movs	r1, #9
 8003888:	f7ff ff8e 	bl	80037a8 <std>
 800388c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003890:	2202      	movs	r2, #2
 8003892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003896:	2112      	movs	r1, #18
 8003898:	f7ff bf86 	b.w	80037a8 <std>
 800389c:	2000173c 	.word	0x2000173c
 80038a0:	20001604 	.word	0x20001604
 80038a4:	08003815 	.word	0x08003815

080038a8 <__sfp_lock_acquire>:
 80038a8:	4801      	ldr	r0, [pc, #4]	@ (80038b0 <__sfp_lock_acquire+0x8>)
 80038aa:	f000 b8d4 	b.w	8003a56 <__retarget_lock_acquire_recursive>
 80038ae:	bf00      	nop
 80038b0:	20001741 	.word	0x20001741

080038b4 <__sfp_lock_release>:
 80038b4:	4801      	ldr	r0, [pc, #4]	@ (80038bc <__sfp_lock_release+0x8>)
 80038b6:	f000 b8cf 	b.w	8003a58 <__retarget_lock_release_recursive>
 80038ba:	bf00      	nop
 80038bc:	20001741 	.word	0x20001741

080038c0 <__sinit>:
 80038c0:	b510      	push	{r4, lr}
 80038c2:	4604      	mov	r4, r0
 80038c4:	f7ff fff0 	bl	80038a8 <__sfp_lock_acquire>
 80038c8:	6a23      	ldr	r3, [r4, #32]
 80038ca:	b11b      	cbz	r3, 80038d4 <__sinit+0x14>
 80038cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d0:	f7ff bff0 	b.w	80038b4 <__sfp_lock_release>
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <__sinit+0x28>)
 80038d6:	6223      	str	r3, [r4, #32]
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <__sinit+0x2c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f5      	bne.n	80038cc <__sinit+0xc>
 80038e0:	f7ff ffc4 	bl	800386c <global_stdio_init.part.0>
 80038e4:	e7f2      	b.n	80038cc <__sinit+0xc>
 80038e6:	bf00      	nop
 80038e8:	0800382d 	.word	0x0800382d
 80038ec:	2000173c 	.word	0x2000173c

080038f0 <_fwalk_sglue>:
 80038f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038f4:	4607      	mov	r7, r0
 80038f6:	4688      	mov	r8, r1
 80038f8:	4614      	mov	r4, r2
 80038fa:	2600      	movs	r6, #0
 80038fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003900:	f1b9 0901 	subs.w	r9, r9, #1
 8003904:	d505      	bpl.n	8003912 <_fwalk_sglue+0x22>
 8003906:	6824      	ldr	r4, [r4, #0]
 8003908:	2c00      	cmp	r4, #0
 800390a:	d1f7      	bne.n	80038fc <_fwalk_sglue+0xc>
 800390c:	4630      	mov	r0, r6
 800390e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003912:	89ab      	ldrh	r3, [r5, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d907      	bls.n	8003928 <_fwalk_sglue+0x38>
 8003918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800391c:	3301      	adds	r3, #1
 800391e:	d003      	beq.n	8003928 <_fwalk_sglue+0x38>
 8003920:	4629      	mov	r1, r5
 8003922:	4638      	mov	r0, r7
 8003924:	47c0      	blx	r8
 8003926:	4306      	orrs	r6, r0
 8003928:	3568      	adds	r5, #104	@ 0x68
 800392a:	e7e9      	b.n	8003900 <_fwalk_sglue+0x10>

0800392c <_puts_r>:
 800392c:	6a03      	ldr	r3, [r0, #32]
 800392e:	b570      	push	{r4, r5, r6, lr}
 8003930:	4605      	mov	r5, r0
 8003932:	460e      	mov	r6, r1
 8003934:	6884      	ldr	r4, [r0, #8]
 8003936:	b90b      	cbnz	r3, 800393c <_puts_r+0x10>
 8003938:	f7ff ffc2 	bl	80038c0 <__sinit>
 800393c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800393e:	07db      	lsls	r3, r3, #31
 8003940:	d405      	bmi.n	800394e <_puts_r+0x22>
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	0598      	lsls	r0, r3, #22
 8003946:	d402      	bmi.n	800394e <_puts_r+0x22>
 8003948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800394a:	f000 f884 	bl	8003a56 <__retarget_lock_acquire_recursive>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	0719      	lsls	r1, r3, #28
 8003952:	d502      	bpl.n	800395a <_puts_r+0x2e>
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d135      	bne.n	80039c6 <_puts_r+0x9a>
 800395a:	4621      	mov	r1, r4
 800395c:	4628      	mov	r0, r5
 800395e:	f001 fdc1 	bl	80054e4 <__swsetup_r>
 8003962:	b380      	cbz	r0, 80039c6 <_puts_r+0x9a>
 8003964:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800396a:	07da      	lsls	r2, r3, #31
 800396c:	d405      	bmi.n	800397a <_puts_r+0x4e>
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	059b      	lsls	r3, r3, #22
 8003972:	d402      	bmi.n	800397a <_puts_r+0x4e>
 8003974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003976:	f000 f86f 	bl	8003a58 <__retarget_lock_release_recursive>
 800397a:	4628      	mov	r0, r5
 800397c:	bd70      	pop	{r4, r5, r6, pc}
 800397e:	2b00      	cmp	r3, #0
 8003980:	da04      	bge.n	800398c <_puts_r+0x60>
 8003982:	69a2      	ldr	r2, [r4, #24]
 8003984:	429a      	cmp	r2, r3
 8003986:	dc17      	bgt.n	80039b8 <_puts_r+0x8c>
 8003988:	290a      	cmp	r1, #10
 800398a:	d015      	beq.n	80039b8 <_puts_r+0x8c>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	6022      	str	r2, [r4, #0]
 8003992:	7019      	strb	r1, [r3, #0]
 8003994:	68a3      	ldr	r3, [r4, #8]
 8003996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800399a:	3b01      	subs	r3, #1
 800399c:	60a3      	str	r3, [r4, #8]
 800399e:	2900      	cmp	r1, #0
 80039a0:	d1ed      	bne.n	800397e <_puts_r+0x52>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da11      	bge.n	80039ca <_puts_r+0x9e>
 80039a6:	4622      	mov	r2, r4
 80039a8:	210a      	movs	r1, #10
 80039aa:	4628      	mov	r0, r5
 80039ac:	f001 fd5b 	bl	8005466 <__swbuf_r>
 80039b0:	3001      	adds	r0, #1
 80039b2:	d0d7      	beq.n	8003964 <_puts_r+0x38>
 80039b4:	250a      	movs	r5, #10
 80039b6:	e7d7      	b.n	8003968 <_puts_r+0x3c>
 80039b8:	4622      	mov	r2, r4
 80039ba:	4628      	mov	r0, r5
 80039bc:	f001 fd53 	bl	8005466 <__swbuf_r>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d1e7      	bne.n	8003994 <_puts_r+0x68>
 80039c4:	e7ce      	b.n	8003964 <_puts_r+0x38>
 80039c6:	3e01      	subs	r6, #1
 80039c8:	e7e4      	b.n	8003994 <_puts_r+0x68>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	6022      	str	r2, [r4, #0]
 80039d0:	220a      	movs	r2, #10
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e7ee      	b.n	80039b4 <_puts_r+0x88>
	...

080039d8 <puts>:
 80039d8:	4b02      	ldr	r3, [pc, #8]	@ (80039e4 <puts+0xc>)
 80039da:	4601      	mov	r1, r0
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	f7ff bfa5 	b.w	800392c <_puts_r>
 80039e2:	bf00      	nop
 80039e4:	2000001c 	.word	0x2000001c

080039e8 <memset>:
 80039e8:	4603      	mov	r3, r0
 80039ea:	4402      	add	r2, r0
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d100      	bne.n	80039f2 <memset+0xa>
 80039f0:	4770      	bx	lr
 80039f2:	f803 1b01 	strb.w	r1, [r3], #1
 80039f6:	e7f9      	b.n	80039ec <memset+0x4>

080039f8 <_localeconv_r>:
 80039f8:	4800      	ldr	r0, [pc, #0]	@ (80039fc <_localeconv_r+0x4>)
 80039fa:	4770      	bx	lr
 80039fc:	2000015c 	.word	0x2000015c

08003a00 <__errno>:
 8003a00:	4b01      	ldr	r3, [pc, #4]	@ (8003a08 <__errno+0x8>)
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	2000001c 	.word	0x2000001c

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	2600      	movs	r6, #0
 8003a10:	4d0c      	ldr	r5, [pc, #48]	@ (8003a44 <__libc_init_array+0x38>)
 8003a12:	4c0d      	ldr	r4, [pc, #52]	@ (8003a48 <__libc_init_array+0x3c>)
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	42a6      	cmp	r6, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	f002 f8f8 	bl	8005c10 <_init>
 8003a20:	2600      	movs	r6, #0
 8003a22:	4d0a      	ldr	r5, [pc, #40]	@ (8003a4c <__libc_init_array+0x40>)
 8003a24:	4c0a      	ldr	r4, [pc, #40]	@ (8003a50 <__libc_init_array+0x44>)
 8003a26:	1b64      	subs	r4, r4, r5
 8003a28:	10a4      	asrs	r4, r4, #2
 8003a2a:	42a6      	cmp	r6, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a34:	4798      	blx	r3
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3e:	4798      	blx	r3
 8003a40:	3601      	adds	r6, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08008100 	.word	0x08008100
 8003a48:	08008100 	.word	0x08008100
 8003a4c:	08008100 	.word	0x08008100
 8003a50:	08008104 	.word	0x08008104

08003a54 <__retarget_lock_init_recursive>:
 8003a54:	4770      	bx	lr

08003a56 <__retarget_lock_acquire_recursive>:
 8003a56:	4770      	bx	lr

08003a58 <__retarget_lock_release_recursive>:
 8003a58:	4770      	bx	lr

08003a5a <memchr>:
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	b2c9      	uxtb	r1, r1
 8003a60:	4402      	add	r2, r0
 8003a62:	4293      	cmp	r3, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	d101      	bne.n	8003a6c <memchr+0x12>
 8003a68:	2000      	movs	r0, #0
 8003a6a:	e003      	b.n	8003a74 <memchr+0x1a>
 8003a6c:	7804      	ldrb	r4, [r0, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	428c      	cmp	r4, r1
 8003a72:	d1f6      	bne.n	8003a62 <memchr+0x8>
 8003a74:	bd10      	pop	{r4, pc}

08003a76 <quorem>:
 8003a76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a7a:	6903      	ldr	r3, [r0, #16]
 8003a7c:	690c      	ldr	r4, [r1, #16]
 8003a7e:	4607      	mov	r7, r0
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	db7e      	blt.n	8003b82 <quorem+0x10c>
 8003a84:	3c01      	subs	r4, #1
 8003a86:	00a3      	lsls	r3, r4, #2
 8003a88:	f100 0514 	add.w	r5, r0, #20
 8003a8c:	f101 0814 	add.w	r8, r1, #20
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003aac:	d32e      	bcc.n	8003b0c <quorem+0x96>
 8003aae:	f04f 0a00 	mov.w	sl, #0
 8003ab2:	46c4      	mov	ip, r8
 8003ab4:	46ae      	mov	lr, r5
 8003ab6:	46d3      	mov	fp, sl
 8003ab8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003abc:	b298      	uxth	r0, r3
 8003abe:	fb06 a000 	mla	r0, r6, r0, sl
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	0c02      	lsrs	r2, r0, #16
 8003ac6:	fb06 2303 	mla	r3, r6, r3, r2
 8003aca:	f8de 2000 	ldr.w	r2, [lr]
 8003ace:	b280      	uxth	r0, r0
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	1a12      	subs	r2, r2, r0
 8003ad4:	445a      	add	r2, fp
 8003ad6:	f8de 0000 	ldr.w	r0, [lr]
 8003ada:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003ae4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003ae8:	b292      	uxth	r2, r2
 8003aea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003aee:	45e1      	cmp	r9, ip
 8003af0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003af4:	f84e 2b04 	str.w	r2, [lr], #4
 8003af8:	d2de      	bcs.n	8003ab8 <quorem+0x42>
 8003afa:	9b00      	ldr	r3, [sp, #0]
 8003afc:	58eb      	ldr	r3, [r5, r3]
 8003afe:	b92b      	cbnz	r3, 8003b0c <quorem+0x96>
 8003b00:	9b01      	ldr	r3, [sp, #4]
 8003b02:	3b04      	subs	r3, #4
 8003b04:	429d      	cmp	r5, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	d32f      	bcc.n	8003b6a <quorem+0xf4>
 8003b0a:	613c      	str	r4, [r7, #16]
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f001 fb31 	bl	8005174 <__mcmp>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	db25      	blt.n	8003b62 <quorem+0xec>
 8003b16:	4629      	mov	r1, r5
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8003b1e:	f8d1 c000 	ldr.w	ip, [r1]
 8003b22:	fa1f fe82 	uxth.w	lr, r2
 8003b26:	fa1f f38c 	uxth.w	r3, ip
 8003b2a:	eba3 030e 	sub.w	r3, r3, lr
 8003b2e:	4403      	add	r3, r0
 8003b30:	0c12      	lsrs	r2, r2, #16
 8003b32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003b36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b40:	45c1      	cmp	r9, r8
 8003b42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003b46:	f841 3b04 	str.w	r3, [r1], #4
 8003b4a:	d2e6      	bcs.n	8003b1a <quorem+0xa4>
 8003b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b54:	b922      	cbnz	r2, 8003b60 <quorem+0xea>
 8003b56:	3b04      	subs	r3, #4
 8003b58:	429d      	cmp	r5, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	d30b      	bcc.n	8003b76 <quorem+0x100>
 8003b5e:	613c      	str	r4, [r7, #16]
 8003b60:	3601      	adds	r6, #1
 8003b62:	4630      	mov	r0, r6
 8003b64:	b003      	add	sp, #12
 8003b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	3b04      	subs	r3, #4
 8003b6e:	2a00      	cmp	r2, #0
 8003b70:	d1cb      	bne.n	8003b0a <quorem+0x94>
 8003b72:	3c01      	subs	r4, #1
 8003b74:	e7c6      	b.n	8003b04 <quorem+0x8e>
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	3b04      	subs	r3, #4
 8003b7a:	2a00      	cmp	r2, #0
 8003b7c:	d1ef      	bne.n	8003b5e <quorem+0xe8>
 8003b7e:	3c01      	subs	r4, #1
 8003b80:	e7ea      	b.n	8003b58 <quorem+0xe2>
 8003b82:	2000      	movs	r0, #0
 8003b84:	e7ee      	b.n	8003b64 <quorem+0xee>
	...

08003b88 <_dtoa_r>:
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	69c7      	ldr	r7, [r0, #28]
 8003b92:	b097      	sub	sp, #92	@ 0x5c
 8003b94:	4683      	mov	fp, r0
 8003b96:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003b9a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003b9c:	b97f      	cbnz	r7, 8003bbe <_dtoa_r+0x36>
 8003b9e:	2010      	movs	r0, #16
 8003ba0:	f000 ff12 	bl	80049c8 <malloc>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f8cb 001c 	str.w	r0, [fp, #28]
 8003baa:	b920      	cbnz	r0, 8003bb6 <_dtoa_r+0x2e>
 8003bac:	21ef      	movs	r1, #239	@ 0xef
 8003bae:	4ba8      	ldr	r3, [pc, #672]	@ (8003e50 <_dtoa_r+0x2c8>)
 8003bb0:	48a8      	ldr	r0, [pc, #672]	@ (8003e54 <_dtoa_r+0x2cc>)
 8003bb2:	f001 fdef 	bl	8005794 <__assert_func>
 8003bb6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003bba:	6007      	str	r7, [r0, #0]
 8003bbc:	60c7      	str	r7, [r0, #12]
 8003bbe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	b159      	cbz	r1, 8003bde <_dtoa_r+0x56>
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	2301      	movs	r3, #1
 8003bca:	4093      	lsls	r3, r2
 8003bcc:	604a      	str	r2, [r1, #4]
 8003bce:	608b      	str	r3, [r1, #8]
 8003bd0:	4658      	mov	r0, fp
 8003bd2:	f001 f897 	bl	8004d04 <_Bfree>
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	1e2b      	subs	r3, r5, #0
 8003be0:	bfaf      	iteee	ge
 8003be2:	2300      	movge	r3, #0
 8003be4:	2201      	movlt	r2, #1
 8003be6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003bea:	9303      	strlt	r3, [sp, #12]
 8003bec:	bfa8      	it	ge
 8003bee:	6033      	strge	r3, [r6, #0]
 8003bf0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003bf4:	4b98      	ldr	r3, [pc, #608]	@ (8003e58 <_dtoa_r+0x2d0>)
 8003bf6:	bfb8      	it	lt
 8003bf8:	6032      	strlt	r2, [r6, #0]
 8003bfa:	ea33 0308 	bics.w	r3, r3, r8
 8003bfe:	d112      	bne.n	8003c26 <_dtoa_r+0x9e>
 8003c00:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003c04:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003c0c:	4323      	orrs	r3, r4
 8003c0e:	f000 8550 	beq.w	80046b2 <_dtoa_r+0xb2a>
 8003c12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c14:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003e5c <_dtoa_r+0x2d4>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8552 	beq.w	80046c2 <_dtoa_r+0xb3a>
 8003c1e:	f10a 0303 	add.w	r3, sl, #3
 8003c22:	f000 bd4c 	b.w	80046be <_dtoa_r+0xb36>
 8003c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c2a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c32:	2200      	movs	r2, #0
 8003c34:	2300      	movs	r3, #0
 8003c36:	f7fc feb7 	bl	80009a8 <__aeabi_dcmpeq>
 8003c3a:	4607      	mov	r7, r0
 8003c3c:	b158      	cbz	r0, 8003c56 <_dtoa_r+0xce>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c46:	b113      	cbz	r3, 8003c4e <_dtoa_r+0xc6>
 8003c48:	4b85      	ldr	r3, [pc, #532]	@ (8003e60 <_dtoa_r+0x2d8>)
 8003c4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003e64 <_dtoa_r+0x2dc>
 8003c52:	f000 bd36 	b.w	80046c2 <_dtoa_r+0xb3a>
 8003c56:	ab14      	add	r3, sp, #80	@ 0x50
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	ab15      	add	r3, sp, #84	@ 0x54
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4658      	mov	r0, fp
 8003c60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003c64:	f001 fb36 	bl	80052d4 <__d2b>
 8003c68:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003c6c:	4681      	mov	r9, r0
 8003c6e:	2e00      	cmp	r6, #0
 8003c70:	d077      	beq.n	8003d62 <_dtoa_r+0x1da>
 8003c72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c78:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c80:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003c84:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003c88:	9712      	str	r7, [sp, #72]	@ 0x48
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <_dtoa_r+0x2e0>)
 8003c90:	f7fc fa6a 	bl	8000168 <__aeabi_dsub>
 8003c94:	a368      	add	r3, pc, #416	@ (adr r3, 8003e38 <_dtoa_r+0x2b0>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f7fc fc1d 	bl	80004d8 <__aeabi_dmul>
 8003c9e:	a368      	add	r3, pc, #416	@ (adr r3, 8003e40 <_dtoa_r+0x2b8>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc fa62 	bl	800016c <__adddf3>
 8003ca8:	4604      	mov	r4, r0
 8003caa:	4630      	mov	r0, r6
 8003cac:	460d      	mov	r5, r1
 8003cae:	f7fc fba9 	bl	8000404 <__aeabi_i2d>
 8003cb2:	a365      	add	r3, pc, #404	@ (adr r3, 8003e48 <_dtoa_r+0x2c0>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fc0e 	bl	80004d8 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc fa52 	bl	800016c <__adddf3>
 8003cc8:	4604      	mov	r4, r0
 8003cca:	460d      	mov	r5, r1
 8003ccc:	f7fc feb4 	bl	8000a38 <__aeabi_d2iz>
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4607      	mov	r7, r0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f7fc fe6f 	bl	80009bc <__aeabi_dcmplt>
 8003cde:	b140      	cbz	r0, 8003cf2 <_dtoa_r+0x16a>
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	f7fc fb8f 	bl	8000404 <__aeabi_i2d>
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f7fc fe5d 	bl	80009a8 <__aeabi_dcmpeq>
 8003cee:	b900      	cbnz	r0, 8003cf2 <_dtoa_r+0x16a>
 8003cf0:	3f01      	subs	r7, #1
 8003cf2:	2f16      	cmp	r7, #22
 8003cf4:	d853      	bhi.n	8003d9e <_dtoa_r+0x216>
 8003cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8003e6c <_dtoa_r+0x2e4>)
 8003cfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fe5a 	bl	80009bc <__aeabi_dcmplt>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d04a      	beq.n	8003da2 <_dtoa_r+0x21a>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	3f01      	subs	r7, #1
 8003d10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d14:	1b9b      	subs	r3, r3, r6
 8003d16:	1e5a      	subs	r2, r3, #1
 8003d18:	bf46      	itte	mi
 8003d1a:	f1c3 0801 	rsbmi	r8, r3, #1
 8003d1e:	2300      	movmi	r3, #0
 8003d20:	f04f 0800 	movpl.w	r8, #0
 8003d24:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d26:	bf48      	it	mi
 8003d28:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003d2a:	2f00      	cmp	r7, #0
 8003d2c:	db3b      	blt.n	8003da6 <_dtoa_r+0x21e>
 8003d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d30:	970e      	str	r7, [sp, #56]	@ 0x38
 8003d32:	443b      	add	r3, r7
 8003d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d36:	2300      	movs	r3, #0
 8003d38:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d3c:	2b09      	cmp	r3, #9
 8003d3e:	d866      	bhi.n	8003e0e <_dtoa_r+0x286>
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	bfc4      	itt	gt
 8003d44:	3b04      	subgt	r3, #4
 8003d46:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003d48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d4a:	bfc8      	it	gt
 8003d4c:	2400      	movgt	r4, #0
 8003d4e:	f1a3 0302 	sub.w	r3, r3, #2
 8003d52:	bfd8      	it	le
 8003d54:	2401      	movle	r4, #1
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d864      	bhi.n	8003e24 <_dtoa_r+0x29c>
 8003d5a:	e8df f003 	tbb	[pc, r3]
 8003d5e:	382b      	.short	0x382b
 8003d60:	5636      	.short	0x5636
 8003d62:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003d66:	441e      	add	r6, r3
 8003d68:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	bfc1      	itttt	gt
 8003d70:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003d74:	fa08 f803 	lslgt.w	r8, r8, r3
 8003d78:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003d7c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003d80:	bfd6      	itet	le
 8003d82:	f1c3 0320 	rsble	r3, r3, #32
 8003d86:	ea48 0003 	orrgt.w	r0, r8, r3
 8003d8a:	fa04 f003 	lslle.w	r0, r4, r3
 8003d8e:	f7fc fb29 	bl	80003e4 <__aeabi_ui2d>
 8003d92:	2201      	movs	r2, #1
 8003d94:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003d98:	3e01      	subs	r6, #1
 8003d9a:	9212      	str	r2, [sp, #72]	@ 0x48
 8003d9c:	e775      	b.n	8003c8a <_dtoa_r+0x102>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e7b6      	b.n	8003d10 <_dtoa_r+0x188>
 8003da2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003da4:	e7b5      	b.n	8003d12 <_dtoa_r+0x18a>
 8003da6:	427b      	negs	r3, r7
 8003da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8003daa:	2300      	movs	r3, #0
 8003dac:	eba8 0807 	sub.w	r8, r8, r7
 8003db0:	930e      	str	r3, [sp, #56]	@ 0x38
 8003db2:	e7c2      	b.n	8003d3a <_dtoa_r+0x1b2>
 8003db4:	2300      	movs	r3, #0
 8003db6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003db8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	dc35      	bgt.n	8003e2a <_dtoa_r+0x2a2>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003dc6:	9221      	str	r2, [sp, #132]	@ 0x84
 8003dc8:	e00b      	b.n	8003de2 <_dtoa_r+0x25a>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e7f3      	b.n	8003db6 <_dtoa_r+0x22e>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003dd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	9308      	str	r3, [sp, #32]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	9307      	str	r3, [sp, #28]
 8003dde:	bfb8      	it	lt
 8003de0:	2301      	movlt	r3, #1
 8003de2:	2100      	movs	r1, #0
 8003de4:	2204      	movs	r2, #4
 8003de6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003dea:	f102 0514 	add.w	r5, r2, #20
 8003dee:	429d      	cmp	r5, r3
 8003df0:	d91f      	bls.n	8003e32 <_dtoa_r+0x2aa>
 8003df2:	6041      	str	r1, [r0, #4]
 8003df4:	4658      	mov	r0, fp
 8003df6:	f000 ff45 	bl	8004c84 <_Balloc>
 8003dfa:	4682      	mov	sl, r0
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d139      	bne.n	8003e74 <_dtoa_r+0x2ec>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f240 11af 	movw	r1, #431	@ 0x1af
 8003e06:	4b1a      	ldr	r3, [pc, #104]	@ (8003e70 <_dtoa_r+0x2e8>)
 8003e08:	e6d2      	b.n	8003bb0 <_dtoa_r+0x28>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e7e0      	b.n	8003dd0 <_dtoa_r+0x248>
 8003e0e:	2401      	movs	r4, #1
 8003e10:	2300      	movs	r3, #0
 8003e12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e14:	9320      	str	r3, [sp, #128]	@ 0x80
 8003e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e20:	2312      	movs	r3, #18
 8003e22:	e7d0      	b.n	8003dc6 <_dtoa_r+0x23e>
 8003e24:	2301      	movs	r3, #1
 8003e26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e28:	e7f5      	b.n	8003e16 <_dtoa_r+0x28e>
 8003e2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e2c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e30:	e7d7      	b.n	8003de2 <_dtoa_r+0x25a>
 8003e32:	3101      	adds	r1, #1
 8003e34:	0052      	lsls	r2, r2, #1
 8003e36:	e7d8      	b.n	8003dea <_dtoa_r+0x262>
 8003e38:	636f4361 	.word	0x636f4361
 8003e3c:	3fd287a7 	.word	0x3fd287a7
 8003e40:	8b60c8b3 	.word	0x8b60c8b3
 8003e44:	3fc68a28 	.word	0x3fc68a28
 8003e48:	509f79fb 	.word	0x509f79fb
 8003e4c:	3fd34413 	.word	0x3fd34413
 8003e50:	08007dc7 	.word	0x08007dc7
 8003e54:	08007dde 	.word	0x08007dde
 8003e58:	7ff00000 	.word	0x7ff00000
 8003e5c:	08007dc3 	.word	0x08007dc3
 8003e60:	08007d97 	.word	0x08007d97
 8003e64:	08007d96 	.word	0x08007d96
 8003e68:	3ff80000 	.word	0x3ff80000
 8003e6c:	08007ee8 	.word	0x08007ee8
 8003e70:	08007e36 	.word	0x08007e36
 8003e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003e78:	6018      	str	r0, [r3, #0]
 8003e7a:	9b07      	ldr	r3, [sp, #28]
 8003e7c:	2b0e      	cmp	r3, #14
 8003e7e:	f200 80a4 	bhi.w	8003fca <_dtoa_r+0x442>
 8003e82:	2c00      	cmp	r4, #0
 8003e84:	f000 80a1 	beq.w	8003fca <_dtoa_r+0x442>
 8003e88:	2f00      	cmp	r7, #0
 8003e8a:	dd33      	ble.n	8003ef4 <_dtoa_r+0x36c>
 8003e8c:	4b86      	ldr	r3, [pc, #536]	@ (80040a8 <_dtoa_r+0x520>)
 8003e8e:	f007 020f 	and.w	r2, r7, #15
 8003e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e96:	05f8      	lsls	r0, r7, #23
 8003e98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003ea0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003ea4:	d516      	bpl.n	8003ed4 <_dtoa_r+0x34c>
 8003ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003eaa:	4b80      	ldr	r3, [pc, #512]	@ (80040ac <_dtoa_r+0x524>)
 8003eac:	2603      	movs	r6, #3
 8003eae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003eb2:	f7fc fc3b 	bl	800072c <__aeabi_ddiv>
 8003eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003eba:	f004 040f 	and.w	r4, r4, #15
 8003ebe:	4d7b      	ldr	r5, [pc, #492]	@ (80040ac <_dtoa_r+0x524>)
 8003ec0:	b954      	cbnz	r4, 8003ed8 <_dtoa_r+0x350>
 8003ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eca:	f7fc fc2f 	bl	800072c <__aeabi_ddiv>
 8003ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ed2:	e028      	b.n	8003f26 <_dtoa_r+0x39e>
 8003ed4:	2602      	movs	r6, #2
 8003ed6:	e7f2      	b.n	8003ebe <_dtoa_r+0x336>
 8003ed8:	07e1      	lsls	r1, r4, #31
 8003eda:	d508      	bpl.n	8003eee <_dtoa_r+0x366>
 8003edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ee4:	f7fc faf8 	bl	80004d8 <__aeabi_dmul>
 8003ee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003eec:	3601      	adds	r6, #1
 8003eee:	1064      	asrs	r4, r4, #1
 8003ef0:	3508      	adds	r5, #8
 8003ef2:	e7e5      	b.n	8003ec0 <_dtoa_r+0x338>
 8003ef4:	f000 80d2 	beq.w	800409c <_dtoa_r+0x514>
 8003ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003efc:	427c      	negs	r4, r7
 8003efe:	4b6a      	ldr	r3, [pc, #424]	@ (80040a8 <_dtoa_r+0x520>)
 8003f00:	f004 020f 	and.w	r2, r4, #15
 8003f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fae4 	bl	80004d8 <__aeabi_dmul>
 8003f10:	2602      	movs	r6, #2
 8003f12:	2300      	movs	r3, #0
 8003f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f18:	4d64      	ldr	r5, [pc, #400]	@ (80040ac <_dtoa_r+0x524>)
 8003f1a:	1124      	asrs	r4, r4, #4
 8003f1c:	2c00      	cmp	r4, #0
 8003f1e:	f040 80b2 	bne.w	8004086 <_dtoa_r+0x4fe>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1d3      	bne.n	8003ece <_dtoa_r+0x346>
 8003f26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80b7 	beq.w	80040a0 <_dtoa_r+0x518>
 8003f32:	2200      	movs	r2, #0
 8003f34:	4620      	mov	r0, r4
 8003f36:	4629      	mov	r1, r5
 8003f38:	4b5d      	ldr	r3, [pc, #372]	@ (80040b0 <_dtoa_r+0x528>)
 8003f3a:	f7fc fd3f 	bl	80009bc <__aeabi_dcmplt>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	f000 80ae 	beq.w	80040a0 <_dtoa_r+0x518>
 8003f44:	9b07      	ldr	r3, [sp, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80aa 	beq.w	80040a0 <_dtoa_r+0x518>
 8003f4c:	9b08      	ldr	r3, [sp, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	dd37      	ble.n	8003fc2 <_dtoa_r+0x43a>
 8003f52:	1e7b      	subs	r3, r7, #1
 8003f54:	4620      	mov	r0, r4
 8003f56:	9304      	str	r3, [sp, #16]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	4b55      	ldr	r3, [pc, #340]	@ (80040b4 <_dtoa_r+0x52c>)
 8003f5e:	f7fc fabb 	bl	80004d8 <__aeabi_dmul>
 8003f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f66:	9c08      	ldr	r4, [sp, #32]
 8003f68:	3601      	adds	r6, #1
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f7fc fa4a 	bl	8000404 <__aeabi_i2d>
 8003f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f74:	f7fc fab0 	bl	80004d8 <__aeabi_dmul>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80040b8 <_dtoa_r+0x530>)
 8003f7c:	f7fc f8f6 	bl	800016c <__adddf3>
 8003f80:	4605      	mov	r5, r0
 8003f82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003f86:	2c00      	cmp	r4, #0
 8003f88:	f040 809a 	bne.w	80040c0 <_dtoa_r+0x538>
 8003f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	4b4a      	ldr	r3, [pc, #296]	@ (80040bc <_dtoa_r+0x534>)
 8003f94:	f7fc f8e8 	bl	8000168 <__aeabi_dsub>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fa0:	462a      	mov	r2, r5
 8003fa2:	4633      	mov	r3, r6
 8003fa4:	f7fc fd28 	bl	80009f8 <__aeabi_dcmpgt>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	f040 828e 	bne.w	80044ca <_dtoa_r+0x942>
 8003fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fb2:	462a      	mov	r2, r5
 8003fb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003fb8:	f7fc fd00 	bl	80009bc <__aeabi_dcmplt>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	f040 8127 	bne.w	8004210 <_dtoa_r+0x688>
 8003fc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003fc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003fca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f2c0 8163 	blt.w	8004298 <_dtoa_r+0x710>
 8003fd2:	2f0e      	cmp	r7, #14
 8003fd4:	f300 8160 	bgt.w	8004298 <_dtoa_r+0x710>
 8003fd8:	4b33      	ldr	r3, [pc, #204]	@ (80040a8 <_dtoa_r+0x520>)
 8003fda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003fde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fe2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003fe6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	da03      	bge.n	8003ff4 <_dtoa_r+0x46c>
 8003fec:	9b07      	ldr	r3, [sp, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f340 8100 	ble.w	80041f4 <_dtoa_r+0x66c>
 8003ff4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003ff8:	4656      	mov	r6, sl
 8003ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ffe:	4620      	mov	r0, r4
 8004000:	4629      	mov	r1, r5
 8004002:	f7fc fb93 	bl	800072c <__aeabi_ddiv>
 8004006:	f7fc fd17 	bl	8000a38 <__aeabi_d2iz>
 800400a:	4680      	mov	r8, r0
 800400c:	f7fc f9fa 	bl	8000404 <__aeabi_i2d>
 8004010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004014:	f7fc fa60 	bl	80004d8 <__aeabi_dmul>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4620      	mov	r0, r4
 800401e:	4629      	mov	r1, r5
 8004020:	f7fc f8a2 	bl	8000168 <__aeabi_dsub>
 8004024:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004028:	9d07      	ldr	r5, [sp, #28]
 800402a:	f806 4b01 	strb.w	r4, [r6], #1
 800402e:	eba6 040a 	sub.w	r4, r6, sl
 8004032:	42a5      	cmp	r5, r4
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	f040 8116 	bne.w	8004268 <_dtoa_r+0x6e0>
 800403c:	f7fc f896 	bl	800016c <__adddf3>
 8004040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004044:	4604      	mov	r4, r0
 8004046:	460d      	mov	r5, r1
 8004048:	f7fc fcd6 	bl	80009f8 <__aeabi_dcmpgt>
 800404c:	2800      	cmp	r0, #0
 800404e:	f040 80f8 	bne.w	8004242 <_dtoa_r+0x6ba>
 8004052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004056:	4620      	mov	r0, r4
 8004058:	4629      	mov	r1, r5
 800405a:	f7fc fca5 	bl	80009a8 <__aeabi_dcmpeq>
 800405e:	b118      	cbz	r0, 8004068 <_dtoa_r+0x4e0>
 8004060:	f018 0f01 	tst.w	r8, #1
 8004064:	f040 80ed 	bne.w	8004242 <_dtoa_r+0x6ba>
 8004068:	4649      	mov	r1, r9
 800406a:	4658      	mov	r0, fp
 800406c:	f000 fe4a 	bl	8004d04 <_Bfree>
 8004070:	2300      	movs	r3, #0
 8004072:	7033      	strb	r3, [r6, #0]
 8004074:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004076:	3701      	adds	r7, #1
 8004078:	601f      	str	r7, [r3, #0]
 800407a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8320 	beq.w	80046c2 <_dtoa_r+0xb3a>
 8004082:	601e      	str	r6, [r3, #0]
 8004084:	e31d      	b.n	80046c2 <_dtoa_r+0xb3a>
 8004086:	07e2      	lsls	r2, r4, #31
 8004088:	d505      	bpl.n	8004096 <_dtoa_r+0x50e>
 800408a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800408e:	f7fc fa23 	bl	80004d8 <__aeabi_dmul>
 8004092:	2301      	movs	r3, #1
 8004094:	3601      	adds	r6, #1
 8004096:	1064      	asrs	r4, r4, #1
 8004098:	3508      	adds	r5, #8
 800409a:	e73f      	b.n	8003f1c <_dtoa_r+0x394>
 800409c:	2602      	movs	r6, #2
 800409e:	e742      	b.n	8003f26 <_dtoa_r+0x39e>
 80040a0:	9c07      	ldr	r4, [sp, #28]
 80040a2:	9704      	str	r7, [sp, #16]
 80040a4:	e761      	b.n	8003f6a <_dtoa_r+0x3e2>
 80040a6:	bf00      	nop
 80040a8:	08007ee8 	.word	0x08007ee8
 80040ac:	08007ec0 	.word	0x08007ec0
 80040b0:	3ff00000 	.word	0x3ff00000
 80040b4:	40240000 	.word	0x40240000
 80040b8:	401c0000 	.word	0x401c0000
 80040bc:	40140000 	.word	0x40140000
 80040c0:	4b70      	ldr	r3, [pc, #448]	@ (8004284 <_dtoa_r+0x6fc>)
 80040c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80040c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80040cc:	4454      	add	r4, sl
 80040ce:	2900      	cmp	r1, #0
 80040d0:	d045      	beq.n	800415e <_dtoa_r+0x5d6>
 80040d2:	2000      	movs	r0, #0
 80040d4:	496c      	ldr	r1, [pc, #432]	@ (8004288 <_dtoa_r+0x700>)
 80040d6:	f7fc fb29 	bl	800072c <__aeabi_ddiv>
 80040da:	4633      	mov	r3, r6
 80040dc:	462a      	mov	r2, r5
 80040de:	f7fc f843 	bl	8000168 <__aeabi_dsub>
 80040e2:	4656      	mov	r6, sl
 80040e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040ec:	f7fc fca4 	bl	8000a38 <__aeabi_d2iz>
 80040f0:	4605      	mov	r5, r0
 80040f2:	f7fc f987 	bl	8000404 <__aeabi_i2d>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040fe:	f7fc f833 	bl	8000168 <__aeabi_dsub>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	3530      	adds	r5, #48	@ 0x30
 8004108:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800410c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004110:	f806 5b01 	strb.w	r5, [r6], #1
 8004114:	f7fc fc52 	bl	80009bc <__aeabi_dcmplt>
 8004118:	2800      	cmp	r0, #0
 800411a:	d163      	bne.n	80041e4 <_dtoa_r+0x65c>
 800411c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004120:	2000      	movs	r0, #0
 8004122:	495a      	ldr	r1, [pc, #360]	@ (800428c <_dtoa_r+0x704>)
 8004124:	f7fc f820 	bl	8000168 <__aeabi_dsub>
 8004128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800412c:	f7fc fc46 	bl	80009bc <__aeabi_dcmplt>
 8004130:	2800      	cmp	r0, #0
 8004132:	f040 8087 	bne.w	8004244 <_dtoa_r+0x6bc>
 8004136:	42a6      	cmp	r6, r4
 8004138:	f43f af43 	beq.w	8003fc2 <_dtoa_r+0x43a>
 800413c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004140:	2200      	movs	r2, #0
 8004142:	4b53      	ldr	r3, [pc, #332]	@ (8004290 <_dtoa_r+0x708>)
 8004144:	f7fc f9c8 	bl	80004d8 <__aeabi_dmul>
 8004148:	2200      	movs	r2, #0
 800414a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800414e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004152:	4b4f      	ldr	r3, [pc, #316]	@ (8004290 <_dtoa_r+0x708>)
 8004154:	f7fc f9c0 	bl	80004d8 <__aeabi_dmul>
 8004158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800415c:	e7c4      	b.n	80040e8 <_dtoa_r+0x560>
 800415e:	4631      	mov	r1, r6
 8004160:	4628      	mov	r0, r5
 8004162:	f7fc f9b9 	bl	80004d8 <__aeabi_dmul>
 8004166:	4656      	mov	r6, sl
 8004168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800416c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800416e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004172:	f7fc fc61 	bl	8000a38 <__aeabi_d2iz>
 8004176:	4605      	mov	r5, r0
 8004178:	f7fc f944 	bl	8000404 <__aeabi_i2d>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004184:	f7fb fff0 	bl	8000168 <__aeabi_dsub>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	3530      	adds	r5, #48	@ 0x30
 800418e:	f806 5b01 	strb.w	r5, [r6], #1
 8004192:	42a6      	cmp	r6, r4
 8004194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	d124      	bne.n	80041e8 <_dtoa_r+0x660>
 800419e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041a2:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <_dtoa_r+0x700>)
 80041a4:	f7fb ffe2 	bl	800016c <__adddf3>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041b0:	f7fc fc22 	bl	80009f8 <__aeabi_dcmpgt>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d145      	bne.n	8004244 <_dtoa_r+0x6bc>
 80041b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041bc:	2000      	movs	r0, #0
 80041be:	4932      	ldr	r1, [pc, #200]	@ (8004288 <_dtoa_r+0x700>)
 80041c0:	f7fb ffd2 	bl	8000168 <__aeabi_dsub>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041cc:	f7fc fbf6 	bl	80009bc <__aeabi_dcmplt>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	f43f aef6 	beq.w	8003fc2 <_dtoa_r+0x43a>
 80041d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80041d8:	1e73      	subs	r3, r6, #1
 80041da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80041dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80041e0:	2b30      	cmp	r3, #48	@ 0x30
 80041e2:	d0f8      	beq.n	80041d6 <_dtoa_r+0x64e>
 80041e4:	9f04      	ldr	r7, [sp, #16]
 80041e6:	e73f      	b.n	8004068 <_dtoa_r+0x4e0>
 80041e8:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <_dtoa_r+0x708>)
 80041ea:	f7fc f975 	bl	80004d8 <__aeabi_dmul>
 80041ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041f2:	e7bc      	b.n	800416e <_dtoa_r+0x5e6>
 80041f4:	d10c      	bne.n	8004210 <_dtoa_r+0x688>
 80041f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041fa:	2200      	movs	r2, #0
 80041fc:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <_dtoa_r+0x70c>)
 80041fe:	f7fc f96b 	bl	80004d8 <__aeabi_dmul>
 8004202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004206:	f7fc fbed 	bl	80009e4 <__aeabi_dcmpge>
 800420a:	2800      	cmp	r0, #0
 800420c:	f000 815b 	beq.w	80044c6 <_dtoa_r+0x93e>
 8004210:	2400      	movs	r4, #0
 8004212:	4625      	mov	r5, r4
 8004214:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004216:	4656      	mov	r6, sl
 8004218:	43db      	mvns	r3, r3
 800421a:	9304      	str	r3, [sp, #16]
 800421c:	2700      	movs	r7, #0
 800421e:	4621      	mov	r1, r4
 8004220:	4658      	mov	r0, fp
 8004222:	f000 fd6f 	bl	8004d04 <_Bfree>
 8004226:	2d00      	cmp	r5, #0
 8004228:	d0dc      	beq.n	80041e4 <_dtoa_r+0x65c>
 800422a:	b12f      	cbz	r7, 8004238 <_dtoa_r+0x6b0>
 800422c:	42af      	cmp	r7, r5
 800422e:	d003      	beq.n	8004238 <_dtoa_r+0x6b0>
 8004230:	4639      	mov	r1, r7
 8004232:	4658      	mov	r0, fp
 8004234:	f000 fd66 	bl	8004d04 <_Bfree>
 8004238:	4629      	mov	r1, r5
 800423a:	4658      	mov	r0, fp
 800423c:	f000 fd62 	bl	8004d04 <_Bfree>
 8004240:	e7d0      	b.n	80041e4 <_dtoa_r+0x65c>
 8004242:	9704      	str	r7, [sp, #16]
 8004244:	4633      	mov	r3, r6
 8004246:	461e      	mov	r6, r3
 8004248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800424c:	2a39      	cmp	r2, #57	@ 0x39
 800424e:	d107      	bne.n	8004260 <_dtoa_r+0x6d8>
 8004250:	459a      	cmp	sl, r3
 8004252:	d1f8      	bne.n	8004246 <_dtoa_r+0x6be>
 8004254:	9a04      	ldr	r2, [sp, #16]
 8004256:	3201      	adds	r2, #1
 8004258:	9204      	str	r2, [sp, #16]
 800425a:	2230      	movs	r2, #48	@ 0x30
 800425c:	f88a 2000 	strb.w	r2, [sl]
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	3201      	adds	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e7bd      	b.n	80041e4 <_dtoa_r+0x65c>
 8004268:	2200      	movs	r2, #0
 800426a:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <_dtoa_r+0x708>)
 800426c:	f7fc f934 	bl	80004d8 <__aeabi_dmul>
 8004270:	2200      	movs	r2, #0
 8004272:	2300      	movs	r3, #0
 8004274:	4604      	mov	r4, r0
 8004276:	460d      	mov	r5, r1
 8004278:	f7fc fb96 	bl	80009a8 <__aeabi_dcmpeq>
 800427c:	2800      	cmp	r0, #0
 800427e:	f43f aebc 	beq.w	8003ffa <_dtoa_r+0x472>
 8004282:	e6f1      	b.n	8004068 <_dtoa_r+0x4e0>
 8004284:	08007ee8 	.word	0x08007ee8
 8004288:	3fe00000 	.word	0x3fe00000
 800428c:	3ff00000 	.word	0x3ff00000
 8004290:	40240000 	.word	0x40240000
 8004294:	40140000 	.word	0x40140000
 8004298:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800429a:	2a00      	cmp	r2, #0
 800429c:	f000 80db 	beq.w	8004456 <_dtoa_r+0x8ce>
 80042a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80042a2:	2a01      	cmp	r2, #1
 80042a4:	f300 80bf 	bgt.w	8004426 <_dtoa_r+0x89e>
 80042a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	f000 80b7 	beq.w	800441e <_dtoa_r+0x896>
 80042b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80042b4:	4646      	mov	r6, r8
 80042b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80042b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042ba:	2101      	movs	r1, #1
 80042bc:	441a      	add	r2, r3
 80042be:	4658      	mov	r0, fp
 80042c0:	4498      	add	r8, r3
 80042c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80042c4:	f000 fdd2 	bl	8004e6c <__i2b>
 80042c8:	4605      	mov	r5, r0
 80042ca:	b15e      	cbz	r6, 80042e4 <_dtoa_r+0x75c>
 80042cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	dd08      	ble.n	80042e4 <_dtoa_r+0x75c>
 80042d2:	42b3      	cmp	r3, r6
 80042d4:	bfa8      	it	ge
 80042d6:	4633      	movge	r3, r6
 80042d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042da:	eba8 0803 	sub.w	r8, r8, r3
 80042de:	1af6      	subs	r6, r6, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042e6:	b1f3      	cbz	r3, 8004326 <_dtoa_r+0x79e>
 80042e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80b7 	beq.w	800445e <_dtoa_r+0x8d6>
 80042f0:	b18c      	cbz	r4, 8004316 <_dtoa_r+0x78e>
 80042f2:	4629      	mov	r1, r5
 80042f4:	4622      	mov	r2, r4
 80042f6:	4658      	mov	r0, fp
 80042f8:	f000 fe76 	bl	8004fe8 <__pow5mult>
 80042fc:	464a      	mov	r2, r9
 80042fe:	4601      	mov	r1, r0
 8004300:	4605      	mov	r5, r0
 8004302:	4658      	mov	r0, fp
 8004304:	f000 fdc8 	bl	8004e98 <__multiply>
 8004308:	4649      	mov	r1, r9
 800430a:	9004      	str	r0, [sp, #16]
 800430c:	4658      	mov	r0, fp
 800430e:	f000 fcf9 	bl	8004d04 <_Bfree>
 8004312:	9b04      	ldr	r3, [sp, #16]
 8004314:	4699      	mov	r9, r3
 8004316:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004318:	1b1a      	subs	r2, r3, r4
 800431a:	d004      	beq.n	8004326 <_dtoa_r+0x79e>
 800431c:	4649      	mov	r1, r9
 800431e:	4658      	mov	r0, fp
 8004320:	f000 fe62 	bl	8004fe8 <__pow5mult>
 8004324:	4681      	mov	r9, r0
 8004326:	2101      	movs	r1, #1
 8004328:	4658      	mov	r0, fp
 800432a:	f000 fd9f 	bl	8004e6c <__i2b>
 800432e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004330:	4604      	mov	r4, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 81c9 	beq.w	80046ca <_dtoa_r+0xb42>
 8004338:	461a      	mov	r2, r3
 800433a:	4601      	mov	r1, r0
 800433c:	4658      	mov	r0, fp
 800433e:	f000 fe53 	bl	8004fe8 <__pow5mult>
 8004342:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004344:	4604      	mov	r4, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	f300 808f 	bgt.w	800446a <_dtoa_r+0x8e2>
 800434c:	9b02      	ldr	r3, [sp, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 8087 	bne.w	8004462 <_dtoa_r+0x8da>
 8004354:	9b03      	ldr	r3, [sp, #12]
 8004356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 8083 	bne.w	8004466 <_dtoa_r+0x8de>
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004366:	0d1b      	lsrs	r3, r3, #20
 8004368:	051b      	lsls	r3, r3, #20
 800436a:	b12b      	cbz	r3, 8004378 <_dtoa_r+0x7f0>
 800436c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800436e:	f108 0801 	add.w	r8, r8, #1
 8004372:	3301      	adds	r3, #1
 8004374:	9309      	str	r3, [sp, #36]	@ 0x24
 8004376:	2301      	movs	r3, #1
 8004378:	930a      	str	r3, [sp, #40]	@ 0x28
 800437a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 81aa 	beq.w	80046d6 <_dtoa_r+0xb4e>
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004388:	6918      	ldr	r0, [r3, #16]
 800438a:	f000 fd23 	bl	8004dd4 <__hi0bits>
 800438e:	f1c0 0020 	rsb	r0, r0, #32
 8004392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004394:	4418      	add	r0, r3
 8004396:	f010 001f 	ands.w	r0, r0, #31
 800439a:	d071      	beq.n	8004480 <_dtoa_r+0x8f8>
 800439c:	f1c0 0320 	rsb	r3, r0, #32
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	dd65      	ble.n	8004470 <_dtoa_r+0x8e8>
 80043a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043a6:	f1c0 001c 	rsb	r0, r0, #28
 80043aa:	4403      	add	r3, r0
 80043ac:	4480      	add	r8, r0
 80043ae:	4406      	add	r6, r0
 80043b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b2:	f1b8 0f00 	cmp.w	r8, #0
 80043b6:	dd05      	ble.n	80043c4 <_dtoa_r+0x83c>
 80043b8:	4649      	mov	r1, r9
 80043ba:	4642      	mov	r2, r8
 80043bc:	4658      	mov	r0, fp
 80043be:	f000 fe6d 	bl	800509c <__lshift>
 80043c2:	4681      	mov	r9, r0
 80043c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dd05      	ble.n	80043d6 <_dtoa_r+0x84e>
 80043ca:	4621      	mov	r1, r4
 80043cc:	461a      	mov	r2, r3
 80043ce:	4658      	mov	r0, fp
 80043d0:	f000 fe64 	bl	800509c <__lshift>
 80043d4:	4604      	mov	r4, r0
 80043d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d053      	beq.n	8004484 <_dtoa_r+0x8fc>
 80043dc:	4621      	mov	r1, r4
 80043de:	4648      	mov	r0, r9
 80043e0:	f000 fec8 	bl	8005174 <__mcmp>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	da4d      	bge.n	8004484 <_dtoa_r+0x8fc>
 80043e8:	1e7b      	subs	r3, r7, #1
 80043ea:	4649      	mov	r1, r9
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	220a      	movs	r2, #10
 80043f0:	2300      	movs	r3, #0
 80043f2:	4658      	mov	r0, fp
 80043f4:	f000 fca8 	bl	8004d48 <__multadd>
 80043f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043fa:	4681      	mov	r9, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 816c 	beq.w	80046da <_dtoa_r+0xb52>
 8004402:	2300      	movs	r3, #0
 8004404:	4629      	mov	r1, r5
 8004406:	220a      	movs	r2, #10
 8004408:	4658      	mov	r0, fp
 800440a:	f000 fc9d 	bl	8004d48 <__multadd>
 800440e:	9b08      	ldr	r3, [sp, #32]
 8004410:	4605      	mov	r5, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	dc61      	bgt.n	80044da <_dtoa_r+0x952>
 8004416:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004418:	2b02      	cmp	r3, #2
 800441a:	dc3b      	bgt.n	8004494 <_dtoa_r+0x90c>
 800441c:	e05d      	b.n	80044da <_dtoa_r+0x952>
 800441e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004420:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004424:	e746      	b.n	80042b4 <_dtoa_r+0x72c>
 8004426:	9b07      	ldr	r3, [sp, #28]
 8004428:	1e5c      	subs	r4, r3, #1
 800442a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800442c:	42a3      	cmp	r3, r4
 800442e:	bfbf      	itttt	lt
 8004430:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004432:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004434:	1ae3      	sublt	r3, r4, r3
 8004436:	18d2      	addlt	r2, r2, r3
 8004438:	bfa8      	it	ge
 800443a:	1b1c      	subge	r4, r3, r4
 800443c:	9b07      	ldr	r3, [sp, #28]
 800443e:	bfbe      	ittt	lt
 8004440:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004442:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004444:	2400      	movlt	r4, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	bfb5      	itete	lt
 800444a:	eba8 0603 	sublt.w	r6, r8, r3
 800444e:	4646      	movge	r6, r8
 8004450:	2300      	movlt	r3, #0
 8004452:	9b07      	ldrge	r3, [sp, #28]
 8004454:	e730      	b.n	80042b8 <_dtoa_r+0x730>
 8004456:	4646      	mov	r6, r8
 8004458:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800445a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800445c:	e735      	b.n	80042ca <_dtoa_r+0x742>
 800445e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004460:	e75c      	b.n	800431c <_dtoa_r+0x794>
 8004462:	2300      	movs	r3, #0
 8004464:	e788      	b.n	8004378 <_dtoa_r+0x7f0>
 8004466:	9b02      	ldr	r3, [sp, #8]
 8004468:	e786      	b.n	8004378 <_dtoa_r+0x7f0>
 800446a:	2300      	movs	r3, #0
 800446c:	930a      	str	r3, [sp, #40]	@ 0x28
 800446e:	e788      	b.n	8004382 <_dtoa_r+0x7fa>
 8004470:	d09f      	beq.n	80043b2 <_dtoa_r+0x82a>
 8004472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004474:	331c      	adds	r3, #28
 8004476:	441a      	add	r2, r3
 8004478:	4498      	add	r8, r3
 800447a:	441e      	add	r6, r3
 800447c:	9209      	str	r2, [sp, #36]	@ 0x24
 800447e:	e798      	b.n	80043b2 <_dtoa_r+0x82a>
 8004480:	4603      	mov	r3, r0
 8004482:	e7f6      	b.n	8004472 <_dtoa_r+0x8ea>
 8004484:	9b07      	ldr	r3, [sp, #28]
 8004486:	9704      	str	r7, [sp, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	dc20      	bgt.n	80044ce <_dtoa_r+0x946>
 800448c:	9308      	str	r3, [sp, #32]
 800448e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004490:	2b02      	cmp	r3, #2
 8004492:	dd1e      	ble.n	80044d2 <_dtoa_r+0x94a>
 8004494:	9b08      	ldr	r3, [sp, #32]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f47f aebc 	bne.w	8004214 <_dtoa_r+0x68c>
 800449c:	4621      	mov	r1, r4
 800449e:	2205      	movs	r2, #5
 80044a0:	4658      	mov	r0, fp
 80044a2:	f000 fc51 	bl	8004d48 <__multadd>
 80044a6:	4601      	mov	r1, r0
 80044a8:	4604      	mov	r4, r0
 80044aa:	4648      	mov	r0, r9
 80044ac:	f000 fe62 	bl	8005174 <__mcmp>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	f77f aeaf 	ble.w	8004214 <_dtoa_r+0x68c>
 80044b6:	2331      	movs	r3, #49	@ 0x31
 80044b8:	4656      	mov	r6, sl
 80044ba:	f806 3b01 	strb.w	r3, [r6], #1
 80044be:	9b04      	ldr	r3, [sp, #16]
 80044c0:	3301      	adds	r3, #1
 80044c2:	9304      	str	r3, [sp, #16]
 80044c4:	e6aa      	b.n	800421c <_dtoa_r+0x694>
 80044c6:	9c07      	ldr	r4, [sp, #28]
 80044c8:	9704      	str	r7, [sp, #16]
 80044ca:	4625      	mov	r5, r4
 80044cc:	e7f3      	b.n	80044b6 <_dtoa_r+0x92e>
 80044ce:	9b07      	ldr	r3, [sp, #28]
 80044d0:	9308      	str	r3, [sp, #32]
 80044d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8104 	beq.w	80046e2 <_dtoa_r+0xb5a>
 80044da:	2e00      	cmp	r6, #0
 80044dc:	dd05      	ble.n	80044ea <_dtoa_r+0x962>
 80044de:	4629      	mov	r1, r5
 80044e0:	4632      	mov	r2, r6
 80044e2:	4658      	mov	r0, fp
 80044e4:	f000 fdda 	bl	800509c <__lshift>
 80044e8:	4605      	mov	r5, r0
 80044ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d05a      	beq.n	80045a6 <_dtoa_r+0xa1e>
 80044f0:	4658      	mov	r0, fp
 80044f2:	6869      	ldr	r1, [r5, #4]
 80044f4:	f000 fbc6 	bl	8004c84 <_Balloc>
 80044f8:	4606      	mov	r6, r0
 80044fa:	b928      	cbnz	r0, 8004508 <_dtoa_r+0x980>
 80044fc:	4602      	mov	r2, r0
 80044fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004502:	4b83      	ldr	r3, [pc, #524]	@ (8004710 <_dtoa_r+0xb88>)
 8004504:	f7ff bb54 	b.w	8003bb0 <_dtoa_r+0x28>
 8004508:	692a      	ldr	r2, [r5, #16]
 800450a:	f105 010c 	add.w	r1, r5, #12
 800450e:	3202      	adds	r2, #2
 8004510:	0092      	lsls	r2, r2, #2
 8004512:	300c      	adds	r0, #12
 8004514:	f001 f930 	bl	8005778 <memcpy>
 8004518:	2201      	movs	r2, #1
 800451a:	4631      	mov	r1, r6
 800451c:	4658      	mov	r0, fp
 800451e:	f000 fdbd 	bl	800509c <__lshift>
 8004522:	462f      	mov	r7, r5
 8004524:	4605      	mov	r5, r0
 8004526:	f10a 0301 	add.w	r3, sl, #1
 800452a:	9307      	str	r3, [sp, #28]
 800452c:	9b08      	ldr	r3, [sp, #32]
 800452e:	4453      	add	r3, sl
 8004530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004532:	9b02      	ldr	r3, [sp, #8]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	930a      	str	r3, [sp, #40]	@ 0x28
 800453a:	9b07      	ldr	r3, [sp, #28]
 800453c:	4621      	mov	r1, r4
 800453e:	3b01      	subs	r3, #1
 8004540:	4648      	mov	r0, r9
 8004542:	9302      	str	r3, [sp, #8]
 8004544:	f7ff fa97 	bl	8003a76 <quorem>
 8004548:	4639      	mov	r1, r7
 800454a:	9008      	str	r0, [sp, #32]
 800454c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004550:	4648      	mov	r0, r9
 8004552:	f000 fe0f 	bl	8005174 <__mcmp>
 8004556:	462a      	mov	r2, r5
 8004558:	9009      	str	r0, [sp, #36]	@ 0x24
 800455a:	4621      	mov	r1, r4
 800455c:	4658      	mov	r0, fp
 800455e:	f000 fe25 	bl	80051ac <__mdiff>
 8004562:	68c2      	ldr	r2, [r0, #12]
 8004564:	4606      	mov	r6, r0
 8004566:	bb02      	cbnz	r2, 80045aa <_dtoa_r+0xa22>
 8004568:	4601      	mov	r1, r0
 800456a:	4648      	mov	r0, r9
 800456c:	f000 fe02 	bl	8005174 <__mcmp>
 8004570:	4602      	mov	r2, r0
 8004572:	4631      	mov	r1, r6
 8004574:	4658      	mov	r0, fp
 8004576:	920c      	str	r2, [sp, #48]	@ 0x30
 8004578:	f000 fbc4 	bl	8004d04 <_Bfree>
 800457c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800457e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004580:	9e07      	ldr	r6, [sp, #28]
 8004582:	ea43 0102 	orr.w	r1, r3, r2
 8004586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004588:	4319      	orrs	r1, r3
 800458a:	d110      	bne.n	80045ae <_dtoa_r+0xa26>
 800458c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004590:	d029      	beq.n	80045e6 <_dtoa_r+0xa5e>
 8004592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004594:	2b00      	cmp	r3, #0
 8004596:	dd02      	ble.n	800459e <_dtoa_r+0xa16>
 8004598:	9b08      	ldr	r3, [sp, #32]
 800459a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800459e:	9b02      	ldr	r3, [sp, #8]
 80045a0:	f883 8000 	strb.w	r8, [r3]
 80045a4:	e63b      	b.n	800421e <_dtoa_r+0x696>
 80045a6:	4628      	mov	r0, r5
 80045a8:	e7bb      	b.n	8004522 <_dtoa_r+0x99a>
 80045aa:	2201      	movs	r2, #1
 80045ac:	e7e1      	b.n	8004572 <_dtoa_r+0x9ea>
 80045ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db04      	blt.n	80045be <_dtoa_r+0xa36>
 80045b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80045b6:	430b      	orrs	r3, r1
 80045b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80045ba:	430b      	orrs	r3, r1
 80045bc:	d120      	bne.n	8004600 <_dtoa_r+0xa78>
 80045be:	2a00      	cmp	r2, #0
 80045c0:	dded      	ble.n	800459e <_dtoa_r+0xa16>
 80045c2:	4649      	mov	r1, r9
 80045c4:	2201      	movs	r2, #1
 80045c6:	4658      	mov	r0, fp
 80045c8:	f000 fd68 	bl	800509c <__lshift>
 80045cc:	4621      	mov	r1, r4
 80045ce:	4681      	mov	r9, r0
 80045d0:	f000 fdd0 	bl	8005174 <__mcmp>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	dc03      	bgt.n	80045e0 <_dtoa_r+0xa58>
 80045d8:	d1e1      	bne.n	800459e <_dtoa_r+0xa16>
 80045da:	f018 0f01 	tst.w	r8, #1
 80045de:	d0de      	beq.n	800459e <_dtoa_r+0xa16>
 80045e0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045e4:	d1d8      	bne.n	8004598 <_dtoa_r+0xa10>
 80045e6:	2339      	movs	r3, #57	@ 0x39
 80045e8:	9a02      	ldr	r2, [sp, #8]
 80045ea:	7013      	strb	r3, [r2, #0]
 80045ec:	4633      	mov	r3, r6
 80045ee:	461e      	mov	r6, r3
 80045f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	2a39      	cmp	r2, #57	@ 0x39
 80045f8:	d052      	beq.n	80046a0 <_dtoa_r+0xb18>
 80045fa:	3201      	adds	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e60e      	b.n	800421e <_dtoa_r+0x696>
 8004600:	2a00      	cmp	r2, #0
 8004602:	dd07      	ble.n	8004614 <_dtoa_r+0xa8c>
 8004604:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004608:	d0ed      	beq.n	80045e6 <_dtoa_r+0xa5e>
 800460a:	9a02      	ldr	r2, [sp, #8]
 800460c:	f108 0301 	add.w	r3, r8, #1
 8004610:	7013      	strb	r3, [r2, #0]
 8004612:	e604      	b.n	800421e <_dtoa_r+0x696>
 8004614:	9b07      	ldr	r3, [sp, #28]
 8004616:	9a07      	ldr	r2, [sp, #28]
 8004618:	f803 8c01 	strb.w	r8, [r3, #-1]
 800461c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800461e:	4293      	cmp	r3, r2
 8004620:	d028      	beq.n	8004674 <_dtoa_r+0xaec>
 8004622:	4649      	mov	r1, r9
 8004624:	2300      	movs	r3, #0
 8004626:	220a      	movs	r2, #10
 8004628:	4658      	mov	r0, fp
 800462a:	f000 fb8d 	bl	8004d48 <__multadd>
 800462e:	42af      	cmp	r7, r5
 8004630:	4681      	mov	r9, r0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	f04f 020a 	mov.w	r2, #10
 800463a:	4639      	mov	r1, r7
 800463c:	4658      	mov	r0, fp
 800463e:	d107      	bne.n	8004650 <_dtoa_r+0xac8>
 8004640:	f000 fb82 	bl	8004d48 <__multadd>
 8004644:	4607      	mov	r7, r0
 8004646:	4605      	mov	r5, r0
 8004648:	9b07      	ldr	r3, [sp, #28]
 800464a:	3301      	adds	r3, #1
 800464c:	9307      	str	r3, [sp, #28]
 800464e:	e774      	b.n	800453a <_dtoa_r+0x9b2>
 8004650:	f000 fb7a 	bl	8004d48 <__multadd>
 8004654:	4629      	mov	r1, r5
 8004656:	4607      	mov	r7, r0
 8004658:	2300      	movs	r3, #0
 800465a:	220a      	movs	r2, #10
 800465c:	4658      	mov	r0, fp
 800465e:	f000 fb73 	bl	8004d48 <__multadd>
 8004662:	4605      	mov	r5, r0
 8004664:	e7f0      	b.n	8004648 <_dtoa_r+0xac0>
 8004666:	9b08      	ldr	r3, [sp, #32]
 8004668:	2700      	movs	r7, #0
 800466a:	2b00      	cmp	r3, #0
 800466c:	bfcc      	ite	gt
 800466e:	461e      	movgt	r6, r3
 8004670:	2601      	movle	r6, #1
 8004672:	4456      	add	r6, sl
 8004674:	4649      	mov	r1, r9
 8004676:	2201      	movs	r2, #1
 8004678:	4658      	mov	r0, fp
 800467a:	f000 fd0f 	bl	800509c <__lshift>
 800467e:	4621      	mov	r1, r4
 8004680:	4681      	mov	r9, r0
 8004682:	f000 fd77 	bl	8005174 <__mcmp>
 8004686:	2800      	cmp	r0, #0
 8004688:	dcb0      	bgt.n	80045ec <_dtoa_r+0xa64>
 800468a:	d102      	bne.n	8004692 <_dtoa_r+0xb0a>
 800468c:	f018 0f01 	tst.w	r8, #1
 8004690:	d1ac      	bne.n	80045ec <_dtoa_r+0xa64>
 8004692:	4633      	mov	r3, r6
 8004694:	461e      	mov	r6, r3
 8004696:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800469a:	2a30      	cmp	r2, #48	@ 0x30
 800469c:	d0fa      	beq.n	8004694 <_dtoa_r+0xb0c>
 800469e:	e5be      	b.n	800421e <_dtoa_r+0x696>
 80046a0:	459a      	cmp	sl, r3
 80046a2:	d1a4      	bne.n	80045ee <_dtoa_r+0xa66>
 80046a4:	9b04      	ldr	r3, [sp, #16]
 80046a6:	3301      	adds	r3, #1
 80046a8:	9304      	str	r3, [sp, #16]
 80046aa:	2331      	movs	r3, #49	@ 0x31
 80046ac:	f88a 3000 	strb.w	r3, [sl]
 80046b0:	e5b5      	b.n	800421e <_dtoa_r+0x696>
 80046b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046b4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004714 <_dtoa_r+0xb8c>
 80046b8:	b11b      	cbz	r3, 80046c2 <_dtoa_r+0xb3a>
 80046ba:	f10a 0308 	add.w	r3, sl, #8
 80046be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4650      	mov	r0, sl
 80046c4:	b017      	add	sp, #92	@ 0x5c
 80046c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f77f ae3d 	ble.w	800434c <_dtoa_r+0x7c4>
 80046d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80046d6:	2001      	movs	r0, #1
 80046d8:	e65b      	b.n	8004392 <_dtoa_r+0x80a>
 80046da:	9b08      	ldr	r3, [sp, #32]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f77f aed6 	ble.w	800448e <_dtoa_r+0x906>
 80046e2:	4656      	mov	r6, sl
 80046e4:	4621      	mov	r1, r4
 80046e6:	4648      	mov	r0, r9
 80046e8:	f7ff f9c5 	bl	8003a76 <quorem>
 80046ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80046f0:	9b08      	ldr	r3, [sp, #32]
 80046f2:	f806 8b01 	strb.w	r8, [r6], #1
 80046f6:	eba6 020a 	sub.w	r2, r6, sl
 80046fa:	4293      	cmp	r3, r2
 80046fc:	ddb3      	ble.n	8004666 <_dtoa_r+0xade>
 80046fe:	4649      	mov	r1, r9
 8004700:	2300      	movs	r3, #0
 8004702:	220a      	movs	r2, #10
 8004704:	4658      	mov	r0, fp
 8004706:	f000 fb1f 	bl	8004d48 <__multadd>
 800470a:	4681      	mov	r9, r0
 800470c:	e7ea      	b.n	80046e4 <_dtoa_r+0xb5c>
 800470e:	bf00      	nop
 8004710:	08007e36 	.word	0x08007e36
 8004714:	08007dba 	.word	0x08007dba

08004718 <__ssputs_r>:
 8004718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800471c:	461f      	mov	r7, r3
 800471e:	688e      	ldr	r6, [r1, #8]
 8004720:	4682      	mov	sl, r0
 8004722:	42be      	cmp	r6, r7
 8004724:	460c      	mov	r4, r1
 8004726:	4690      	mov	r8, r2
 8004728:	680b      	ldr	r3, [r1, #0]
 800472a:	d82d      	bhi.n	8004788 <__ssputs_r+0x70>
 800472c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004730:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004734:	d026      	beq.n	8004784 <__ssputs_r+0x6c>
 8004736:	6965      	ldr	r5, [r4, #20]
 8004738:	6909      	ldr	r1, [r1, #16]
 800473a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800473e:	eba3 0901 	sub.w	r9, r3, r1
 8004742:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004746:	1c7b      	adds	r3, r7, #1
 8004748:	444b      	add	r3, r9
 800474a:	106d      	asrs	r5, r5, #1
 800474c:	429d      	cmp	r5, r3
 800474e:	bf38      	it	cc
 8004750:	461d      	movcc	r5, r3
 8004752:	0553      	lsls	r3, r2, #21
 8004754:	d527      	bpl.n	80047a6 <__ssputs_r+0x8e>
 8004756:	4629      	mov	r1, r5
 8004758:	f000 f960 	bl	8004a1c <_malloc_r>
 800475c:	4606      	mov	r6, r0
 800475e:	b360      	cbz	r0, 80047ba <__ssputs_r+0xa2>
 8004760:	464a      	mov	r2, r9
 8004762:	6921      	ldr	r1, [r4, #16]
 8004764:	f001 f808 	bl	8005778 <memcpy>
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800476e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	6126      	str	r6, [r4, #16]
 8004776:	444e      	add	r6, r9
 8004778:	6026      	str	r6, [r4, #0]
 800477a:	463e      	mov	r6, r7
 800477c:	6165      	str	r5, [r4, #20]
 800477e:	eba5 0509 	sub.w	r5, r5, r9
 8004782:	60a5      	str	r5, [r4, #8]
 8004784:	42be      	cmp	r6, r7
 8004786:	d900      	bls.n	800478a <__ssputs_r+0x72>
 8004788:	463e      	mov	r6, r7
 800478a:	4632      	mov	r2, r6
 800478c:	4641      	mov	r1, r8
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	f000 ff5f 	bl	8005652 <memmove>
 8004794:	2000      	movs	r0, #0
 8004796:	68a3      	ldr	r3, [r4, #8]
 8004798:	1b9b      	subs	r3, r3, r6
 800479a:	60a3      	str	r3, [r4, #8]
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	4433      	add	r3, r6
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a6:	462a      	mov	r2, r5
 80047a8:	f000 fe2f 	bl	800540a <_realloc_r>
 80047ac:	4606      	mov	r6, r0
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d1e0      	bne.n	8004774 <__ssputs_r+0x5c>
 80047b2:	4650      	mov	r0, sl
 80047b4:	6921      	ldr	r1, [r4, #16]
 80047b6:	f001 f81f 	bl	80057f8 <_free_r>
 80047ba:	230c      	movs	r3, #12
 80047bc:	f8ca 3000 	str.w	r3, [sl]
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ca:	81a3      	strh	r3, [r4, #12]
 80047cc:	e7e9      	b.n	80047a2 <__ssputs_r+0x8a>
	...

080047d0 <_svfiprintf_r>:
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	4698      	mov	r8, r3
 80047d6:	898b      	ldrh	r3, [r1, #12]
 80047d8:	4607      	mov	r7, r0
 80047da:	061b      	lsls	r3, r3, #24
 80047dc:	460d      	mov	r5, r1
 80047de:	4614      	mov	r4, r2
 80047e0:	b09d      	sub	sp, #116	@ 0x74
 80047e2:	d510      	bpl.n	8004806 <_svfiprintf_r+0x36>
 80047e4:	690b      	ldr	r3, [r1, #16]
 80047e6:	b973      	cbnz	r3, 8004806 <_svfiprintf_r+0x36>
 80047e8:	2140      	movs	r1, #64	@ 0x40
 80047ea:	f000 f917 	bl	8004a1c <_malloc_r>
 80047ee:	6028      	str	r0, [r5, #0]
 80047f0:	6128      	str	r0, [r5, #16]
 80047f2:	b930      	cbnz	r0, 8004802 <_svfiprintf_r+0x32>
 80047f4:	230c      	movs	r3, #12
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047fc:	b01d      	add	sp, #116	@ 0x74
 80047fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004802:	2340      	movs	r3, #64	@ 0x40
 8004804:	616b      	str	r3, [r5, #20]
 8004806:	2300      	movs	r3, #0
 8004808:	9309      	str	r3, [sp, #36]	@ 0x24
 800480a:	2320      	movs	r3, #32
 800480c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004810:	2330      	movs	r3, #48	@ 0x30
 8004812:	f04f 0901 	mov.w	r9, #1
 8004816:	f8cd 800c 	str.w	r8, [sp, #12]
 800481a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80049b4 <_svfiprintf_r+0x1e4>
 800481e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004822:	4623      	mov	r3, r4
 8004824:	469a      	mov	sl, r3
 8004826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800482a:	b10a      	cbz	r2, 8004830 <_svfiprintf_r+0x60>
 800482c:	2a25      	cmp	r2, #37	@ 0x25
 800482e:	d1f9      	bne.n	8004824 <_svfiprintf_r+0x54>
 8004830:	ebba 0b04 	subs.w	fp, sl, r4
 8004834:	d00b      	beq.n	800484e <_svfiprintf_r+0x7e>
 8004836:	465b      	mov	r3, fp
 8004838:	4622      	mov	r2, r4
 800483a:	4629      	mov	r1, r5
 800483c:	4638      	mov	r0, r7
 800483e:	f7ff ff6b 	bl	8004718 <__ssputs_r>
 8004842:	3001      	adds	r0, #1
 8004844:	f000 80a7 	beq.w	8004996 <_svfiprintf_r+0x1c6>
 8004848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800484a:	445a      	add	r2, fp
 800484c:	9209      	str	r2, [sp, #36]	@ 0x24
 800484e:	f89a 3000 	ldrb.w	r3, [sl]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 809f 	beq.w	8004996 <_svfiprintf_r+0x1c6>
 8004858:	2300      	movs	r3, #0
 800485a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800485e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004862:	f10a 0a01 	add.w	sl, sl, #1
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	9307      	str	r3, [sp, #28]
 800486a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800486e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004870:	4654      	mov	r4, sl
 8004872:	2205      	movs	r2, #5
 8004874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004878:	484e      	ldr	r0, [pc, #312]	@ (80049b4 <_svfiprintf_r+0x1e4>)
 800487a:	f7ff f8ee 	bl	8003a5a <memchr>
 800487e:	9a04      	ldr	r2, [sp, #16]
 8004880:	b9d8      	cbnz	r0, 80048ba <_svfiprintf_r+0xea>
 8004882:	06d0      	lsls	r0, r2, #27
 8004884:	bf44      	itt	mi
 8004886:	2320      	movmi	r3, #32
 8004888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800488c:	0711      	lsls	r1, r2, #28
 800488e:	bf44      	itt	mi
 8004890:	232b      	movmi	r3, #43	@ 0x2b
 8004892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004896:	f89a 3000 	ldrb.w	r3, [sl]
 800489a:	2b2a      	cmp	r3, #42	@ 0x2a
 800489c:	d015      	beq.n	80048ca <_svfiprintf_r+0xfa>
 800489e:	4654      	mov	r4, sl
 80048a0:	2000      	movs	r0, #0
 80048a2:	f04f 0c0a 	mov.w	ip, #10
 80048a6:	9a07      	ldr	r2, [sp, #28]
 80048a8:	4621      	mov	r1, r4
 80048aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ae:	3b30      	subs	r3, #48	@ 0x30
 80048b0:	2b09      	cmp	r3, #9
 80048b2:	d94b      	bls.n	800494c <_svfiprintf_r+0x17c>
 80048b4:	b1b0      	cbz	r0, 80048e4 <_svfiprintf_r+0x114>
 80048b6:	9207      	str	r2, [sp, #28]
 80048b8:	e014      	b.n	80048e4 <_svfiprintf_r+0x114>
 80048ba:	eba0 0308 	sub.w	r3, r0, r8
 80048be:	fa09 f303 	lsl.w	r3, r9, r3
 80048c2:	4313      	orrs	r3, r2
 80048c4:	46a2      	mov	sl, r4
 80048c6:	9304      	str	r3, [sp, #16]
 80048c8:	e7d2      	b.n	8004870 <_svfiprintf_r+0xa0>
 80048ca:	9b03      	ldr	r3, [sp, #12]
 80048cc:	1d19      	adds	r1, r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	9103      	str	r1, [sp, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bfbb      	ittet	lt
 80048d6:	425b      	neglt	r3, r3
 80048d8:	f042 0202 	orrlt.w	r2, r2, #2
 80048dc:	9307      	strge	r3, [sp, #28]
 80048de:	9307      	strlt	r3, [sp, #28]
 80048e0:	bfb8      	it	lt
 80048e2:	9204      	strlt	r2, [sp, #16]
 80048e4:	7823      	ldrb	r3, [r4, #0]
 80048e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80048e8:	d10a      	bne.n	8004900 <_svfiprintf_r+0x130>
 80048ea:	7863      	ldrb	r3, [r4, #1]
 80048ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ee:	d132      	bne.n	8004956 <_svfiprintf_r+0x186>
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	3402      	adds	r4, #2
 80048f4:	1d1a      	adds	r2, r3, #4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	9203      	str	r2, [sp, #12]
 80048fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048fe:	9305      	str	r3, [sp, #20]
 8004900:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80049b8 <_svfiprintf_r+0x1e8>
 8004904:	2203      	movs	r2, #3
 8004906:	4650      	mov	r0, sl
 8004908:	7821      	ldrb	r1, [r4, #0]
 800490a:	f7ff f8a6 	bl	8003a5a <memchr>
 800490e:	b138      	cbz	r0, 8004920 <_svfiprintf_r+0x150>
 8004910:	2240      	movs	r2, #64	@ 0x40
 8004912:	9b04      	ldr	r3, [sp, #16]
 8004914:	eba0 000a 	sub.w	r0, r0, sl
 8004918:	4082      	lsls	r2, r0
 800491a:	4313      	orrs	r3, r2
 800491c:	3401      	adds	r4, #1
 800491e:	9304      	str	r3, [sp, #16]
 8004920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004924:	2206      	movs	r2, #6
 8004926:	4825      	ldr	r0, [pc, #148]	@ (80049bc <_svfiprintf_r+0x1ec>)
 8004928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800492c:	f7ff f895 	bl	8003a5a <memchr>
 8004930:	2800      	cmp	r0, #0
 8004932:	d036      	beq.n	80049a2 <_svfiprintf_r+0x1d2>
 8004934:	4b22      	ldr	r3, [pc, #136]	@ (80049c0 <_svfiprintf_r+0x1f0>)
 8004936:	bb1b      	cbnz	r3, 8004980 <_svfiprintf_r+0x1b0>
 8004938:	9b03      	ldr	r3, [sp, #12]
 800493a:	3307      	adds	r3, #7
 800493c:	f023 0307 	bic.w	r3, r3, #7
 8004940:	3308      	adds	r3, #8
 8004942:	9303      	str	r3, [sp, #12]
 8004944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004946:	4433      	add	r3, r6
 8004948:	9309      	str	r3, [sp, #36]	@ 0x24
 800494a:	e76a      	b.n	8004822 <_svfiprintf_r+0x52>
 800494c:	460c      	mov	r4, r1
 800494e:	2001      	movs	r0, #1
 8004950:	fb0c 3202 	mla	r2, ip, r2, r3
 8004954:	e7a8      	b.n	80048a8 <_svfiprintf_r+0xd8>
 8004956:	2300      	movs	r3, #0
 8004958:	f04f 0c0a 	mov.w	ip, #10
 800495c:	4619      	mov	r1, r3
 800495e:	3401      	adds	r4, #1
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	4620      	mov	r0, r4
 8004964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004968:	3a30      	subs	r2, #48	@ 0x30
 800496a:	2a09      	cmp	r2, #9
 800496c:	d903      	bls.n	8004976 <_svfiprintf_r+0x1a6>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0c6      	beq.n	8004900 <_svfiprintf_r+0x130>
 8004972:	9105      	str	r1, [sp, #20]
 8004974:	e7c4      	b.n	8004900 <_svfiprintf_r+0x130>
 8004976:	4604      	mov	r4, r0
 8004978:	2301      	movs	r3, #1
 800497a:	fb0c 2101 	mla	r1, ip, r1, r2
 800497e:	e7f0      	b.n	8004962 <_svfiprintf_r+0x192>
 8004980:	ab03      	add	r3, sp, #12
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	462a      	mov	r2, r5
 8004986:	4638      	mov	r0, r7
 8004988:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <_svfiprintf_r+0x1f4>)
 800498a:	a904      	add	r1, sp, #16
 800498c:	f7fe fb2e 	bl	8002fec <_printf_float>
 8004990:	1c42      	adds	r2, r0, #1
 8004992:	4606      	mov	r6, r0
 8004994:	d1d6      	bne.n	8004944 <_svfiprintf_r+0x174>
 8004996:	89ab      	ldrh	r3, [r5, #12]
 8004998:	065b      	lsls	r3, r3, #25
 800499a:	f53f af2d 	bmi.w	80047f8 <_svfiprintf_r+0x28>
 800499e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049a0:	e72c      	b.n	80047fc <_svfiprintf_r+0x2c>
 80049a2:	ab03      	add	r3, sp, #12
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	462a      	mov	r2, r5
 80049a8:	4638      	mov	r0, r7
 80049aa:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <_svfiprintf_r+0x1f4>)
 80049ac:	a904      	add	r1, sp, #16
 80049ae:	f7fe fdbb 	bl	8003528 <_printf_i>
 80049b2:	e7ed      	b.n	8004990 <_svfiprintf_r+0x1c0>
 80049b4:	08007e47 	.word	0x08007e47
 80049b8:	08007e4d 	.word	0x08007e4d
 80049bc:	08007e51 	.word	0x08007e51
 80049c0:	08002fed 	.word	0x08002fed
 80049c4:	08004719 	.word	0x08004719

080049c8 <malloc>:
 80049c8:	4b02      	ldr	r3, [pc, #8]	@ (80049d4 <malloc+0xc>)
 80049ca:	4601      	mov	r1, r0
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	f000 b825 	b.w	8004a1c <_malloc_r>
 80049d2:	bf00      	nop
 80049d4:	2000001c 	.word	0x2000001c

080049d8 <sbrk_aligned>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4e0f      	ldr	r6, [pc, #60]	@ (8004a18 <sbrk_aligned+0x40>)
 80049dc:	460c      	mov	r4, r1
 80049de:	6831      	ldr	r1, [r6, #0]
 80049e0:	4605      	mov	r5, r0
 80049e2:	b911      	cbnz	r1, 80049ea <sbrk_aligned+0x12>
 80049e4:	f000 fea6 	bl	8005734 <_sbrk_r>
 80049e8:	6030      	str	r0, [r6, #0]
 80049ea:	4621      	mov	r1, r4
 80049ec:	4628      	mov	r0, r5
 80049ee:	f000 fea1 	bl	8005734 <_sbrk_r>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	d103      	bne.n	80049fe <sbrk_aligned+0x26>
 80049f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049fa:	4620      	mov	r0, r4
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
 80049fe:	1cc4      	adds	r4, r0, #3
 8004a00:	f024 0403 	bic.w	r4, r4, #3
 8004a04:	42a0      	cmp	r0, r4
 8004a06:	d0f8      	beq.n	80049fa <sbrk_aligned+0x22>
 8004a08:	1a21      	subs	r1, r4, r0
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 fe92 	bl	8005734 <_sbrk_r>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d1f2      	bne.n	80049fa <sbrk_aligned+0x22>
 8004a14:	e7ef      	b.n	80049f6 <sbrk_aligned+0x1e>
 8004a16:	bf00      	nop
 8004a18:	20001744 	.word	0x20001744

08004a1c <_malloc_r>:
 8004a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a20:	1ccd      	adds	r5, r1, #3
 8004a22:	f025 0503 	bic.w	r5, r5, #3
 8004a26:	3508      	adds	r5, #8
 8004a28:	2d0c      	cmp	r5, #12
 8004a2a:	bf38      	it	cc
 8004a2c:	250c      	movcc	r5, #12
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	4606      	mov	r6, r0
 8004a32:	db01      	blt.n	8004a38 <_malloc_r+0x1c>
 8004a34:	42a9      	cmp	r1, r5
 8004a36:	d904      	bls.n	8004a42 <_malloc_r+0x26>
 8004a38:	230c      	movs	r3, #12
 8004a3a:	6033      	str	r3, [r6, #0]
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b18 <_malloc_r+0xfc>
 8004a46:	f000 f911 	bl	8004c6c <__malloc_lock>
 8004a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a4e:	461c      	mov	r4, r3
 8004a50:	bb44      	cbnz	r4, 8004aa4 <_malloc_r+0x88>
 8004a52:	4629      	mov	r1, r5
 8004a54:	4630      	mov	r0, r6
 8004a56:	f7ff ffbf 	bl	80049d8 <sbrk_aligned>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	d158      	bne.n	8004b12 <_malloc_r+0xf6>
 8004a60:	f8d8 4000 	ldr.w	r4, [r8]
 8004a64:	4627      	mov	r7, r4
 8004a66:	2f00      	cmp	r7, #0
 8004a68:	d143      	bne.n	8004af2 <_malloc_r+0xd6>
 8004a6a:	2c00      	cmp	r4, #0
 8004a6c:	d04b      	beq.n	8004b06 <_malloc_r+0xea>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	4639      	mov	r1, r7
 8004a72:	4630      	mov	r0, r6
 8004a74:	eb04 0903 	add.w	r9, r4, r3
 8004a78:	f000 fe5c 	bl	8005734 <_sbrk_r>
 8004a7c:	4581      	cmp	r9, r0
 8004a7e:	d142      	bne.n	8004b06 <_malloc_r+0xea>
 8004a80:	6821      	ldr	r1, [r4, #0]
 8004a82:	4630      	mov	r0, r6
 8004a84:	1a6d      	subs	r5, r5, r1
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7ff ffa6 	bl	80049d8 <sbrk_aligned>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d03a      	beq.n	8004b06 <_malloc_r+0xea>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	442b      	add	r3, r5
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	f8d8 3000 	ldr.w	r3, [r8]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	bb62      	cbnz	r2, 8004af8 <_malloc_r+0xdc>
 8004a9e:	f8c8 7000 	str.w	r7, [r8]
 8004aa2:	e00f      	b.n	8004ac4 <_malloc_r+0xa8>
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	1b52      	subs	r2, r2, r5
 8004aa8:	d420      	bmi.n	8004aec <_malloc_r+0xd0>
 8004aaa:	2a0b      	cmp	r2, #11
 8004aac:	d917      	bls.n	8004ade <_malloc_r+0xc2>
 8004aae:	1961      	adds	r1, r4, r5
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	6025      	str	r5, [r4, #0]
 8004ab4:	bf18      	it	ne
 8004ab6:	6059      	strne	r1, [r3, #4]
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	bf08      	it	eq
 8004abc:	f8c8 1000 	streq.w	r1, [r8]
 8004ac0:	5162      	str	r2, [r4, r5]
 8004ac2:	604b      	str	r3, [r1, #4]
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 f8d7 	bl	8004c78 <__malloc_unlock>
 8004aca:	f104 000b 	add.w	r0, r4, #11
 8004ace:	1d23      	adds	r3, r4, #4
 8004ad0:	f020 0007 	bic.w	r0, r0, #7
 8004ad4:	1ac2      	subs	r2, r0, r3
 8004ad6:	bf1c      	itt	ne
 8004ad8:	1a1b      	subne	r3, r3, r0
 8004ada:	50a3      	strne	r3, [r4, r2]
 8004adc:	e7af      	b.n	8004a3e <_malloc_r+0x22>
 8004ade:	6862      	ldr	r2, [r4, #4]
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	bf0c      	ite	eq
 8004ae4:	f8c8 2000 	streq.w	r2, [r8]
 8004ae8:	605a      	strne	r2, [r3, #4]
 8004aea:	e7eb      	b.n	8004ac4 <_malloc_r+0xa8>
 8004aec:	4623      	mov	r3, r4
 8004aee:	6864      	ldr	r4, [r4, #4]
 8004af0:	e7ae      	b.n	8004a50 <_malloc_r+0x34>
 8004af2:	463c      	mov	r4, r7
 8004af4:	687f      	ldr	r7, [r7, #4]
 8004af6:	e7b6      	b.n	8004a66 <_malloc_r+0x4a>
 8004af8:	461a      	mov	r2, r3
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	d1fb      	bne.n	8004af8 <_malloc_r+0xdc>
 8004b00:	2300      	movs	r3, #0
 8004b02:	6053      	str	r3, [r2, #4]
 8004b04:	e7de      	b.n	8004ac4 <_malloc_r+0xa8>
 8004b06:	230c      	movs	r3, #12
 8004b08:	4630      	mov	r0, r6
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	f000 f8b4 	bl	8004c78 <__malloc_unlock>
 8004b10:	e794      	b.n	8004a3c <_malloc_r+0x20>
 8004b12:	6005      	str	r5, [r0, #0]
 8004b14:	e7d6      	b.n	8004ac4 <_malloc_r+0xa8>
 8004b16:	bf00      	nop
 8004b18:	20001748 	.word	0x20001748

08004b1c <__sflush_r>:
 8004b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	0716      	lsls	r6, r2, #28
 8004b24:	4605      	mov	r5, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	d454      	bmi.n	8004bd4 <__sflush_r+0xb8>
 8004b2a:	684b      	ldr	r3, [r1, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	dc02      	bgt.n	8004b36 <__sflush_r+0x1a>
 8004b30:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	dd48      	ble.n	8004bc8 <__sflush_r+0xac>
 8004b36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b38:	2e00      	cmp	r6, #0
 8004b3a:	d045      	beq.n	8004bc8 <__sflush_r+0xac>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b42:	682f      	ldr	r7, [r5, #0]
 8004b44:	6a21      	ldr	r1, [r4, #32]
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	d030      	beq.n	8004bac <__sflush_r+0x90>
 8004b4a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	0759      	lsls	r1, r3, #29
 8004b50:	d505      	bpl.n	8004b5e <__sflush_r+0x42>
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	1ad2      	subs	r2, r2, r3
 8004b56:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b58:	b10b      	cbz	r3, 8004b5e <__sflush_r+0x42>
 8004b5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b5c:	1ad2      	subs	r2, r2, r3
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4628      	mov	r0, r5
 8004b62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b64:	6a21      	ldr	r1, [r4, #32]
 8004b66:	47b0      	blx	r6
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	d106      	bne.n	8004b7c <__sflush_r+0x60>
 8004b6e:	6829      	ldr	r1, [r5, #0]
 8004b70:	291d      	cmp	r1, #29
 8004b72:	d82b      	bhi.n	8004bcc <__sflush_r+0xb0>
 8004b74:	4a28      	ldr	r2, [pc, #160]	@ (8004c18 <__sflush_r+0xfc>)
 8004b76:	410a      	asrs	r2, r1
 8004b78:	07d6      	lsls	r6, r2, #31
 8004b7a:	d427      	bmi.n	8004bcc <__sflush_r+0xb0>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	6062      	str	r2, [r4, #4]
 8004b80:	6922      	ldr	r2, [r4, #16]
 8004b82:	04d9      	lsls	r1, r3, #19
 8004b84:	6022      	str	r2, [r4, #0]
 8004b86:	d504      	bpl.n	8004b92 <__sflush_r+0x76>
 8004b88:	1c42      	adds	r2, r0, #1
 8004b8a:	d101      	bne.n	8004b90 <__sflush_r+0x74>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b903      	cbnz	r3, 8004b92 <__sflush_r+0x76>
 8004b90:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b94:	602f      	str	r7, [r5, #0]
 8004b96:	b1b9      	cbz	r1, 8004bc8 <__sflush_r+0xac>
 8004b98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	d002      	beq.n	8004ba6 <__sflush_r+0x8a>
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 fe29 	bl	80057f8 <_free_r>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004baa:	e00d      	b.n	8004bc8 <__sflush_r+0xac>
 8004bac:	2301      	movs	r3, #1
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b0      	blx	r6
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	1c50      	adds	r0, r2, #1
 8004bb6:	d1c9      	bne.n	8004b4c <__sflush_r+0x30>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0c6      	beq.n	8004b4c <__sflush_r+0x30>
 8004bbe:	2b1d      	cmp	r3, #29
 8004bc0:	d001      	beq.n	8004bc6 <__sflush_r+0xaa>
 8004bc2:	2b16      	cmp	r3, #22
 8004bc4:	d11d      	bne.n	8004c02 <__sflush_r+0xe6>
 8004bc6:	602f      	str	r7, [r5, #0]
 8004bc8:	2000      	movs	r0, #0
 8004bca:	e021      	b.n	8004c10 <__sflush_r+0xf4>
 8004bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd0:	b21b      	sxth	r3, r3
 8004bd2:	e01a      	b.n	8004c0a <__sflush_r+0xee>
 8004bd4:	690f      	ldr	r7, [r1, #16]
 8004bd6:	2f00      	cmp	r7, #0
 8004bd8:	d0f6      	beq.n	8004bc8 <__sflush_r+0xac>
 8004bda:	0793      	lsls	r3, r2, #30
 8004bdc:	bf18      	it	ne
 8004bde:	2300      	movne	r3, #0
 8004be0:	680e      	ldr	r6, [r1, #0]
 8004be2:	bf08      	it	eq
 8004be4:	694b      	ldreq	r3, [r1, #20]
 8004be6:	1bf6      	subs	r6, r6, r7
 8004be8:	600f      	str	r7, [r1, #0]
 8004bea:	608b      	str	r3, [r1, #8]
 8004bec:	2e00      	cmp	r6, #0
 8004bee:	ddeb      	ble.n	8004bc8 <__sflush_r+0xac>
 8004bf0:	4633      	mov	r3, r6
 8004bf2:	463a      	mov	r2, r7
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	6a21      	ldr	r1, [r4, #32]
 8004bf8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004bfc:	47e0      	blx	ip
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	dc07      	bgt.n	8004c12 <__sflush_r+0xf6>
 8004c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c12:	4407      	add	r7, r0
 8004c14:	1a36      	subs	r6, r6, r0
 8004c16:	e7e9      	b.n	8004bec <__sflush_r+0xd0>
 8004c18:	dfbffffe 	.word	0xdfbffffe

08004c1c <_fflush_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	690b      	ldr	r3, [r1, #16]
 8004c20:	4605      	mov	r5, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	b913      	cbnz	r3, 8004c2c <_fflush_r+0x10>
 8004c26:	2500      	movs	r5, #0
 8004c28:	4628      	mov	r0, r5
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	b118      	cbz	r0, 8004c36 <_fflush_r+0x1a>
 8004c2e:	6a03      	ldr	r3, [r0, #32]
 8004c30:	b90b      	cbnz	r3, 8004c36 <_fflush_r+0x1a>
 8004c32:	f7fe fe45 	bl	80038c0 <__sinit>
 8004c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f3      	beq.n	8004c26 <_fflush_r+0xa>
 8004c3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c40:	07d0      	lsls	r0, r2, #31
 8004c42:	d404      	bmi.n	8004c4e <_fflush_r+0x32>
 8004c44:	0599      	lsls	r1, r3, #22
 8004c46:	d402      	bmi.n	8004c4e <_fflush_r+0x32>
 8004c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c4a:	f7fe ff04 	bl	8003a56 <__retarget_lock_acquire_recursive>
 8004c4e:	4628      	mov	r0, r5
 8004c50:	4621      	mov	r1, r4
 8004c52:	f7ff ff63 	bl	8004b1c <__sflush_r>
 8004c56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c58:	4605      	mov	r5, r0
 8004c5a:	07da      	lsls	r2, r3, #31
 8004c5c:	d4e4      	bmi.n	8004c28 <_fflush_r+0xc>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	059b      	lsls	r3, r3, #22
 8004c62:	d4e1      	bmi.n	8004c28 <_fflush_r+0xc>
 8004c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c66:	f7fe fef7 	bl	8003a58 <__retarget_lock_release_recursive>
 8004c6a:	e7dd      	b.n	8004c28 <_fflush_r+0xc>

08004c6c <__malloc_lock>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	@ (8004c74 <__malloc_lock+0x8>)
 8004c6e:	f7fe bef2 	b.w	8003a56 <__retarget_lock_acquire_recursive>
 8004c72:	bf00      	nop
 8004c74:	20001740 	.word	0x20001740

08004c78 <__malloc_unlock>:
 8004c78:	4801      	ldr	r0, [pc, #4]	@ (8004c80 <__malloc_unlock+0x8>)
 8004c7a:	f7fe beed 	b.w	8003a58 <__retarget_lock_release_recursive>
 8004c7e:	bf00      	nop
 8004c80:	20001740 	.word	0x20001740

08004c84 <_Balloc>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	69c6      	ldr	r6, [r0, #28]
 8004c88:	4604      	mov	r4, r0
 8004c8a:	460d      	mov	r5, r1
 8004c8c:	b976      	cbnz	r6, 8004cac <_Balloc+0x28>
 8004c8e:	2010      	movs	r0, #16
 8004c90:	f7ff fe9a 	bl	80049c8 <malloc>
 8004c94:	4602      	mov	r2, r0
 8004c96:	61e0      	str	r0, [r4, #28]
 8004c98:	b920      	cbnz	r0, 8004ca4 <_Balloc+0x20>
 8004c9a:	216b      	movs	r1, #107	@ 0x6b
 8004c9c:	4b17      	ldr	r3, [pc, #92]	@ (8004cfc <_Balloc+0x78>)
 8004c9e:	4818      	ldr	r0, [pc, #96]	@ (8004d00 <_Balloc+0x7c>)
 8004ca0:	f000 fd78 	bl	8005794 <__assert_func>
 8004ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ca8:	6006      	str	r6, [r0, #0]
 8004caa:	60c6      	str	r6, [r0, #12]
 8004cac:	69e6      	ldr	r6, [r4, #28]
 8004cae:	68f3      	ldr	r3, [r6, #12]
 8004cb0:	b183      	cbz	r3, 8004cd4 <_Balloc+0x50>
 8004cb2:	69e3      	ldr	r3, [r4, #28]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004cba:	b9b8      	cbnz	r0, 8004cec <_Balloc+0x68>
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8004cc2:	1d72      	adds	r2, r6, #5
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	f000 fd82 	bl	80057d0 <_calloc_r>
 8004ccc:	b160      	cbz	r0, 8004ce8 <_Balloc+0x64>
 8004cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cd2:	e00e      	b.n	8004cf2 <_Balloc+0x6e>
 8004cd4:	2221      	movs	r2, #33	@ 0x21
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f000 fd79 	bl	80057d0 <_calloc_r>
 8004cde:	69e3      	ldr	r3, [r4, #28]
 8004ce0:	60f0      	str	r0, [r6, #12]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e4      	bne.n	8004cb2 <_Balloc+0x2e>
 8004ce8:	2000      	movs	r0, #0
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	6802      	ldr	r2, [r0, #0]
 8004cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004cf8:	e7f7      	b.n	8004cea <_Balloc+0x66>
 8004cfa:	bf00      	nop
 8004cfc:	08007dc7 	.word	0x08007dc7
 8004d00:	08007e58 	.word	0x08007e58

08004d04 <_Bfree>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	69c6      	ldr	r6, [r0, #28]
 8004d08:	4605      	mov	r5, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	b976      	cbnz	r6, 8004d2c <_Bfree+0x28>
 8004d0e:	2010      	movs	r0, #16
 8004d10:	f7ff fe5a 	bl	80049c8 <malloc>
 8004d14:	4602      	mov	r2, r0
 8004d16:	61e8      	str	r0, [r5, #28]
 8004d18:	b920      	cbnz	r0, 8004d24 <_Bfree+0x20>
 8004d1a:	218f      	movs	r1, #143	@ 0x8f
 8004d1c:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <_Bfree+0x3c>)
 8004d1e:	4809      	ldr	r0, [pc, #36]	@ (8004d44 <_Bfree+0x40>)
 8004d20:	f000 fd38 	bl	8005794 <__assert_func>
 8004d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d28:	6006      	str	r6, [r0, #0]
 8004d2a:	60c6      	str	r6, [r0, #12]
 8004d2c:	b13c      	cbz	r4, 8004d3e <_Bfree+0x3a>
 8004d2e:	69eb      	ldr	r3, [r5, #28]
 8004d30:	6862      	ldr	r2, [r4, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d38:	6021      	str	r1, [r4, #0]
 8004d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	08007dc7 	.word	0x08007dc7
 8004d44:	08007e58 	.word	0x08007e58

08004d48 <__multadd>:
 8004d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	461e      	mov	r6, r3
 8004d52:	2000      	movs	r0, #0
 8004d54:	690d      	ldr	r5, [r1, #16]
 8004d56:	f101 0c14 	add.w	ip, r1, #20
 8004d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8004d5e:	3001      	adds	r0, #1
 8004d60:	b299      	uxth	r1, r3
 8004d62:	fb02 6101 	mla	r1, r2, r1, r6
 8004d66:	0c1e      	lsrs	r6, r3, #16
 8004d68:	0c0b      	lsrs	r3, r1, #16
 8004d6a:	fb02 3306 	mla	r3, r2, r6, r3
 8004d6e:	b289      	uxth	r1, r1
 8004d70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d74:	4285      	cmp	r5, r0
 8004d76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d7a:	f84c 1b04 	str.w	r1, [ip], #4
 8004d7e:	dcec      	bgt.n	8004d5a <__multadd+0x12>
 8004d80:	b30e      	cbz	r6, 8004dc6 <__multadd+0x7e>
 8004d82:	68a3      	ldr	r3, [r4, #8]
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dc19      	bgt.n	8004dbc <__multadd+0x74>
 8004d88:	6861      	ldr	r1, [r4, #4]
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	3101      	adds	r1, #1
 8004d8e:	f7ff ff79 	bl	8004c84 <_Balloc>
 8004d92:	4680      	mov	r8, r0
 8004d94:	b928      	cbnz	r0, 8004da2 <__multadd+0x5a>
 8004d96:	4602      	mov	r2, r0
 8004d98:	21ba      	movs	r1, #186	@ 0xba
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dcc <__multadd+0x84>)
 8004d9c:	480c      	ldr	r0, [pc, #48]	@ (8004dd0 <__multadd+0x88>)
 8004d9e:	f000 fcf9 	bl	8005794 <__assert_func>
 8004da2:	6922      	ldr	r2, [r4, #16]
 8004da4:	f104 010c 	add.w	r1, r4, #12
 8004da8:	3202      	adds	r2, #2
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	300c      	adds	r0, #12
 8004dae:	f000 fce3 	bl	8005778 <memcpy>
 8004db2:	4621      	mov	r1, r4
 8004db4:	4638      	mov	r0, r7
 8004db6:	f7ff ffa5 	bl	8004d04 <_Bfree>
 8004dba:	4644      	mov	r4, r8
 8004dbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004dc0:	3501      	adds	r5, #1
 8004dc2:	615e      	str	r6, [r3, #20]
 8004dc4:	6125      	str	r5, [r4, #16]
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dcc:	08007e36 	.word	0x08007e36
 8004dd0:	08007e58 	.word	0x08007e58

08004dd4 <__hi0bits>:
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004dda:	bf3a      	itte	cc
 8004ddc:	0403      	lslcc	r3, r0, #16
 8004dde:	2010      	movcc	r0, #16
 8004de0:	2000      	movcs	r0, #0
 8004de2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004de6:	bf3c      	itt	cc
 8004de8:	021b      	lslcc	r3, r3, #8
 8004dea:	3008      	addcc	r0, #8
 8004dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df0:	bf3c      	itt	cc
 8004df2:	011b      	lslcc	r3, r3, #4
 8004df4:	3004      	addcc	r0, #4
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfa:	bf3c      	itt	cc
 8004dfc:	009b      	lslcc	r3, r3, #2
 8004dfe:	3002      	addcc	r0, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	db05      	blt.n	8004e10 <__hi0bits+0x3c>
 8004e04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004e08:	f100 0001 	add.w	r0, r0, #1
 8004e0c:	bf08      	it	eq
 8004e0e:	2020      	moveq	r0, #32
 8004e10:	4770      	bx	lr

08004e12 <__lo0bits>:
 8004e12:	6803      	ldr	r3, [r0, #0]
 8004e14:	4602      	mov	r2, r0
 8004e16:	f013 0007 	ands.w	r0, r3, #7
 8004e1a:	d00b      	beq.n	8004e34 <__lo0bits+0x22>
 8004e1c:	07d9      	lsls	r1, r3, #31
 8004e1e:	d421      	bmi.n	8004e64 <__lo0bits+0x52>
 8004e20:	0798      	lsls	r0, r3, #30
 8004e22:	bf49      	itett	mi
 8004e24:	085b      	lsrmi	r3, r3, #1
 8004e26:	089b      	lsrpl	r3, r3, #2
 8004e28:	2001      	movmi	r0, #1
 8004e2a:	6013      	strmi	r3, [r2, #0]
 8004e2c:	bf5c      	itt	pl
 8004e2e:	2002      	movpl	r0, #2
 8004e30:	6013      	strpl	r3, [r2, #0]
 8004e32:	4770      	bx	lr
 8004e34:	b299      	uxth	r1, r3
 8004e36:	b909      	cbnz	r1, 8004e3c <__lo0bits+0x2a>
 8004e38:	2010      	movs	r0, #16
 8004e3a:	0c1b      	lsrs	r3, r3, #16
 8004e3c:	b2d9      	uxtb	r1, r3
 8004e3e:	b909      	cbnz	r1, 8004e44 <__lo0bits+0x32>
 8004e40:	3008      	adds	r0, #8
 8004e42:	0a1b      	lsrs	r3, r3, #8
 8004e44:	0719      	lsls	r1, r3, #28
 8004e46:	bf04      	itt	eq
 8004e48:	091b      	lsreq	r3, r3, #4
 8004e4a:	3004      	addeq	r0, #4
 8004e4c:	0799      	lsls	r1, r3, #30
 8004e4e:	bf04      	itt	eq
 8004e50:	089b      	lsreq	r3, r3, #2
 8004e52:	3002      	addeq	r0, #2
 8004e54:	07d9      	lsls	r1, r3, #31
 8004e56:	d403      	bmi.n	8004e60 <__lo0bits+0x4e>
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	f100 0001 	add.w	r0, r0, #1
 8004e5e:	d003      	beq.n	8004e68 <__lo0bits+0x56>
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	4770      	bx	lr
 8004e64:	2000      	movs	r0, #0
 8004e66:	4770      	bx	lr
 8004e68:	2020      	movs	r0, #32
 8004e6a:	4770      	bx	lr

08004e6c <__i2b>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	460c      	mov	r4, r1
 8004e70:	2101      	movs	r1, #1
 8004e72:	f7ff ff07 	bl	8004c84 <_Balloc>
 8004e76:	4602      	mov	r2, r0
 8004e78:	b928      	cbnz	r0, 8004e86 <__i2b+0x1a>
 8004e7a:	f240 1145 	movw	r1, #325	@ 0x145
 8004e7e:	4b04      	ldr	r3, [pc, #16]	@ (8004e90 <__i2b+0x24>)
 8004e80:	4804      	ldr	r0, [pc, #16]	@ (8004e94 <__i2b+0x28>)
 8004e82:	f000 fc87 	bl	8005794 <__assert_func>
 8004e86:	2301      	movs	r3, #1
 8004e88:	6144      	str	r4, [r0, #20]
 8004e8a:	6103      	str	r3, [r0, #16]
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop
 8004e90:	08007e36 	.word	0x08007e36
 8004e94:	08007e58 	.word	0x08007e58

08004e98 <__multiply>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	690a      	ldr	r2, [r1, #16]
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	460f      	mov	r7, r1
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	bfa2      	ittt	ge
 8004ea8:	4623      	movge	r3, r4
 8004eaa:	460c      	movge	r4, r1
 8004eac:	461f      	movge	r7, r3
 8004eae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004eb2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	6861      	ldr	r1, [r4, #4]
 8004eba:	eb0a 0609 	add.w	r6, sl, r9
 8004ebe:	42b3      	cmp	r3, r6
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	bfb8      	it	lt
 8004ec4:	3101      	addlt	r1, #1
 8004ec6:	f7ff fedd 	bl	8004c84 <_Balloc>
 8004eca:	b930      	cbnz	r0, 8004eda <__multiply+0x42>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004ed2:	4b43      	ldr	r3, [pc, #268]	@ (8004fe0 <__multiply+0x148>)
 8004ed4:	4843      	ldr	r0, [pc, #268]	@ (8004fe4 <__multiply+0x14c>)
 8004ed6:	f000 fc5d 	bl	8005794 <__assert_func>
 8004eda:	f100 0514 	add.w	r5, r0, #20
 8004ede:	462b      	mov	r3, r5
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ee6:	4543      	cmp	r3, r8
 8004ee8:	d321      	bcc.n	8004f2e <__multiply+0x96>
 8004eea:	f107 0114 	add.w	r1, r7, #20
 8004eee:	f104 0214 	add.w	r2, r4, #20
 8004ef2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004ef6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	1b13      	subs	r3, r2, r4
 8004efe:	3b15      	subs	r3, #21
 8004f00:	f023 0303 	bic.w	r3, r3, #3
 8004f04:	3304      	adds	r3, #4
 8004f06:	f104 0715 	add.w	r7, r4, #21
 8004f0a:	42ba      	cmp	r2, r7
 8004f0c:	bf38      	it	cc
 8004f0e:	2304      	movcc	r3, #4
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	9b02      	ldr	r3, [sp, #8]
 8004f14:	9103      	str	r1, [sp, #12]
 8004f16:	428b      	cmp	r3, r1
 8004f18:	d80c      	bhi.n	8004f34 <__multiply+0x9c>
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	dd03      	ble.n	8004f26 <__multiply+0x8e>
 8004f1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d05a      	beq.n	8004fdc <__multiply+0x144>
 8004f26:	6106      	str	r6, [r0, #16]
 8004f28:	b005      	add	sp, #20
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	f843 2b04 	str.w	r2, [r3], #4
 8004f32:	e7d8      	b.n	8004ee6 <__multiply+0x4e>
 8004f34:	f8b1 a000 	ldrh.w	sl, [r1]
 8004f38:	f1ba 0f00 	cmp.w	sl, #0
 8004f3c:	d023      	beq.n	8004f86 <__multiply+0xee>
 8004f3e:	46a9      	mov	r9, r5
 8004f40:	f04f 0c00 	mov.w	ip, #0
 8004f44:	f104 0e14 	add.w	lr, r4, #20
 8004f48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004f4c:	f8d9 3000 	ldr.w	r3, [r9]
 8004f50:	fa1f fb87 	uxth.w	fp, r7
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	fb0a 330b 	mla	r3, sl, fp, r3
 8004f5a:	4463      	add	r3, ip
 8004f5c:	f8d9 c000 	ldr.w	ip, [r9]
 8004f60:	0c3f      	lsrs	r7, r7, #16
 8004f62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004f66:	fb0a c707 	mla	r7, sl, r7, ip
 8004f6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004f74:	4572      	cmp	r2, lr
 8004f76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004f7a:	f849 3b04 	str.w	r3, [r9], #4
 8004f7e:	d8e3      	bhi.n	8004f48 <__multiply+0xb0>
 8004f80:	9b01      	ldr	r3, [sp, #4]
 8004f82:	f845 c003 	str.w	ip, [r5, r3]
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	3104      	adds	r1, #4
 8004f8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004f8e:	f1b9 0f00 	cmp.w	r9, #0
 8004f92:	d021      	beq.n	8004fd8 <__multiply+0x140>
 8004f94:	46ae      	mov	lr, r5
 8004f96:	f04f 0a00 	mov.w	sl, #0
 8004f9a:	682b      	ldr	r3, [r5, #0]
 8004f9c:	f104 0c14 	add.w	ip, r4, #20
 8004fa0:	f8bc b000 	ldrh.w	fp, [ip]
 8004fa4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	fb09 770b 	mla	r7, r9, fp, r7
 8004fae:	4457      	add	r7, sl
 8004fb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004fb4:	f84e 3b04 	str.w	r3, [lr], #4
 8004fb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fc0:	f8be 3000 	ldrh.w	r3, [lr]
 8004fc4:	4562      	cmp	r2, ip
 8004fc6:	fb09 330a 	mla	r3, r9, sl, r3
 8004fca:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004fce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fd2:	d8e5      	bhi.n	8004fa0 <__multiply+0x108>
 8004fd4:	9f01      	ldr	r7, [sp, #4]
 8004fd6:	51eb      	str	r3, [r5, r7]
 8004fd8:	3504      	adds	r5, #4
 8004fda:	e79a      	b.n	8004f12 <__multiply+0x7a>
 8004fdc:	3e01      	subs	r6, #1
 8004fde:	e79c      	b.n	8004f1a <__multiply+0x82>
 8004fe0:	08007e36 	.word	0x08007e36
 8004fe4:	08007e58 	.word	0x08007e58

08004fe8 <__pow5mult>:
 8004fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fec:	4615      	mov	r5, r2
 8004fee:	f012 0203 	ands.w	r2, r2, #3
 8004ff2:	4607      	mov	r7, r0
 8004ff4:	460e      	mov	r6, r1
 8004ff6:	d007      	beq.n	8005008 <__pow5mult+0x20>
 8004ff8:	4c25      	ldr	r4, [pc, #148]	@ (8005090 <__pow5mult+0xa8>)
 8004ffa:	3a01      	subs	r2, #1
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005002:	f7ff fea1 	bl	8004d48 <__multadd>
 8005006:	4606      	mov	r6, r0
 8005008:	10ad      	asrs	r5, r5, #2
 800500a:	d03d      	beq.n	8005088 <__pow5mult+0xa0>
 800500c:	69fc      	ldr	r4, [r7, #28]
 800500e:	b97c      	cbnz	r4, 8005030 <__pow5mult+0x48>
 8005010:	2010      	movs	r0, #16
 8005012:	f7ff fcd9 	bl	80049c8 <malloc>
 8005016:	4602      	mov	r2, r0
 8005018:	61f8      	str	r0, [r7, #28]
 800501a:	b928      	cbnz	r0, 8005028 <__pow5mult+0x40>
 800501c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005020:	4b1c      	ldr	r3, [pc, #112]	@ (8005094 <__pow5mult+0xac>)
 8005022:	481d      	ldr	r0, [pc, #116]	@ (8005098 <__pow5mult+0xb0>)
 8005024:	f000 fbb6 	bl	8005794 <__assert_func>
 8005028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800502c:	6004      	str	r4, [r0, #0]
 800502e:	60c4      	str	r4, [r0, #12]
 8005030:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005038:	b94c      	cbnz	r4, 800504e <__pow5mult+0x66>
 800503a:	f240 2171 	movw	r1, #625	@ 0x271
 800503e:	4638      	mov	r0, r7
 8005040:	f7ff ff14 	bl	8004e6c <__i2b>
 8005044:	2300      	movs	r3, #0
 8005046:	4604      	mov	r4, r0
 8005048:	f8c8 0008 	str.w	r0, [r8, #8]
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	f04f 0900 	mov.w	r9, #0
 8005052:	07eb      	lsls	r3, r5, #31
 8005054:	d50a      	bpl.n	800506c <__pow5mult+0x84>
 8005056:	4631      	mov	r1, r6
 8005058:	4622      	mov	r2, r4
 800505a:	4638      	mov	r0, r7
 800505c:	f7ff ff1c 	bl	8004e98 <__multiply>
 8005060:	4680      	mov	r8, r0
 8005062:	4631      	mov	r1, r6
 8005064:	4638      	mov	r0, r7
 8005066:	f7ff fe4d 	bl	8004d04 <_Bfree>
 800506a:	4646      	mov	r6, r8
 800506c:	106d      	asrs	r5, r5, #1
 800506e:	d00b      	beq.n	8005088 <__pow5mult+0xa0>
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	b938      	cbnz	r0, 8005084 <__pow5mult+0x9c>
 8005074:	4622      	mov	r2, r4
 8005076:	4621      	mov	r1, r4
 8005078:	4638      	mov	r0, r7
 800507a:	f7ff ff0d 	bl	8004e98 <__multiply>
 800507e:	6020      	str	r0, [r4, #0]
 8005080:	f8c0 9000 	str.w	r9, [r0]
 8005084:	4604      	mov	r4, r0
 8005086:	e7e4      	b.n	8005052 <__pow5mult+0x6a>
 8005088:	4630      	mov	r0, r6
 800508a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508e:	bf00      	nop
 8005090:	08007eb4 	.word	0x08007eb4
 8005094:	08007dc7 	.word	0x08007dc7
 8005098:	08007e58 	.word	0x08007e58

0800509c <__lshift>:
 800509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	460c      	mov	r4, r1
 80050a2:	4607      	mov	r7, r0
 80050a4:	4691      	mov	r9, r2
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	6849      	ldr	r1, [r1, #4]
 80050aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80050b4:	f108 0601 	add.w	r6, r8, #1
 80050b8:	42b3      	cmp	r3, r6
 80050ba:	db0b      	blt.n	80050d4 <__lshift+0x38>
 80050bc:	4638      	mov	r0, r7
 80050be:	f7ff fde1 	bl	8004c84 <_Balloc>
 80050c2:	4605      	mov	r5, r0
 80050c4:	b948      	cbnz	r0, 80050da <__lshift+0x3e>
 80050c6:	4602      	mov	r2, r0
 80050c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80050cc:	4b27      	ldr	r3, [pc, #156]	@ (800516c <__lshift+0xd0>)
 80050ce:	4828      	ldr	r0, [pc, #160]	@ (8005170 <__lshift+0xd4>)
 80050d0:	f000 fb60 	bl	8005794 <__assert_func>
 80050d4:	3101      	adds	r1, #1
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	e7ee      	b.n	80050b8 <__lshift+0x1c>
 80050da:	2300      	movs	r3, #0
 80050dc:	f100 0114 	add.w	r1, r0, #20
 80050e0:	f100 0210 	add.w	r2, r0, #16
 80050e4:	4618      	mov	r0, r3
 80050e6:	4553      	cmp	r3, sl
 80050e8:	db33      	blt.n	8005152 <__lshift+0xb6>
 80050ea:	6920      	ldr	r0, [r4, #16]
 80050ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050f0:	f104 0314 	add.w	r3, r4, #20
 80050f4:	f019 091f 	ands.w	r9, r9, #31
 80050f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005100:	d02b      	beq.n	800515a <__lshift+0xbe>
 8005102:	468a      	mov	sl, r1
 8005104:	2200      	movs	r2, #0
 8005106:	f1c9 0e20 	rsb	lr, r9, #32
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	fa00 f009 	lsl.w	r0, r0, r9
 8005110:	4310      	orrs	r0, r2
 8005112:	f84a 0b04 	str.w	r0, [sl], #4
 8005116:	f853 2b04 	ldr.w	r2, [r3], #4
 800511a:	459c      	cmp	ip, r3
 800511c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005120:	d8f3      	bhi.n	800510a <__lshift+0x6e>
 8005122:	ebac 0304 	sub.w	r3, ip, r4
 8005126:	3b15      	subs	r3, #21
 8005128:	f023 0303 	bic.w	r3, r3, #3
 800512c:	3304      	adds	r3, #4
 800512e:	f104 0015 	add.w	r0, r4, #21
 8005132:	4584      	cmp	ip, r0
 8005134:	bf38      	it	cc
 8005136:	2304      	movcc	r3, #4
 8005138:	50ca      	str	r2, [r1, r3]
 800513a:	b10a      	cbz	r2, 8005140 <__lshift+0xa4>
 800513c:	f108 0602 	add.w	r6, r8, #2
 8005140:	3e01      	subs	r6, #1
 8005142:	4638      	mov	r0, r7
 8005144:	4621      	mov	r1, r4
 8005146:	612e      	str	r6, [r5, #16]
 8005148:	f7ff fddc 	bl	8004d04 <_Bfree>
 800514c:	4628      	mov	r0, r5
 800514e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005152:	f842 0f04 	str.w	r0, [r2, #4]!
 8005156:	3301      	adds	r3, #1
 8005158:	e7c5      	b.n	80050e6 <__lshift+0x4a>
 800515a:	3904      	subs	r1, #4
 800515c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005160:	459c      	cmp	ip, r3
 8005162:	f841 2f04 	str.w	r2, [r1, #4]!
 8005166:	d8f9      	bhi.n	800515c <__lshift+0xc0>
 8005168:	e7ea      	b.n	8005140 <__lshift+0xa4>
 800516a:	bf00      	nop
 800516c:	08007e36 	.word	0x08007e36
 8005170:	08007e58 	.word	0x08007e58

08005174 <__mcmp>:
 8005174:	4603      	mov	r3, r0
 8005176:	690a      	ldr	r2, [r1, #16]
 8005178:	6900      	ldr	r0, [r0, #16]
 800517a:	b530      	push	{r4, r5, lr}
 800517c:	1a80      	subs	r0, r0, r2
 800517e:	d10e      	bne.n	800519e <__mcmp+0x2a>
 8005180:	3314      	adds	r3, #20
 8005182:	3114      	adds	r1, #20
 8005184:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005188:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800518c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005190:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005194:	4295      	cmp	r5, r2
 8005196:	d003      	beq.n	80051a0 <__mcmp+0x2c>
 8005198:	d205      	bcs.n	80051a6 <__mcmp+0x32>
 800519a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800519e:	bd30      	pop	{r4, r5, pc}
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	d3f3      	bcc.n	800518c <__mcmp+0x18>
 80051a4:	e7fb      	b.n	800519e <__mcmp+0x2a>
 80051a6:	2001      	movs	r0, #1
 80051a8:	e7f9      	b.n	800519e <__mcmp+0x2a>
	...

080051ac <__mdiff>:
 80051ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	4689      	mov	r9, r1
 80051b2:	4606      	mov	r6, r0
 80051b4:	4611      	mov	r1, r2
 80051b6:	4648      	mov	r0, r9
 80051b8:	4614      	mov	r4, r2
 80051ba:	f7ff ffdb 	bl	8005174 <__mcmp>
 80051be:	1e05      	subs	r5, r0, #0
 80051c0:	d112      	bne.n	80051e8 <__mdiff+0x3c>
 80051c2:	4629      	mov	r1, r5
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff fd5d 	bl	8004c84 <_Balloc>
 80051ca:	4602      	mov	r2, r0
 80051cc:	b928      	cbnz	r0, 80051da <__mdiff+0x2e>
 80051ce:	f240 2137 	movw	r1, #567	@ 0x237
 80051d2:	4b3e      	ldr	r3, [pc, #248]	@ (80052cc <__mdiff+0x120>)
 80051d4:	483e      	ldr	r0, [pc, #248]	@ (80052d0 <__mdiff+0x124>)
 80051d6:	f000 fadd 	bl	8005794 <__assert_func>
 80051da:	2301      	movs	r3, #1
 80051dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051e0:	4610      	mov	r0, r2
 80051e2:	b003      	add	sp, #12
 80051e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e8:	bfbc      	itt	lt
 80051ea:	464b      	movlt	r3, r9
 80051ec:	46a1      	movlt	r9, r4
 80051ee:	4630      	mov	r0, r6
 80051f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80051f4:	bfba      	itte	lt
 80051f6:	461c      	movlt	r4, r3
 80051f8:	2501      	movlt	r5, #1
 80051fa:	2500      	movge	r5, #0
 80051fc:	f7ff fd42 	bl	8004c84 <_Balloc>
 8005200:	4602      	mov	r2, r0
 8005202:	b918      	cbnz	r0, 800520c <__mdiff+0x60>
 8005204:	f240 2145 	movw	r1, #581	@ 0x245
 8005208:	4b30      	ldr	r3, [pc, #192]	@ (80052cc <__mdiff+0x120>)
 800520a:	e7e3      	b.n	80051d4 <__mdiff+0x28>
 800520c:	f100 0b14 	add.w	fp, r0, #20
 8005210:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005214:	f109 0310 	add.w	r3, r9, #16
 8005218:	60c5      	str	r5, [r0, #12]
 800521a:	f04f 0c00 	mov.w	ip, #0
 800521e:	f109 0514 	add.w	r5, r9, #20
 8005222:	46d9      	mov	r9, fp
 8005224:	6926      	ldr	r6, [r4, #16]
 8005226:	f104 0e14 	add.w	lr, r4, #20
 800522a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800522e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	9b01      	ldr	r3, [sp, #4]
 8005236:	f85e 0b04 	ldr.w	r0, [lr], #4
 800523a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800523e:	b281      	uxth	r1, r0
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	fa1f f38a 	uxth.w	r3, sl
 8005246:	1a5b      	subs	r3, r3, r1
 8005248:	0c00      	lsrs	r0, r0, #16
 800524a:	4463      	add	r3, ip
 800524c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005250:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005254:	b29b      	uxth	r3, r3
 8005256:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800525a:	4576      	cmp	r6, lr
 800525c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005260:	f849 3b04 	str.w	r3, [r9], #4
 8005264:	d8e6      	bhi.n	8005234 <__mdiff+0x88>
 8005266:	1b33      	subs	r3, r6, r4
 8005268:	3b15      	subs	r3, #21
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	3415      	adds	r4, #21
 8005270:	3304      	adds	r3, #4
 8005272:	42a6      	cmp	r6, r4
 8005274:	bf38      	it	cc
 8005276:	2304      	movcc	r3, #4
 8005278:	441d      	add	r5, r3
 800527a:	445b      	add	r3, fp
 800527c:	461e      	mov	r6, r3
 800527e:	462c      	mov	r4, r5
 8005280:	4544      	cmp	r4, r8
 8005282:	d30e      	bcc.n	80052a2 <__mdiff+0xf6>
 8005284:	f108 0103 	add.w	r1, r8, #3
 8005288:	1b49      	subs	r1, r1, r5
 800528a:	f021 0103 	bic.w	r1, r1, #3
 800528e:	3d03      	subs	r5, #3
 8005290:	45a8      	cmp	r8, r5
 8005292:	bf38      	it	cc
 8005294:	2100      	movcc	r1, #0
 8005296:	440b      	add	r3, r1
 8005298:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800529c:	b199      	cbz	r1, 80052c6 <__mdiff+0x11a>
 800529e:	6117      	str	r7, [r2, #16]
 80052a0:	e79e      	b.n	80051e0 <__mdiff+0x34>
 80052a2:	46e6      	mov	lr, ip
 80052a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80052a8:	fa1f fc81 	uxth.w	ip, r1
 80052ac:	44f4      	add	ip, lr
 80052ae:	0c08      	lsrs	r0, r1, #16
 80052b0:	4471      	add	r1, lr
 80052b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80052b6:	b289      	uxth	r1, r1
 80052b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80052bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80052c0:	f846 1b04 	str.w	r1, [r6], #4
 80052c4:	e7dc      	b.n	8005280 <__mdiff+0xd4>
 80052c6:	3f01      	subs	r7, #1
 80052c8:	e7e6      	b.n	8005298 <__mdiff+0xec>
 80052ca:	bf00      	nop
 80052cc:	08007e36 	.word	0x08007e36
 80052d0:	08007e58 	.word	0x08007e58

080052d4 <__d2b>:
 80052d4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80052d8:	2101      	movs	r1, #1
 80052da:	4690      	mov	r8, r2
 80052dc:	4699      	mov	r9, r3
 80052de:	9e08      	ldr	r6, [sp, #32]
 80052e0:	f7ff fcd0 	bl	8004c84 <_Balloc>
 80052e4:	4604      	mov	r4, r0
 80052e6:	b930      	cbnz	r0, 80052f6 <__d2b+0x22>
 80052e8:	4602      	mov	r2, r0
 80052ea:	f240 310f 	movw	r1, #783	@ 0x30f
 80052ee:	4b23      	ldr	r3, [pc, #140]	@ (800537c <__d2b+0xa8>)
 80052f0:	4823      	ldr	r0, [pc, #140]	@ (8005380 <__d2b+0xac>)
 80052f2:	f000 fa4f 	bl	8005794 <__assert_func>
 80052f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80052fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052fe:	b10d      	cbz	r5, 8005304 <__d2b+0x30>
 8005300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	f1b8 0300 	subs.w	r3, r8, #0
 800530a:	d024      	beq.n	8005356 <__d2b+0x82>
 800530c:	4668      	mov	r0, sp
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	f7ff fd7f 	bl	8004e12 <__lo0bits>
 8005314:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005318:	b1d8      	cbz	r0, 8005352 <__d2b+0x7e>
 800531a:	f1c0 0320 	rsb	r3, r0, #32
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	430b      	orrs	r3, r1
 8005324:	40c2      	lsrs	r2, r0
 8005326:	6163      	str	r3, [r4, #20]
 8005328:	9201      	str	r2, [sp, #4]
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf0c      	ite	eq
 8005330:	2201      	moveq	r2, #1
 8005332:	2202      	movne	r2, #2
 8005334:	61a3      	str	r3, [r4, #24]
 8005336:	6122      	str	r2, [r4, #16]
 8005338:	b1ad      	cbz	r5, 8005366 <__d2b+0x92>
 800533a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800533e:	4405      	add	r5, r0
 8005340:	6035      	str	r5, [r6, #0]
 8005342:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005348:	6018      	str	r0, [r3, #0]
 800534a:	4620      	mov	r0, r4
 800534c:	b002      	add	sp, #8
 800534e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005352:	6161      	str	r1, [r4, #20]
 8005354:	e7e9      	b.n	800532a <__d2b+0x56>
 8005356:	a801      	add	r0, sp, #4
 8005358:	f7ff fd5b 	bl	8004e12 <__lo0bits>
 800535c:	9b01      	ldr	r3, [sp, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	6163      	str	r3, [r4, #20]
 8005362:	3020      	adds	r0, #32
 8005364:	e7e7      	b.n	8005336 <__d2b+0x62>
 8005366:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800536a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800536e:	6030      	str	r0, [r6, #0]
 8005370:	6918      	ldr	r0, [r3, #16]
 8005372:	f7ff fd2f 	bl	8004dd4 <__hi0bits>
 8005376:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800537a:	e7e4      	b.n	8005346 <__d2b+0x72>
 800537c:	08007e36 	.word	0x08007e36
 8005380:	08007e58 	.word	0x08007e58

08005384 <__sread>:
 8005384:	b510      	push	{r4, lr}
 8005386:	460c      	mov	r4, r1
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	f000 f9c0 	bl	8005710 <_read_r>
 8005390:	2800      	cmp	r0, #0
 8005392:	bfab      	itete	ge
 8005394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005396:	89a3      	ldrhlt	r3, [r4, #12]
 8005398:	181b      	addge	r3, r3, r0
 800539a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800539e:	bfac      	ite	ge
 80053a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053a2:	81a3      	strhlt	r3, [r4, #12]
 80053a4:	bd10      	pop	{r4, pc}

080053a6 <__swrite>:
 80053a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	461f      	mov	r7, r3
 80053ac:	898b      	ldrh	r3, [r1, #12]
 80053ae:	4605      	mov	r5, r0
 80053b0:	05db      	lsls	r3, r3, #23
 80053b2:	460c      	mov	r4, r1
 80053b4:	4616      	mov	r6, r2
 80053b6:	d505      	bpl.n	80053c4 <__swrite+0x1e>
 80053b8:	2302      	movs	r3, #2
 80053ba:	2200      	movs	r2, #0
 80053bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c0:	f000 f994 	bl	80056ec <_lseek_r>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	4632      	mov	r2, r6
 80053c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053cc:	81a3      	strh	r3, [r4, #12]
 80053ce:	4628      	mov	r0, r5
 80053d0:	463b      	mov	r3, r7
 80053d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053da:	f000 b9bb 	b.w	8005754 <_write_r>

080053de <__sseek>:
 80053de:	b510      	push	{r4, lr}
 80053e0:	460c      	mov	r4, r1
 80053e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e6:	f000 f981 	bl	80056ec <_lseek_r>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	bf15      	itete	ne
 80053f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053fa:	81a3      	strheq	r3, [r4, #12]
 80053fc:	bf18      	it	ne
 80053fe:	81a3      	strhne	r3, [r4, #12]
 8005400:	bd10      	pop	{r4, pc}

08005402 <__sclose>:
 8005402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005406:	f000 b93f 	b.w	8005688 <_close_r>

0800540a <_realloc_r>:
 800540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540e:	4680      	mov	r8, r0
 8005410:	4615      	mov	r5, r2
 8005412:	460c      	mov	r4, r1
 8005414:	b921      	cbnz	r1, 8005420 <_realloc_r+0x16>
 8005416:	4611      	mov	r1, r2
 8005418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800541c:	f7ff bafe 	b.w	8004a1c <_malloc_r>
 8005420:	b92a      	cbnz	r2, 800542e <_realloc_r+0x24>
 8005422:	f000 f9e9 	bl	80057f8 <_free_r>
 8005426:	2400      	movs	r4, #0
 8005428:	4620      	mov	r0, r4
 800542a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542e:	f000 fa3d 	bl	80058ac <_malloc_usable_size_r>
 8005432:	4285      	cmp	r5, r0
 8005434:	4606      	mov	r6, r0
 8005436:	d802      	bhi.n	800543e <_realloc_r+0x34>
 8005438:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800543c:	d8f4      	bhi.n	8005428 <_realloc_r+0x1e>
 800543e:	4629      	mov	r1, r5
 8005440:	4640      	mov	r0, r8
 8005442:	f7ff faeb 	bl	8004a1c <_malloc_r>
 8005446:	4607      	mov	r7, r0
 8005448:	2800      	cmp	r0, #0
 800544a:	d0ec      	beq.n	8005426 <_realloc_r+0x1c>
 800544c:	42b5      	cmp	r5, r6
 800544e:	462a      	mov	r2, r5
 8005450:	4621      	mov	r1, r4
 8005452:	bf28      	it	cs
 8005454:	4632      	movcs	r2, r6
 8005456:	f000 f98f 	bl	8005778 <memcpy>
 800545a:	4621      	mov	r1, r4
 800545c:	4640      	mov	r0, r8
 800545e:	f000 f9cb 	bl	80057f8 <_free_r>
 8005462:	463c      	mov	r4, r7
 8005464:	e7e0      	b.n	8005428 <_realloc_r+0x1e>

08005466 <__swbuf_r>:
 8005466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005468:	460e      	mov	r6, r1
 800546a:	4614      	mov	r4, r2
 800546c:	4605      	mov	r5, r0
 800546e:	b118      	cbz	r0, 8005478 <__swbuf_r+0x12>
 8005470:	6a03      	ldr	r3, [r0, #32]
 8005472:	b90b      	cbnz	r3, 8005478 <__swbuf_r+0x12>
 8005474:	f7fe fa24 	bl	80038c0 <__sinit>
 8005478:	69a3      	ldr	r3, [r4, #24]
 800547a:	60a3      	str	r3, [r4, #8]
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	071a      	lsls	r2, r3, #28
 8005480:	d501      	bpl.n	8005486 <__swbuf_r+0x20>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	b943      	cbnz	r3, 8005498 <__swbuf_r+0x32>
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f82b 	bl	80054e4 <__swsetup_r>
 800548e:	b118      	cbz	r0, 8005498 <__swbuf_r+0x32>
 8005490:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005494:	4638      	mov	r0, r7
 8005496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	6922      	ldr	r2, [r4, #16]
 800549c:	b2f6      	uxtb	r6, r6
 800549e:	1a98      	subs	r0, r3, r2
 80054a0:	6963      	ldr	r3, [r4, #20]
 80054a2:	4637      	mov	r7, r6
 80054a4:	4283      	cmp	r3, r0
 80054a6:	dc05      	bgt.n	80054b4 <__swbuf_r+0x4e>
 80054a8:	4621      	mov	r1, r4
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7ff fbb6 	bl	8004c1c <_fflush_r>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d1ed      	bne.n	8005490 <__swbuf_r+0x2a>
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60a3      	str	r3, [r4, #8]
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	6022      	str	r2, [r4, #0]
 80054c0:	701e      	strb	r6, [r3, #0]
 80054c2:	6962      	ldr	r2, [r4, #20]
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d004      	beq.n	80054d4 <__swbuf_r+0x6e>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	07db      	lsls	r3, r3, #31
 80054ce:	d5e1      	bpl.n	8005494 <__swbuf_r+0x2e>
 80054d0:	2e0a      	cmp	r6, #10
 80054d2:	d1df      	bne.n	8005494 <__swbuf_r+0x2e>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f7ff fba0 	bl	8004c1c <_fflush_r>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d0d9      	beq.n	8005494 <__swbuf_r+0x2e>
 80054e0:	e7d6      	b.n	8005490 <__swbuf_r+0x2a>
	...

080054e4 <__swsetup_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4b29      	ldr	r3, [pc, #164]	@ (800558c <__swsetup_r+0xa8>)
 80054e8:	4605      	mov	r5, r0
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	460c      	mov	r4, r1
 80054ee:	b118      	cbz	r0, 80054f8 <__swsetup_r+0x14>
 80054f0:	6a03      	ldr	r3, [r0, #32]
 80054f2:	b90b      	cbnz	r3, 80054f8 <__swsetup_r+0x14>
 80054f4:	f7fe f9e4 	bl	80038c0 <__sinit>
 80054f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fc:	0719      	lsls	r1, r3, #28
 80054fe:	d422      	bmi.n	8005546 <__swsetup_r+0x62>
 8005500:	06da      	lsls	r2, r3, #27
 8005502:	d407      	bmi.n	8005514 <__swsetup_r+0x30>
 8005504:	2209      	movs	r2, #9
 8005506:	602a      	str	r2, [r5, #0]
 8005508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800550c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	e033      	b.n	800557c <__swsetup_r+0x98>
 8005514:	0758      	lsls	r0, r3, #29
 8005516:	d512      	bpl.n	800553e <__swsetup_r+0x5a>
 8005518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800551a:	b141      	cbz	r1, 800552e <__swsetup_r+0x4a>
 800551c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005520:	4299      	cmp	r1, r3
 8005522:	d002      	beq.n	800552a <__swsetup_r+0x46>
 8005524:	4628      	mov	r0, r5
 8005526:	f000 f967 	bl	80057f8 <_free_r>
 800552a:	2300      	movs	r3, #0
 800552c:	6363      	str	r3, [r4, #52]	@ 0x34
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	2300      	movs	r3, #0
 8005538:	6063      	str	r3, [r4, #4]
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f043 0308 	orr.w	r3, r3, #8
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	b94b      	cbnz	r3, 800555e <__swsetup_r+0x7a>
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005554:	d003      	beq.n	800555e <__swsetup_r+0x7a>
 8005556:	4621      	mov	r1, r4
 8005558:	4628      	mov	r0, r5
 800555a:	f000 f83e 	bl	80055da <__smakebuf_r>
 800555e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005562:	f013 0201 	ands.w	r2, r3, #1
 8005566:	d00a      	beq.n	800557e <__swsetup_r+0x9a>
 8005568:	2200      	movs	r2, #0
 800556a:	60a2      	str	r2, [r4, #8]
 800556c:	6962      	ldr	r2, [r4, #20]
 800556e:	4252      	negs	r2, r2
 8005570:	61a2      	str	r2, [r4, #24]
 8005572:	6922      	ldr	r2, [r4, #16]
 8005574:	b942      	cbnz	r2, 8005588 <__swsetup_r+0xa4>
 8005576:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800557a:	d1c5      	bne.n	8005508 <__swsetup_r+0x24>
 800557c:	bd38      	pop	{r3, r4, r5, pc}
 800557e:	0799      	lsls	r1, r3, #30
 8005580:	bf58      	it	pl
 8005582:	6962      	ldrpl	r2, [r4, #20]
 8005584:	60a2      	str	r2, [r4, #8]
 8005586:	e7f4      	b.n	8005572 <__swsetup_r+0x8e>
 8005588:	2000      	movs	r0, #0
 800558a:	e7f7      	b.n	800557c <__swsetup_r+0x98>
 800558c:	2000001c 	.word	0x2000001c

08005590 <__swhatbuf_r>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	460c      	mov	r4, r1
 8005594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005598:	4615      	mov	r5, r2
 800559a:	2900      	cmp	r1, #0
 800559c:	461e      	mov	r6, r3
 800559e:	b096      	sub	sp, #88	@ 0x58
 80055a0:	da0c      	bge.n	80055bc <__swhatbuf_r+0x2c>
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	2100      	movs	r1, #0
 80055a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055aa:	bf14      	ite	ne
 80055ac:	2340      	movne	r3, #64	@ 0x40
 80055ae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055b2:	2000      	movs	r0, #0
 80055b4:	6031      	str	r1, [r6, #0]
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	b016      	add	sp, #88	@ 0x58
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	466a      	mov	r2, sp
 80055be:	f000 f873 	bl	80056a8 <_fstat_r>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	dbed      	blt.n	80055a2 <__swhatbuf_r+0x12>
 80055c6:	9901      	ldr	r1, [sp, #4]
 80055c8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055cc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055d0:	4259      	negs	r1, r3
 80055d2:	4159      	adcs	r1, r3
 80055d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055d8:	e7eb      	b.n	80055b2 <__swhatbuf_r+0x22>

080055da <__smakebuf_r>:
 80055da:	898b      	ldrh	r3, [r1, #12]
 80055dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055de:	079d      	lsls	r5, r3, #30
 80055e0:	4606      	mov	r6, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	d507      	bpl.n	80055f6 <__smakebuf_r+0x1c>
 80055e6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	6123      	str	r3, [r4, #16]
 80055ee:	2301      	movs	r3, #1
 80055f0:	6163      	str	r3, [r4, #20]
 80055f2:	b003      	add	sp, #12
 80055f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f6:	466a      	mov	r2, sp
 80055f8:	ab01      	add	r3, sp, #4
 80055fa:	f7ff ffc9 	bl	8005590 <__swhatbuf_r>
 80055fe:	9f00      	ldr	r7, [sp, #0]
 8005600:	4605      	mov	r5, r0
 8005602:	4639      	mov	r1, r7
 8005604:	4630      	mov	r0, r6
 8005606:	f7ff fa09 	bl	8004a1c <_malloc_r>
 800560a:	b948      	cbnz	r0, 8005620 <__smakebuf_r+0x46>
 800560c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005610:	059a      	lsls	r2, r3, #22
 8005612:	d4ee      	bmi.n	80055f2 <__smakebuf_r+0x18>
 8005614:	f023 0303 	bic.w	r3, r3, #3
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	e7e2      	b.n	80055e6 <__smakebuf_r+0xc>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	9b01      	ldr	r3, [sp, #4]
 800562e:	6020      	str	r0, [r4, #0]
 8005630:	b15b      	cbz	r3, 800564a <__smakebuf_r+0x70>
 8005632:	4630      	mov	r0, r6
 8005634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005638:	f000 f848 	bl	80056cc <_isatty_r>
 800563c:	b128      	cbz	r0, 800564a <__smakebuf_r+0x70>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f023 0303 	bic.w	r3, r3, #3
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	81a3      	strh	r3, [r4, #12]
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	431d      	orrs	r5, r3
 800564e:	81a5      	strh	r5, [r4, #12]
 8005650:	e7cf      	b.n	80055f2 <__smakebuf_r+0x18>

08005652 <memmove>:
 8005652:	4288      	cmp	r0, r1
 8005654:	b510      	push	{r4, lr}
 8005656:	eb01 0402 	add.w	r4, r1, r2
 800565a:	d902      	bls.n	8005662 <memmove+0x10>
 800565c:	4284      	cmp	r4, r0
 800565e:	4623      	mov	r3, r4
 8005660:	d807      	bhi.n	8005672 <memmove+0x20>
 8005662:	1e43      	subs	r3, r0, #1
 8005664:	42a1      	cmp	r1, r4
 8005666:	d008      	beq.n	800567a <memmove+0x28>
 8005668:	f811 2b01 	ldrb.w	r2, [r1], #1
 800566c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005670:	e7f8      	b.n	8005664 <memmove+0x12>
 8005672:	4601      	mov	r1, r0
 8005674:	4402      	add	r2, r0
 8005676:	428a      	cmp	r2, r1
 8005678:	d100      	bne.n	800567c <memmove+0x2a>
 800567a:	bd10      	pop	{r4, pc}
 800567c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005680:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005684:	e7f7      	b.n	8005676 <memmove+0x24>
	...

08005688 <_close_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	2300      	movs	r3, #0
 800568c:	4d05      	ldr	r5, [pc, #20]	@ (80056a4 <_close_r+0x1c>)
 800568e:	4604      	mov	r4, r0
 8005690:	4608      	mov	r0, r1
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	f7fc f9ed 	bl	8001a72 <_close>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_close_r+0x1a>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_close_r+0x1a>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	2000174c 	.word	0x2000174c

080056a8 <_fstat_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	2300      	movs	r3, #0
 80056ac:	4d06      	ldr	r5, [pc, #24]	@ (80056c8 <_fstat_r+0x20>)
 80056ae:	4604      	mov	r4, r0
 80056b0:	4608      	mov	r0, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	f7fc f9e7 	bl	8001a88 <_fstat>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	d102      	bne.n	80056c4 <_fstat_r+0x1c>
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	b103      	cbz	r3, 80056c4 <_fstat_r+0x1c>
 80056c2:	6023      	str	r3, [r4, #0]
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
 80056c6:	bf00      	nop
 80056c8:	2000174c 	.word	0x2000174c

080056cc <_isatty_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	2300      	movs	r3, #0
 80056d0:	4d05      	ldr	r5, [pc, #20]	@ (80056e8 <_isatty_r+0x1c>)
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	f7fc f9e5 	bl	8001aa6 <_isatty>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_isatty_r+0x1a>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_isatty_r+0x1a>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	2000174c 	.word	0x2000174c

080056ec <_lseek_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	2200      	movs	r2, #0
 80056f6:	4d05      	ldr	r5, [pc, #20]	@ (800570c <_lseek_r+0x20>)
 80056f8:	602a      	str	r2, [r5, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f7fc f9dd 	bl	8001aba <_lseek>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_lseek_r+0x1e>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_lseek_r+0x1e>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	2000174c 	.word	0x2000174c

08005710 <_read_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	2200      	movs	r2, #0
 800571a:	4d05      	ldr	r5, [pc, #20]	@ (8005730 <_read_r+0x20>)
 800571c:	602a      	str	r2, [r5, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f7fc f98a 	bl	8001a38 <_read>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_read_r+0x1e>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_read_r+0x1e>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	2000174c 	.word	0x2000174c

08005734 <_sbrk_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	2300      	movs	r3, #0
 8005738:	4d05      	ldr	r5, [pc, #20]	@ (8005750 <_sbrk_r+0x1c>)
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fc f9c8 	bl	8001ad4 <_sbrk>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_sbrk_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_sbrk_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	2000174c 	.word	0x2000174c

08005754 <_write_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	2200      	movs	r2, #0
 800575e:	4d05      	ldr	r5, [pc, #20]	@ (8005774 <_write_r+0x20>)
 8005760:	602a      	str	r2, [r5, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	f7fb fed2 	bl	800150c <_write>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_write_r+0x1e>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_write_r+0x1e>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	2000174c 	.word	0x2000174c

08005778 <memcpy>:
 8005778:	440a      	add	r2, r1
 800577a:	4291      	cmp	r1, r2
 800577c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005780:	d100      	bne.n	8005784 <memcpy+0xc>
 8005782:	4770      	bx	lr
 8005784:	b510      	push	{r4, lr}
 8005786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800578a:	4291      	cmp	r1, r2
 800578c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005790:	d1f9      	bne.n	8005786 <memcpy+0xe>
 8005792:	bd10      	pop	{r4, pc}

08005794 <__assert_func>:
 8005794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005796:	4614      	mov	r4, r2
 8005798:	461a      	mov	r2, r3
 800579a:	4b09      	ldr	r3, [pc, #36]	@ (80057c0 <__assert_func+0x2c>)
 800579c:	4605      	mov	r5, r0
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68d8      	ldr	r0, [r3, #12]
 80057a2:	b954      	cbnz	r4, 80057ba <__assert_func+0x26>
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <__assert_func+0x30>)
 80057a6:	461c      	mov	r4, r3
 80057a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057ac:	9100      	str	r1, [sp, #0]
 80057ae:	462b      	mov	r3, r5
 80057b0:	4905      	ldr	r1, [pc, #20]	@ (80057c8 <__assert_func+0x34>)
 80057b2:	f000 f883 	bl	80058bc <fiprintf>
 80057b6:	f000 f8a0 	bl	80058fa <abort>
 80057ba:	4b04      	ldr	r3, [pc, #16]	@ (80057cc <__assert_func+0x38>)
 80057bc:	e7f4      	b.n	80057a8 <__assert_func+0x14>
 80057be:	bf00      	nop
 80057c0:	2000001c 	.word	0x2000001c
 80057c4:	080080f6 	.word	0x080080f6
 80057c8:	080080c8 	.word	0x080080c8
 80057cc:	080080bb 	.word	0x080080bb

080057d0 <_calloc_r>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	fba1 5402 	umull	r5, r4, r1, r2
 80057d6:	b93c      	cbnz	r4, 80057e8 <_calloc_r+0x18>
 80057d8:	4629      	mov	r1, r5
 80057da:	f7ff f91f 	bl	8004a1c <_malloc_r>
 80057de:	4606      	mov	r6, r0
 80057e0:	b928      	cbnz	r0, 80057ee <_calloc_r+0x1e>
 80057e2:	2600      	movs	r6, #0
 80057e4:	4630      	mov	r0, r6
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	220c      	movs	r2, #12
 80057ea:	6002      	str	r2, [r0, #0]
 80057ec:	e7f9      	b.n	80057e2 <_calloc_r+0x12>
 80057ee:	462a      	mov	r2, r5
 80057f0:	4621      	mov	r1, r4
 80057f2:	f7fe f8f9 	bl	80039e8 <memset>
 80057f6:	e7f5      	b.n	80057e4 <_calloc_r+0x14>

080057f8 <_free_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d040      	beq.n	8005882 <_free_r+0x8a>
 8005800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005804:	1f0c      	subs	r4, r1, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	bfb8      	it	lt
 800580a:	18e4      	addlt	r4, r4, r3
 800580c:	f7ff fa2e 	bl	8004c6c <__malloc_lock>
 8005810:	4a1c      	ldr	r2, [pc, #112]	@ (8005884 <_free_r+0x8c>)
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	b933      	cbnz	r3, 8005824 <_free_r+0x2c>
 8005816:	6063      	str	r3, [r4, #4]
 8005818:	6014      	str	r4, [r2, #0]
 800581a:	4628      	mov	r0, r5
 800581c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005820:	f7ff ba2a 	b.w	8004c78 <__malloc_unlock>
 8005824:	42a3      	cmp	r3, r4
 8005826:	d908      	bls.n	800583a <_free_r+0x42>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	1821      	adds	r1, r4, r0
 800582c:	428b      	cmp	r3, r1
 800582e:	bf01      	itttt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	1809      	addeq	r1, r1, r0
 8005836:	6021      	streq	r1, [r4, #0]
 8005838:	e7ed      	b.n	8005816 <_free_r+0x1e>
 800583a:	461a      	mov	r2, r3
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	b10b      	cbz	r3, 8005844 <_free_r+0x4c>
 8005840:	42a3      	cmp	r3, r4
 8005842:	d9fa      	bls.n	800583a <_free_r+0x42>
 8005844:	6811      	ldr	r1, [r2, #0]
 8005846:	1850      	adds	r0, r2, r1
 8005848:	42a0      	cmp	r0, r4
 800584a:	d10b      	bne.n	8005864 <_free_r+0x6c>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	4401      	add	r1, r0
 8005850:	1850      	adds	r0, r2, r1
 8005852:	4283      	cmp	r3, r0
 8005854:	6011      	str	r1, [r2, #0]
 8005856:	d1e0      	bne.n	800581a <_free_r+0x22>
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4408      	add	r0, r1
 800585e:	6010      	str	r0, [r2, #0]
 8005860:	6053      	str	r3, [r2, #4]
 8005862:	e7da      	b.n	800581a <_free_r+0x22>
 8005864:	d902      	bls.n	800586c <_free_r+0x74>
 8005866:	230c      	movs	r3, #12
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	e7d6      	b.n	800581a <_free_r+0x22>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	1821      	adds	r1, r4, r0
 8005870:	428b      	cmp	r3, r1
 8005872:	bf01      	itttt	eq
 8005874:	6819      	ldreq	r1, [r3, #0]
 8005876:	685b      	ldreq	r3, [r3, #4]
 8005878:	1809      	addeq	r1, r1, r0
 800587a:	6021      	streq	r1, [r4, #0]
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	6054      	str	r4, [r2, #4]
 8005880:	e7cb      	b.n	800581a <_free_r+0x22>
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	20001748 	.word	0x20001748

08005888 <__ascii_mbtowc>:
 8005888:	b082      	sub	sp, #8
 800588a:	b901      	cbnz	r1, 800588e <__ascii_mbtowc+0x6>
 800588c:	a901      	add	r1, sp, #4
 800588e:	b142      	cbz	r2, 80058a2 <__ascii_mbtowc+0x1a>
 8005890:	b14b      	cbz	r3, 80058a6 <__ascii_mbtowc+0x1e>
 8005892:	7813      	ldrb	r3, [r2, #0]
 8005894:	600b      	str	r3, [r1, #0]
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	1e10      	subs	r0, r2, #0
 800589a:	bf18      	it	ne
 800589c:	2001      	movne	r0, #1
 800589e:	b002      	add	sp, #8
 80058a0:	4770      	bx	lr
 80058a2:	4610      	mov	r0, r2
 80058a4:	e7fb      	b.n	800589e <__ascii_mbtowc+0x16>
 80058a6:	f06f 0001 	mvn.w	r0, #1
 80058aa:	e7f8      	b.n	800589e <__ascii_mbtowc+0x16>

080058ac <_malloc_usable_size_r>:
 80058ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b0:	1f18      	subs	r0, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bfbc      	itt	lt
 80058b6:	580b      	ldrlt	r3, [r1, r0]
 80058b8:	18c0      	addlt	r0, r0, r3
 80058ba:	4770      	bx	lr

080058bc <fiprintf>:
 80058bc:	b40e      	push	{r1, r2, r3}
 80058be:	b503      	push	{r0, r1, lr}
 80058c0:	4601      	mov	r1, r0
 80058c2:	ab03      	add	r3, sp, #12
 80058c4:	4805      	ldr	r0, [pc, #20]	@ (80058dc <fiprintf+0x20>)
 80058c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	f000 f843 	bl	8005958 <_vfiprintf_r>
 80058d2:	b002      	add	sp, #8
 80058d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d8:	b003      	add	sp, #12
 80058da:	4770      	bx	lr
 80058dc:	2000001c 	.word	0x2000001c

080058e0 <__ascii_wctomb>:
 80058e0:	4603      	mov	r3, r0
 80058e2:	4608      	mov	r0, r1
 80058e4:	b141      	cbz	r1, 80058f8 <__ascii_wctomb+0x18>
 80058e6:	2aff      	cmp	r2, #255	@ 0xff
 80058e8:	d904      	bls.n	80058f4 <__ascii_wctomb+0x14>
 80058ea:	228a      	movs	r2, #138	@ 0x8a
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	4770      	bx	lr
 80058f4:	2001      	movs	r0, #1
 80058f6:	700a      	strb	r2, [r1, #0]
 80058f8:	4770      	bx	lr

080058fa <abort>:
 80058fa:	2006      	movs	r0, #6
 80058fc:	b508      	push	{r3, lr}
 80058fe:	f000 f96b 	bl	8005bd8 <raise>
 8005902:	2001      	movs	r0, #1
 8005904:	f7fc f88d 	bl	8001a22 <_exit>

08005908 <__sfputc_r>:
 8005908:	6893      	ldr	r3, [r2, #8]
 800590a:	b410      	push	{r4}
 800590c:	3b01      	subs	r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	6093      	str	r3, [r2, #8]
 8005912:	da07      	bge.n	8005924 <__sfputc_r+0x1c>
 8005914:	6994      	ldr	r4, [r2, #24]
 8005916:	42a3      	cmp	r3, r4
 8005918:	db01      	blt.n	800591e <__sfputc_r+0x16>
 800591a:	290a      	cmp	r1, #10
 800591c:	d102      	bne.n	8005924 <__sfputc_r+0x1c>
 800591e:	bc10      	pop	{r4}
 8005920:	f7ff bda1 	b.w	8005466 <__swbuf_r>
 8005924:	6813      	ldr	r3, [r2, #0]
 8005926:	1c58      	adds	r0, r3, #1
 8005928:	6010      	str	r0, [r2, #0]
 800592a:	7019      	strb	r1, [r3, #0]
 800592c:	4608      	mov	r0, r1
 800592e:	bc10      	pop	{r4}
 8005930:	4770      	bx	lr

08005932 <__sfputs_r>:
 8005932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	4614      	mov	r4, r2
 800593a:	18d5      	adds	r5, r2, r3
 800593c:	42ac      	cmp	r4, r5
 800593e:	d101      	bne.n	8005944 <__sfputs_r+0x12>
 8005940:	2000      	movs	r0, #0
 8005942:	e007      	b.n	8005954 <__sfputs_r+0x22>
 8005944:	463a      	mov	r2, r7
 8005946:	4630      	mov	r0, r6
 8005948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594c:	f7ff ffdc 	bl	8005908 <__sfputc_r>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d1f3      	bne.n	800593c <__sfputs_r+0xa>
 8005954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005958 <_vfiprintf_r>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	460d      	mov	r5, r1
 800595e:	4614      	mov	r4, r2
 8005960:	4698      	mov	r8, r3
 8005962:	4606      	mov	r6, r0
 8005964:	b09d      	sub	sp, #116	@ 0x74
 8005966:	b118      	cbz	r0, 8005970 <_vfiprintf_r+0x18>
 8005968:	6a03      	ldr	r3, [r0, #32]
 800596a:	b90b      	cbnz	r3, 8005970 <_vfiprintf_r+0x18>
 800596c:	f7fd ffa8 	bl	80038c0 <__sinit>
 8005970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005972:	07d9      	lsls	r1, r3, #31
 8005974:	d405      	bmi.n	8005982 <_vfiprintf_r+0x2a>
 8005976:	89ab      	ldrh	r3, [r5, #12]
 8005978:	059a      	lsls	r2, r3, #22
 800597a:	d402      	bmi.n	8005982 <_vfiprintf_r+0x2a>
 800597c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800597e:	f7fe f86a 	bl	8003a56 <__retarget_lock_acquire_recursive>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	071b      	lsls	r3, r3, #28
 8005986:	d501      	bpl.n	800598c <_vfiprintf_r+0x34>
 8005988:	692b      	ldr	r3, [r5, #16]
 800598a:	b99b      	cbnz	r3, 80059b4 <_vfiprintf_r+0x5c>
 800598c:	4629      	mov	r1, r5
 800598e:	4630      	mov	r0, r6
 8005990:	f7ff fda8 	bl	80054e4 <__swsetup_r>
 8005994:	b170      	cbz	r0, 80059b4 <_vfiprintf_r+0x5c>
 8005996:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005998:	07dc      	lsls	r4, r3, #31
 800599a:	d504      	bpl.n	80059a6 <_vfiprintf_r+0x4e>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059a0:	b01d      	add	sp, #116	@ 0x74
 80059a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a6:	89ab      	ldrh	r3, [r5, #12]
 80059a8:	0598      	lsls	r0, r3, #22
 80059aa:	d4f7      	bmi.n	800599c <_vfiprintf_r+0x44>
 80059ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059ae:	f7fe f853 	bl	8003a58 <__retarget_lock_release_recursive>
 80059b2:	e7f3      	b.n	800599c <_vfiprintf_r+0x44>
 80059b4:	2300      	movs	r3, #0
 80059b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059b8:	2320      	movs	r3, #32
 80059ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059be:	2330      	movs	r3, #48	@ 0x30
 80059c0:	f04f 0901 	mov.w	r9, #1
 80059c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005b74 <_vfiprintf_r+0x21c>
 80059cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059d0:	4623      	mov	r3, r4
 80059d2:	469a      	mov	sl, r3
 80059d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d8:	b10a      	cbz	r2, 80059de <_vfiprintf_r+0x86>
 80059da:	2a25      	cmp	r2, #37	@ 0x25
 80059dc:	d1f9      	bne.n	80059d2 <_vfiprintf_r+0x7a>
 80059de:	ebba 0b04 	subs.w	fp, sl, r4
 80059e2:	d00b      	beq.n	80059fc <_vfiprintf_r+0xa4>
 80059e4:	465b      	mov	r3, fp
 80059e6:	4622      	mov	r2, r4
 80059e8:	4629      	mov	r1, r5
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7ff ffa1 	bl	8005932 <__sfputs_r>
 80059f0:	3001      	adds	r0, #1
 80059f2:	f000 80a7 	beq.w	8005b44 <_vfiprintf_r+0x1ec>
 80059f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059f8:	445a      	add	r2, fp
 80059fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80059fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 809f 	beq.w	8005b44 <_vfiprintf_r+0x1ec>
 8005a06:	2300      	movs	r3, #0
 8005a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a10:	f10a 0a01 	add.w	sl, sl, #1
 8005a14:	9304      	str	r3, [sp, #16]
 8005a16:	9307      	str	r3, [sp, #28]
 8005a18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a1e:	4654      	mov	r4, sl
 8005a20:	2205      	movs	r2, #5
 8005a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a26:	4853      	ldr	r0, [pc, #332]	@ (8005b74 <_vfiprintf_r+0x21c>)
 8005a28:	f7fe f817 	bl	8003a5a <memchr>
 8005a2c:	9a04      	ldr	r2, [sp, #16]
 8005a2e:	b9d8      	cbnz	r0, 8005a68 <_vfiprintf_r+0x110>
 8005a30:	06d1      	lsls	r1, r2, #27
 8005a32:	bf44      	itt	mi
 8005a34:	2320      	movmi	r3, #32
 8005a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a3a:	0713      	lsls	r3, r2, #28
 8005a3c:	bf44      	itt	mi
 8005a3e:	232b      	movmi	r3, #43	@ 0x2b
 8005a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a44:	f89a 3000 	ldrb.w	r3, [sl]
 8005a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a4a:	d015      	beq.n	8005a78 <_vfiprintf_r+0x120>
 8005a4c:	4654      	mov	r4, sl
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f04f 0c0a 	mov.w	ip, #10
 8005a54:	9a07      	ldr	r2, [sp, #28]
 8005a56:	4621      	mov	r1, r4
 8005a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5c:	3b30      	subs	r3, #48	@ 0x30
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	d94b      	bls.n	8005afa <_vfiprintf_r+0x1a2>
 8005a62:	b1b0      	cbz	r0, 8005a92 <_vfiprintf_r+0x13a>
 8005a64:	9207      	str	r2, [sp, #28]
 8005a66:	e014      	b.n	8005a92 <_vfiprintf_r+0x13a>
 8005a68:	eba0 0308 	sub.w	r3, r0, r8
 8005a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a70:	4313      	orrs	r3, r2
 8005a72:	46a2      	mov	sl, r4
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	e7d2      	b.n	8005a1e <_vfiprintf_r+0xc6>
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	1d19      	adds	r1, r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	9103      	str	r1, [sp, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bfbb      	ittet	lt
 8005a84:	425b      	neglt	r3, r3
 8005a86:	f042 0202 	orrlt.w	r2, r2, #2
 8005a8a:	9307      	strge	r3, [sp, #28]
 8005a8c:	9307      	strlt	r3, [sp, #28]
 8005a8e:	bfb8      	it	lt
 8005a90:	9204      	strlt	r2, [sp, #16]
 8005a92:	7823      	ldrb	r3, [r4, #0]
 8005a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a96:	d10a      	bne.n	8005aae <_vfiprintf_r+0x156>
 8005a98:	7863      	ldrb	r3, [r4, #1]
 8005a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a9c:	d132      	bne.n	8005b04 <_vfiprintf_r+0x1ac>
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	3402      	adds	r4, #2
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	9203      	str	r2, [sp, #12]
 8005aa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005aac:	9305      	str	r3, [sp, #20]
 8005aae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005b78 <_vfiprintf_r+0x220>
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	7821      	ldrb	r1, [r4, #0]
 8005ab8:	f7fd ffcf 	bl	8003a5a <memchr>
 8005abc:	b138      	cbz	r0, 8005ace <_vfiprintf_r+0x176>
 8005abe:	2240      	movs	r2, #64	@ 0x40
 8005ac0:	9b04      	ldr	r3, [sp, #16]
 8005ac2:	eba0 000a 	sub.w	r0, r0, sl
 8005ac6:	4082      	lsls	r2, r0
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	3401      	adds	r4, #1
 8005acc:	9304      	str	r3, [sp, #16]
 8005ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad2:	2206      	movs	r2, #6
 8005ad4:	4829      	ldr	r0, [pc, #164]	@ (8005b7c <_vfiprintf_r+0x224>)
 8005ad6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ada:	f7fd ffbe 	bl	8003a5a <memchr>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d03f      	beq.n	8005b62 <_vfiprintf_r+0x20a>
 8005ae2:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <_vfiprintf_r+0x228>)
 8005ae4:	bb1b      	cbnz	r3, 8005b2e <_vfiprintf_r+0x1d6>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	3307      	adds	r3, #7
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	3308      	adds	r3, #8
 8005af0:	9303      	str	r3, [sp, #12]
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	443b      	add	r3, r7
 8005af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af8:	e76a      	b.n	80059d0 <_vfiprintf_r+0x78>
 8005afa:	460c      	mov	r4, r1
 8005afc:	2001      	movs	r0, #1
 8005afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b02:	e7a8      	b.n	8005a56 <_vfiprintf_r+0xfe>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f04f 0c0a 	mov.w	ip, #10
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	3401      	adds	r4, #1
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	4620      	mov	r0, r4
 8005b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b16:	3a30      	subs	r2, #48	@ 0x30
 8005b18:	2a09      	cmp	r2, #9
 8005b1a:	d903      	bls.n	8005b24 <_vfiprintf_r+0x1cc>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0c6      	beq.n	8005aae <_vfiprintf_r+0x156>
 8005b20:	9105      	str	r1, [sp, #20]
 8005b22:	e7c4      	b.n	8005aae <_vfiprintf_r+0x156>
 8005b24:	4604      	mov	r4, r0
 8005b26:	2301      	movs	r3, #1
 8005b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2c:	e7f0      	b.n	8005b10 <_vfiprintf_r+0x1b8>
 8005b2e:	ab03      	add	r3, sp, #12
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	462a      	mov	r2, r5
 8005b34:	4630      	mov	r0, r6
 8005b36:	4b13      	ldr	r3, [pc, #76]	@ (8005b84 <_vfiprintf_r+0x22c>)
 8005b38:	a904      	add	r1, sp, #16
 8005b3a:	f7fd fa57 	bl	8002fec <_printf_float>
 8005b3e:	4607      	mov	r7, r0
 8005b40:	1c78      	adds	r0, r7, #1
 8005b42:	d1d6      	bne.n	8005af2 <_vfiprintf_r+0x19a>
 8005b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b46:	07d9      	lsls	r1, r3, #31
 8005b48:	d405      	bmi.n	8005b56 <_vfiprintf_r+0x1fe>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	059a      	lsls	r2, r3, #22
 8005b4e:	d402      	bmi.n	8005b56 <_vfiprintf_r+0x1fe>
 8005b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b52:	f7fd ff81 	bl	8003a58 <__retarget_lock_release_recursive>
 8005b56:	89ab      	ldrh	r3, [r5, #12]
 8005b58:	065b      	lsls	r3, r3, #25
 8005b5a:	f53f af1f 	bmi.w	800599c <_vfiprintf_r+0x44>
 8005b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b60:	e71e      	b.n	80059a0 <_vfiprintf_r+0x48>
 8005b62:	ab03      	add	r3, sp, #12
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	462a      	mov	r2, r5
 8005b68:	4630      	mov	r0, r6
 8005b6a:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <_vfiprintf_r+0x22c>)
 8005b6c:	a904      	add	r1, sp, #16
 8005b6e:	f7fd fcdb 	bl	8003528 <_printf_i>
 8005b72:	e7e4      	b.n	8005b3e <_vfiprintf_r+0x1e6>
 8005b74:	08007e47 	.word	0x08007e47
 8005b78:	08007e4d 	.word	0x08007e4d
 8005b7c:	08007e51 	.word	0x08007e51
 8005b80:	08002fed 	.word	0x08002fed
 8005b84:	08005933 	.word	0x08005933

08005b88 <_raise_r>:
 8005b88:	291f      	cmp	r1, #31
 8005b8a:	b538      	push	{r3, r4, r5, lr}
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	d904      	bls.n	8005b9c <_raise_r+0x14>
 8005b92:	2316      	movs	r3, #22
 8005b94:	6003      	str	r3, [r0, #0]
 8005b96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
 8005b9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005b9e:	b112      	cbz	r2, 8005ba6 <_raise_r+0x1e>
 8005ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ba4:	b94b      	cbnz	r3, 8005bba <_raise_r+0x32>
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 f830 	bl	8005c0c <_getpid_r>
 8005bac:	4622      	mov	r2, r4
 8005bae:	4601      	mov	r1, r0
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bb6:	f000 b817 	b.w	8005be8 <_kill_r>
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d00a      	beq.n	8005bd4 <_raise_r+0x4c>
 8005bbe:	1c59      	adds	r1, r3, #1
 8005bc0:	d103      	bne.n	8005bca <_raise_r+0x42>
 8005bc2:	2316      	movs	r3, #22
 8005bc4:	6003      	str	r3, [r0, #0]
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	e7e7      	b.n	8005b9a <_raise_r+0x12>
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005bd2:	4798      	blx	r3
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	e7e0      	b.n	8005b9a <_raise_r+0x12>

08005bd8 <raise>:
 8005bd8:	4b02      	ldr	r3, [pc, #8]	@ (8005be4 <raise+0xc>)
 8005bda:	4601      	mov	r1, r0
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	f7ff bfd3 	b.w	8005b88 <_raise_r>
 8005be2:	bf00      	nop
 8005be4:	2000001c 	.word	0x2000001c

08005be8 <_kill_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	2300      	movs	r3, #0
 8005bec:	4d06      	ldr	r5, [pc, #24]	@ (8005c08 <_kill_r+0x20>)
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	f7fb ff04 	bl	8001a02 <_kill>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d102      	bne.n	8005c04 <_kill_r+0x1c>
 8005bfe:	682b      	ldr	r3, [r5, #0]
 8005c00:	b103      	cbz	r3, 8005c04 <_kill_r+0x1c>
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	bd38      	pop	{r3, r4, r5, pc}
 8005c06:	bf00      	nop
 8005c08:	2000174c 	.word	0x2000174c

08005c0c <_getpid_r>:
 8005c0c:	f7fb bef2 	b.w	80019f4 <_getpid>

08005c10 <_init>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr

08005c1c <_fini>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr
